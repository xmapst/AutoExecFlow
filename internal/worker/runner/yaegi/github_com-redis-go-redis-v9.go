// Code generated by 'yaegi extract github.com/redis/go-redis/v9'. DO NOT EDIT.

package yaegi

import (
	"context"
	"github.com/redis/go-redis/v9"
	"go/constant"
	"go/token"
	"reflect"
	"time"
)

func init() {
	Symbols["github.com/redis/go-redis/v9/redis"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Avg":                            reflect.ValueOf(redis.Avg),
		"BitCountIndexBit":               reflect.ValueOf(redis.BitCountIndexBit),
		"BitCountIndexByte":              reflect.ValueOf(redis.BitCountIndexByte),
		"ClientAllowOOM":                 reflect.ValueOf(redis.ClientAllowOOM),
		"ClientAsking":                   reflect.ValueOf(redis.ClientAsking),
		"ClientBlocked":                  reflect.ValueOf(redis.ClientBlocked),
		"ClientCloseASAP":                reflect.ValueOf(redis.ClientCloseASAP),
		"ClientCloseAfterCommand":        reflect.ValueOf(redis.ClientCloseAfterCommand),
		"ClientCloseAfterReply":          reflect.ValueOf(redis.ClientCloseAfterReply),
		"ClientDenyBlocking":             reflect.ValueOf(redis.ClientDenyBlocking),
		"ClientDirtyCAS":                 reflect.ValueOf(redis.ClientDirtyCAS),
		"ClientDirtyExec":                reflect.ValueOf(redis.ClientDirtyExec),
		"ClientExecutingCommand":         reflect.ValueOf(redis.ClientExecutingCommand),
		"ClientForceAOF":                 reflect.ValueOf(redis.ClientForceAOF),
		"ClientForceRepl":                reflect.ValueOf(redis.ClientForceRepl),
		"ClientInTimeoutTable":           reflect.ValueOf(redis.ClientInTimeoutTable),
		"ClientLuaDebug":                 reflect.ValueOf(redis.ClientLuaDebug),
		"ClientLuaDebugSync":             reflect.ValueOf(redis.ClientLuaDebugSync),
		"ClientMaster":                   reflect.ValueOf(redis.ClientMaster),
		"ClientMasterForceReply":         reflect.ValueOf(redis.ClientMasterForceReply),
		"ClientModule":                   reflect.ValueOf(redis.ClientModule),
		"ClientMonitor":                  reflect.ValueOf(redis.ClientMonitor),
		"ClientMulti":                    reflect.ValueOf(redis.ClientMulti),
		"ClientNoEvict":                  reflect.ValueOf(redis.ClientNoEvict),
		"ClientNoTouch":                  reflect.ValueOf(redis.ClientNoTouch),
		"ClientPendingCommand":           reflect.ValueOf(redis.ClientPendingCommand),
		"ClientPendingWrite":             reflect.ValueOf(redis.ClientPendingWrite),
		"ClientPrePSync":                 reflect.ValueOf(redis.ClientPrePSync),
		"ClientPreventAOFProp":           reflect.ValueOf(redis.ClientPreventAOFProp),
		"ClientPreventProp":              reflect.ValueOf(redis.ClientPreventProp),
		"ClientPreventReplProp":          reflect.ValueOf(redis.ClientPreventReplProp),
		"ClientProtected":                reflect.ValueOf(redis.ClientProtected),
		"ClientProtocolError":            reflect.ValueOf(redis.ClientProtocolError),
		"ClientPubSub":                   reflect.ValueOf(redis.ClientPubSub),
		"ClientPushing":                  reflect.ValueOf(redis.ClientPushing),
		"ClientReadOnly":                 reflect.ValueOf(redis.ClientReadOnly),
		"ClientReplRDBOnly":              reflect.ValueOf(redis.ClientReplRDBOnly),
		"ClientReplyOff":                 reflect.ValueOf(redis.ClientReplyOff),
		"ClientReplySkip":                reflect.ValueOf(redis.ClientReplySkip),
		"ClientReplySkipNext":            reflect.ValueOf(redis.ClientReplySkipNext),
		"ClientScript":                   reflect.ValueOf(redis.ClientScript),
		"ClientSlave":                    reflect.ValueOf(redis.ClientSlave),
		"ClientTracking":                 reflect.ValueOf(redis.ClientTracking),
		"ClientTrackingBCAST":            reflect.ValueOf(redis.ClientTrackingBCAST),
		"ClientTrackingBrokenRedir":      reflect.ValueOf(redis.ClientTrackingBrokenRedir),
		"ClientTrackingCaching":          reflect.ValueOf(redis.ClientTrackingCaching),
		"ClientTrackingNoLoop":           reflect.ValueOf(redis.ClientTrackingNoLoop),
		"ClientTrackingOptIn":            reflect.ValueOf(redis.ClientTrackingOptIn),
		"ClientTrackingOptOut":           reflect.ValueOf(redis.ClientTrackingOptOut),
		"ClientUnBlocked":                reflect.ValueOf(redis.ClientUnBlocked),
		"ClientUnixSocket":               reflect.ValueOf(redis.ClientUnixSocket),
		"Count":                          reflect.ValueOf(redis.Count),
		"ErrClosed":                      reflect.ValueOf(&redis.ErrClosed).Elem(),
		"FTAggregateQuery":               reflect.ValueOf(redis.FTAggregateQuery),
		"FTSearchQuery":                  reflect.ValueOf(redis.FTSearchQuery),
		"First":                          reflect.ValueOf(redis.First),
		"HasErrorPrefix":                 reflect.ValueOf(redis.HasErrorPrefix),
		"Invalid":                        reflect.ValueOf(redis.Invalid),
		"KeepTTL":                        reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"Last":                           reflect.ValueOf(redis.Last),
		"Max":                            reflect.ValueOf(redis.Max),
		"Min":                            reflect.ValueOf(redis.Min),
		"NewACLLogCmd":                   reflect.ValueOf(redis.NewACLLogCmd),
		"NewAggregateCmd":                reflect.ValueOf(redis.NewAggregateCmd),
		"NewBFInfoCmd":                   reflect.ValueOf(redis.NewBFInfoCmd),
		"NewBoolCmd":                     reflect.ValueOf(redis.NewBoolCmd),
		"NewBoolResult":                  reflect.ValueOf(redis.NewBoolResult),
		"NewBoolSliceCmd":                reflect.ValueOf(redis.NewBoolSliceCmd),
		"NewBoolSliceResult":             reflect.ValueOf(redis.NewBoolSliceResult),
		"NewCFInfoCmd":                   reflect.ValueOf(redis.NewCFInfoCmd),
		"NewCMSInfoCmd":                  reflect.ValueOf(redis.NewCMSInfoCmd),
		"NewClient":                      reflect.ValueOf(redis.NewClient),
		"NewClientInfoCmd":               reflect.ValueOf(redis.NewClientInfoCmd),
		"NewClusterClient":               reflect.ValueOf(redis.NewClusterClient),
		"NewClusterLinksCmd":             reflect.ValueOf(redis.NewClusterLinksCmd),
		"NewClusterShardsCmd":            reflect.ValueOf(redis.NewClusterShardsCmd),
		"NewClusterSlotsCmd":             reflect.ValueOf(redis.NewClusterSlotsCmd),
		"NewClusterSlotsCmdResult":       reflect.ValueOf(redis.NewClusterSlotsCmdResult),
		"NewCmd":                         reflect.ValueOf(redis.NewCmd),
		"NewCmdResult":                   reflect.ValueOf(redis.NewCmdResult),
		"NewCommandsInfoCmd":             reflect.ValueOf(redis.NewCommandsInfoCmd),
		"NewCommandsInfoCmdResult":       reflect.ValueOf(redis.NewCommandsInfoCmdResult),
		"NewDialer":                      reflect.ValueOf(redis.NewDialer),
		"NewDurationCmd":                 reflect.ValueOf(redis.NewDurationCmd),
		"NewDurationResult":              reflect.ValueOf(redis.NewDurationResult),
		"NewFTSynDumpCmd":                reflect.ValueOf(redis.NewFTSynDumpCmd),
		"NewFailoverClient":              reflect.ValueOf(redis.NewFailoverClient),
		"NewFailoverClusterClient":       reflect.ValueOf(redis.NewFailoverClusterClient),
		"NewFloatCmd":                    reflect.ValueOf(redis.NewFloatCmd),
		"NewFloatResult":                 reflect.ValueOf(redis.NewFloatResult),
		"NewFloatSliceCmd":               reflect.ValueOf(redis.NewFloatSliceCmd),
		"NewFunctionListCmd":             reflect.ValueOf(redis.NewFunctionListCmd),
		"NewFunctionStatsCmd":            reflect.ValueOf(redis.NewFunctionStatsCmd),
		"NewGeoLocationCmd":              reflect.ValueOf(redis.NewGeoLocationCmd),
		"NewGeoLocationCmdResult":        reflect.ValueOf(redis.NewGeoLocationCmdResult),
		"NewGeoPosCmd":                   reflect.ValueOf(redis.NewGeoPosCmd),
		"NewGeoPosCmdResult":             reflect.ValueOf(redis.NewGeoPosCmdResult),
		"NewGeoSearchLocationCmd":        reflect.ValueOf(redis.NewGeoSearchLocationCmd),
		"NewInfoCmd":                     reflect.ValueOf(redis.NewInfoCmd),
		"NewIntCmd":                      reflect.ValueOf(redis.NewIntCmd),
		"NewIntPointerSliceCmd":          reflect.ValueOf(redis.NewIntPointerSliceCmd),
		"NewIntResult":                   reflect.ValueOf(redis.NewIntResult),
		"NewIntSliceCmd":                 reflect.ValueOf(redis.NewIntSliceCmd),
		"NewJSONSliceCmd":                reflect.ValueOf(redis.NewJSONSliceCmd),
		"NewKeyFlagsCmd":                 reflect.ValueOf(redis.NewKeyFlagsCmd),
		"NewKeyValueSliceCmd":            reflect.ValueOf(redis.NewKeyValueSliceCmd),
		"NewKeyValuesCmd":                reflect.ValueOf(redis.NewKeyValuesCmd),
		"NewLCSCmd":                      reflect.ValueOf(redis.NewLCSCmd),
		"NewMapMapStringInterfaceCmd":    reflect.ValueOf(redis.NewMapMapStringInterfaceCmd),
		"NewMapStringIntCmd":             reflect.ValueOf(redis.NewMapStringIntCmd),
		"NewMapStringIntCmdResult":       reflect.ValueOf(redis.NewMapStringIntCmdResult),
		"NewMapStringInterfaceCmd":       reflect.ValueOf(redis.NewMapStringInterfaceCmd),
		"NewMapStringInterfaceSliceCmd":  reflect.ValueOf(redis.NewMapStringInterfaceSliceCmd),
		"NewMapStringSliceInterfaceCmd":  reflect.ValueOf(redis.NewMapStringSliceInterfaceCmd),
		"NewMapStringStringCmd":          reflect.ValueOf(redis.NewMapStringStringCmd),
		"NewMapStringStringResult":       reflect.ValueOf(redis.NewMapStringStringResult),
		"NewMapStringStringSliceCmd":     reflect.ValueOf(redis.NewMapStringStringSliceCmd),
		"NewRankWithScoreCmd":            reflect.ValueOf(redis.NewRankWithScoreCmd),
		"NewRing":                        reflect.ValueOf(redis.NewRing),
		"NewScanCmd":                     reflect.ValueOf(redis.NewScanCmd),
		"NewScanCmdResult":               reflect.ValueOf(redis.NewScanCmdResult),
		"NewScript":                      reflect.ValueOf(redis.NewScript),
		"NewSentinelClient":              reflect.ValueOf(redis.NewSentinelClient),
		"NewSliceCmd":                    reflect.ValueOf(redis.NewSliceCmd),
		"NewSliceResult":                 reflect.ValueOf(redis.NewSliceResult),
		"NewSlowLogCmd":                  reflect.ValueOf(redis.NewSlowLogCmd),
		"NewStatusCmd":                   reflect.ValueOf(redis.NewStatusCmd),
		"NewStatusResult":                reflect.ValueOf(redis.NewStatusResult),
		"NewStringCmd":                   reflect.ValueOf(redis.NewStringCmd),
		"NewStringResult":                reflect.ValueOf(redis.NewStringResult),
		"NewStringSliceCmd":              reflect.ValueOf(redis.NewStringSliceCmd),
		"NewStringSliceResult":           reflect.ValueOf(redis.NewStringSliceResult),
		"NewStringStructMapCmd":          reflect.ValueOf(redis.NewStringStructMapCmd),
		"NewTDigestInfoCmd":              reflect.ValueOf(redis.NewTDigestInfoCmd),
		"NewTimeCmd":                     reflect.ValueOf(redis.NewTimeCmd),
		"NewTimeCmdResult":               reflect.ValueOf(redis.NewTimeCmdResult),
		"NewTopKInfoCmd":                 reflect.ValueOf(redis.NewTopKInfoCmd),
		"NewUniversalClient":             reflect.ValueOf(redis.NewUniversalClient),
		"NewXAutoClaimCmd":               reflect.ValueOf(redis.NewXAutoClaimCmd),
		"NewXAutoClaimJustIDCmd":         reflect.ValueOf(redis.NewXAutoClaimJustIDCmd),
		"NewXInfoConsumersCmd":           reflect.ValueOf(redis.NewXInfoConsumersCmd),
		"NewXInfoGroupsCmd":              reflect.ValueOf(redis.NewXInfoGroupsCmd),
		"NewXInfoStreamCmd":              reflect.ValueOf(redis.NewXInfoStreamCmd),
		"NewXInfoStreamFullCmd":          reflect.ValueOf(redis.NewXInfoStreamFullCmd),
		"NewXMessageSliceCmd":            reflect.ValueOf(redis.NewXMessageSliceCmd),
		"NewXMessageSliceCmdResult":      reflect.ValueOf(redis.NewXMessageSliceCmdResult),
		"NewXPendingCmd":                 reflect.ValueOf(redis.NewXPendingCmd),
		"NewXPendingExtCmd":              reflect.ValueOf(redis.NewXPendingExtCmd),
		"NewXPendingResult":              reflect.ValueOf(redis.NewXPendingResult),
		"NewXStreamSliceCmd":             reflect.ValueOf(redis.NewXStreamSliceCmd),
		"NewXStreamSliceCmdResult":       reflect.ValueOf(redis.NewXStreamSliceCmdResult),
		"NewZSliceCmd":                   reflect.ValueOf(redis.NewZSliceCmd),
		"NewZSliceCmdResult":             reflect.ValueOf(redis.NewZSliceCmdResult),
		"NewZSliceWithKeyCmd":            reflect.ValueOf(redis.NewZSliceWithKeyCmd),
		"NewZWithKeyCmd":                 reflect.ValueOf(redis.NewZWithKeyCmd),
		"NewZWithKeyCmdResult":           reflect.ValueOf(redis.NewZWithKeyCmdResult),
		"Nil":                            reflect.ValueOf(redis.Nil),
		"ParseClusterURL":                reflect.ValueOf(redis.ParseClusterURL),
		"ParseURL":                       reflect.ValueOf(redis.ParseURL),
		"ProcessAggregateResult":         reflect.ValueOf(redis.ProcessAggregateResult),
		"Range":                          reflect.ValueOf(redis.Range),
		"SearchAvg":                      reflect.ValueOf(redis.SearchAvg),
		"SearchCount":                    reflect.ValueOf(redis.SearchCount),
		"SearchCountDistinct":            reflect.ValueOf(redis.SearchCountDistinct),
		"SearchCountDistinctish":         reflect.ValueOf(redis.SearchCountDistinctish),
		"SearchFieldTypeGeo":             reflect.ValueOf(redis.SearchFieldTypeGeo),
		"SearchFieldTypeGeoShape":        reflect.ValueOf(redis.SearchFieldTypeGeoShape),
		"SearchFieldTypeInvalid":         reflect.ValueOf(redis.SearchFieldTypeInvalid),
		"SearchFieldTypeNumeric":         reflect.ValueOf(redis.SearchFieldTypeNumeric),
		"SearchFieldTypeTag":             reflect.ValueOf(redis.SearchFieldTypeTag),
		"SearchFieldTypeText":            reflect.ValueOf(redis.SearchFieldTypeText),
		"SearchFieldTypeVector":          reflect.ValueOf(redis.SearchFieldTypeVector),
		"SearchFirstValue":               reflect.ValueOf(redis.SearchFirstValue),
		"SearchInvalid":                  reflect.ValueOf(redis.SearchInvalid),
		"SearchMax":                      reflect.ValueOf(redis.SearchMax),
		"SearchMin":                      reflect.ValueOf(redis.SearchMin),
		"SearchQuantile":                 reflect.ValueOf(redis.SearchQuantile),
		"SearchRandomSample":             reflect.ValueOf(redis.SearchRandomSample),
		"SearchStdDev":                   reflect.ValueOf(redis.SearchStdDev),
		"SearchSum":                      reflect.ValueOf(redis.SearchSum),
		"SearchToList":                   reflect.ValueOf(redis.SearchToList),
		"SetLogger":                      reflect.ValueOf(redis.SetLogger),
		"StdP":                           reflect.ValueOf(redis.StdP),
		"StdS":                           reflect.ValueOf(redis.StdS),
		"Sum":                            reflect.ValueOf(redis.Sum),
		"Twa":                            reflect.ValueOf(redis.Twa),
		"TxFailedErr":                    reflect.ValueOf(redis.TxFailedErr),
		"VarP":                           reflect.ValueOf(redis.VarP),
		"VarS":                           reflect.ValueOf(redis.VarS),
		"Version":                        reflect.ValueOf(redis.Version),
		"WithChannelHealthCheckInterval": reflect.ValueOf(redis.WithChannelHealthCheckInterval),
		"WithChannelSendTimeout":         reflect.ValueOf(redis.WithChannelSendTimeout),
		"WithChannelSize":                reflect.ValueOf(redis.WithChannelSize),
		"WithLibraryName":                reflect.ValueOf(redis.WithLibraryName),
		"WithLibraryVersion":             reflect.ValueOf(redis.WithLibraryVersion),

		// type definitions
		"ACLCmdable":                 reflect.ValueOf((*redis.ACLCmdable)(nil)),
		"ACLLogCmd":                  reflect.ValueOf((*redis.ACLLogCmd)(nil)),
		"ACLLogEntry":                reflect.ValueOf((*redis.ACLLogEntry)(nil)),
		"AggregateCmd":               reflect.ValueOf((*redis.AggregateCmd)(nil)),
		"AggregateQuery":             reflect.ValueOf((*redis.AggregateQuery)(nil)),
		"AggregateRow":               reflect.ValueOf((*redis.AggregateRow)(nil)),
		"Aggregator":                 reflect.ValueOf((*redis.Aggregator)(nil)),
		"BFInfo":                     reflect.ValueOf((*redis.BFInfo)(nil)),
		"BFInfoCmd":                  reflect.ValueOf((*redis.BFInfoCmd)(nil)),
		"BFInsertOptions":            reflect.ValueOf((*redis.BFInsertOptions)(nil)),
		"BFReserveOptions":           reflect.ValueOf((*redis.BFReserveOptions)(nil)),
		"BitCount":                   reflect.ValueOf((*redis.BitCount)(nil)),
		"BitMapCmdable":              reflect.ValueOf((*redis.BitMapCmdable)(nil)),
		"BoolCmd":                    reflect.ValueOf((*redis.BoolCmd)(nil)),
		"BoolSliceCmd":               reflect.ValueOf((*redis.BoolSliceCmd)(nil)),
		"CFInfo":                     reflect.ValueOf((*redis.CFInfo)(nil)),
		"CFInfoCmd":                  reflect.ValueOf((*redis.CFInfoCmd)(nil)),
		"CFInsertOptions":            reflect.ValueOf((*redis.CFInsertOptions)(nil)),
		"CFReserveOptions":           reflect.ValueOf((*redis.CFReserveOptions)(nil)),
		"CMSInfo":                    reflect.ValueOf((*redis.CMSInfo)(nil)),
		"CMSInfoCmd":                 reflect.ValueOf((*redis.CMSInfoCmd)(nil)),
		"ChannelOption":              reflect.ValueOf((*redis.ChannelOption)(nil)),
		"Client":                     reflect.ValueOf((*redis.Client)(nil)),
		"ClientFlags":                reflect.ValueOf((*redis.ClientFlags)(nil)),
		"ClientInfo":                 reflect.ValueOf((*redis.ClientInfo)(nil)),
		"ClientInfoCmd":              reflect.ValueOf((*redis.ClientInfoCmd)(nil)),
		"ClusterClient":              reflect.ValueOf((*redis.ClusterClient)(nil)),
		"ClusterCmdable":             reflect.ValueOf((*redis.ClusterCmdable)(nil)),
		"ClusterLink":                reflect.ValueOf((*redis.ClusterLink)(nil)),
		"ClusterLinksCmd":            reflect.ValueOf((*redis.ClusterLinksCmd)(nil)),
		"ClusterNode":                reflect.ValueOf((*redis.ClusterNode)(nil)),
		"ClusterOptions":             reflect.ValueOf((*redis.ClusterOptions)(nil)),
		"ClusterShard":               reflect.ValueOf((*redis.ClusterShard)(nil)),
		"ClusterShardsCmd":           reflect.ValueOf((*redis.ClusterShardsCmd)(nil)),
		"ClusterSlot":                reflect.ValueOf((*redis.ClusterSlot)(nil)),
		"ClusterSlotsCmd":            reflect.ValueOf((*redis.ClusterSlotsCmd)(nil)),
		"Cmd":                        reflect.ValueOf((*redis.Cmd)(nil)),
		"Cmdable":                    reflect.ValueOf((*redis.Cmdable)(nil)),
		"Cmder":                      reflect.ValueOf((*redis.Cmder)(nil)),
		"CommandInfo":                reflect.ValueOf((*redis.CommandInfo)(nil)),
		"CommandsInfoCmd":            reflect.ValueOf((*redis.CommandsInfoCmd)(nil)),
		"Conn":                       reflect.ValueOf((*redis.Conn)(nil)),
		"ConsistentHash":             reflect.ValueOf((*redis.ConsistentHash)(nil)),
		"CursorStats":                reflect.ValueOf((*redis.CursorStats)(nil)),
		"DialHook":                   reflect.ValueOf((*redis.DialHook)(nil)),
		"Document":                   reflect.ValueOf((*redis.Document)(nil)),
		"DurationCmd":                reflect.ValueOf((*redis.DurationCmd)(nil)),
		"Engine":                     reflect.ValueOf((*redis.Engine)(nil)),
		"Error":                      reflect.ValueOf((*redis.Error)(nil)),
		"FTAggregateApply":           reflect.ValueOf((*redis.FTAggregateApply)(nil)),
		"FTAggregateGroupBy":         reflect.ValueOf((*redis.FTAggregateGroupBy)(nil)),
		"FTAggregateLoad":            reflect.ValueOf((*redis.FTAggregateLoad)(nil)),
		"FTAggregateOptions":         reflect.ValueOf((*redis.FTAggregateOptions)(nil)),
		"FTAggregateReducer":         reflect.ValueOf((*redis.FTAggregateReducer)(nil)),
		"FTAggregateResult":          reflect.ValueOf((*redis.FTAggregateResult)(nil)),
		"FTAggregateSortBy":          reflect.ValueOf((*redis.FTAggregateSortBy)(nil)),
		"FTAggregateWithCursor":      reflect.ValueOf((*redis.FTAggregateWithCursor)(nil)),
		"FTAttribute":                reflect.ValueOf((*redis.FTAttribute)(nil)),
		"FTCreateOptions":            reflect.ValueOf((*redis.FTCreateOptions)(nil)),
		"FTDropIndexOptions":         reflect.ValueOf((*redis.FTDropIndexOptions)(nil)),
		"FTExplainOptions":           reflect.ValueOf((*redis.FTExplainOptions)(nil)),
		"FTFlatOptions":              reflect.ValueOf((*redis.FTFlatOptions)(nil)),
		"FTHNSWOptions":              reflect.ValueOf((*redis.FTHNSWOptions)(nil)),
		"FTInfoCmd":                  reflect.ValueOf((*redis.FTInfoCmd)(nil)),
		"FTInfoResult":               reflect.ValueOf((*redis.FTInfoResult)(nil)),
		"FTSearchCmd":                reflect.ValueOf((*redis.FTSearchCmd)(nil)),
		"FTSearchFilter":             reflect.ValueOf((*redis.FTSearchFilter)(nil)),
		"FTSearchGeoFilter":          reflect.ValueOf((*redis.FTSearchGeoFilter)(nil)),
		"FTSearchOptions":            reflect.ValueOf((*redis.FTSearchOptions)(nil)),
		"FTSearchResult":             reflect.ValueOf((*redis.FTSearchResult)(nil)),
		"FTSearchReturn":             reflect.ValueOf((*redis.FTSearchReturn)(nil)),
		"FTSearchSortBy":             reflect.ValueOf((*redis.FTSearchSortBy)(nil)),
		"FTSpellCheckCmd":            reflect.ValueOf((*redis.FTSpellCheckCmd)(nil)),
		"FTSpellCheckOptions":        reflect.ValueOf((*redis.FTSpellCheckOptions)(nil)),
		"FTSpellCheckTerms":          reflect.ValueOf((*redis.FTSpellCheckTerms)(nil)),
		"FTSynDumpCmd":               reflect.ValueOf((*redis.FTSynDumpCmd)(nil)),
		"FTSynDumpResult":            reflect.ValueOf((*redis.FTSynDumpResult)(nil)),
		"FTSynUpdateOptions":         reflect.ValueOf((*redis.FTSynUpdateOptions)(nil)),
		"FTVectorArgs":               reflect.ValueOf((*redis.FTVectorArgs)(nil)),
		"FailoverOptions":            reflect.ValueOf((*redis.FailoverOptions)(nil)),
		"FieldSchema":                reflect.ValueOf((*redis.FieldSchema)(nil)),
		"FieldStatistic":             reflect.ValueOf((*redis.FieldStatistic)(nil)),
		"FilterBy":                   reflect.ValueOf((*redis.FilterBy)(nil)),
		"FloatCmd":                   reflect.ValueOf((*redis.FloatCmd)(nil)),
		"FloatSliceCmd":              reflect.ValueOf((*redis.FloatSliceCmd)(nil)),
		"Function":                   reflect.ValueOf((*redis.Function)(nil)),
		"FunctionListCmd":            reflect.ValueOf((*redis.FunctionListCmd)(nil)),
		"FunctionListQuery":          reflect.ValueOf((*redis.FunctionListQuery)(nil)),
		"FunctionStats":              reflect.ValueOf((*redis.FunctionStats)(nil)),
		"FunctionStatsCmd":           reflect.ValueOf((*redis.FunctionStatsCmd)(nil)),
		"GCStats":                    reflect.ValueOf((*redis.GCStats)(nil)),
		"GearsCmdable":               reflect.ValueOf((*redis.GearsCmdable)(nil)),
		"GenericCmdable":             reflect.ValueOf((*redis.GenericCmdable)(nil)),
		"GeoCmdable":                 reflect.ValueOf((*redis.GeoCmdable)(nil)),
		"GeoLocation":                reflect.ValueOf((*redis.GeoLocation)(nil)),
		"GeoLocationCmd":             reflect.ValueOf((*redis.GeoLocationCmd)(nil)),
		"GeoPos":                     reflect.ValueOf((*redis.GeoPos)(nil)),
		"GeoPosCmd":                  reflect.ValueOf((*redis.GeoPosCmd)(nil)),
		"GeoRadiusQuery":             reflect.ValueOf((*redis.GeoRadiusQuery)(nil)),
		"GeoSearchLocationCmd":       reflect.ValueOf((*redis.GeoSearchLocationCmd)(nil)),
		"GeoSearchLocationQuery":     reflect.ValueOf((*redis.GeoSearchLocationQuery)(nil)),
		"GeoSearchQuery":             reflect.ValueOf((*redis.GeoSearchQuery)(nil)),
		"GeoSearchStoreQuery":        reflect.ValueOf((*redis.GeoSearchStoreQuery)(nil)),
		"HExpireArgs":                reflect.ValueOf((*redis.HExpireArgs)(nil)),
		"HashCmdable":                reflect.ValueOf((*redis.HashCmdable)(nil)),
		"Hook":                       reflect.ValueOf((*redis.Hook)(nil)),
		"HyperLogLogCmdable":         reflect.ValueOf((*redis.HyperLogLogCmdable)(nil)),
		"IndexDefinition":            reflect.ValueOf((*redis.IndexDefinition)(nil)),
		"IndexErrors":                reflect.ValueOf((*redis.IndexErrors)(nil)),
		"InfoCmd":                    reflect.ValueOf((*redis.InfoCmd)(nil)),
		"IntCmd":                     reflect.ValueOf((*redis.IntCmd)(nil)),
		"IntPointerSliceCmd":         reflect.ValueOf((*redis.IntPointerSliceCmd)(nil)),
		"IntSliceCmd":                reflect.ValueOf((*redis.IntSliceCmd)(nil)),
		"JSONArrIndexArgs":           reflect.ValueOf((*redis.JSONArrIndexArgs)(nil)),
		"JSONArrTrimArgs":            reflect.ValueOf((*redis.JSONArrTrimArgs)(nil)),
		"JSONCmd":                    reflect.ValueOf((*redis.JSONCmd)(nil)),
		"JSONCmdable":                reflect.ValueOf((*redis.JSONCmdable)(nil)),
		"JSONGetArgs":                reflect.ValueOf((*redis.JSONGetArgs)(nil)),
		"JSONSetArgs":                reflect.ValueOf((*redis.JSONSetArgs)(nil)),
		"JSONSliceCmd":               reflect.ValueOf((*redis.JSONSliceCmd)(nil)),
		"KeyFlags":                   reflect.ValueOf((*redis.KeyFlags)(nil)),
		"KeyFlagsCmd":                reflect.ValueOf((*redis.KeyFlagsCmd)(nil)),
		"KeyValue":                   reflect.ValueOf((*redis.KeyValue)(nil)),
		"KeyValueSliceCmd":           reflect.ValueOf((*redis.KeyValueSliceCmd)(nil)),
		"KeyValuesCmd":               reflect.ValueOf((*redis.KeyValuesCmd)(nil)),
		"LCSCmd":                     reflect.ValueOf((*redis.LCSCmd)(nil)),
		"LCSMatch":                   reflect.ValueOf((*redis.LCSMatch)(nil)),
		"LCSMatchedPosition":         reflect.ValueOf((*redis.LCSMatchedPosition)(nil)),
		"LCSPosition":                reflect.ValueOf((*redis.LCSPosition)(nil)),
		"LCSQuery":                   reflect.ValueOf((*redis.LCSQuery)(nil)),
		"LPosArgs":                   reflect.ValueOf((*redis.LPosArgs)(nil)),
		"Library":                    reflect.ValueOf((*redis.Library)(nil)),
		"LibraryInfo":                reflect.ValueOf((*redis.LibraryInfo)(nil)),
		"Limiter":                    reflect.ValueOf((*redis.Limiter)(nil)),
		"ListCmdable":                reflect.ValueOf((*redis.ListCmdable)(nil)),
		"MapMapStringInterfaceCmd":   reflect.ValueOf((*redis.MapMapStringInterfaceCmd)(nil)),
		"MapStringIntCmd":            reflect.ValueOf((*redis.MapStringIntCmd)(nil)),
		"MapStringInterfaceCmd":      reflect.ValueOf((*redis.MapStringInterfaceCmd)(nil)),
		"MapStringInterfaceSliceCmd": reflect.ValueOf((*redis.MapStringInterfaceSliceCmd)(nil)),
		"MapStringSliceInterfaceCmd": reflect.ValueOf((*redis.MapStringSliceInterfaceCmd)(nil)),
		"MapStringStringCmd":         reflect.ValueOf((*redis.MapStringStringCmd)(nil)),
		"MapStringStringSliceCmd":    reflect.ValueOf((*redis.MapStringStringSliceCmd)(nil)),
		"Message":                    reflect.ValueOf((*redis.Message)(nil)),
		"ModuleLoadexConfig":         reflect.ValueOf((*redis.ModuleLoadexConfig)(nil)),
		"MonitorCmd":                 reflect.ValueOf((*redis.MonitorCmd)(nil)),
		"MonitorStatus":              reflect.ValueOf((*redis.MonitorStatus)(nil)),
		"Node":                       reflect.ValueOf((*redis.Node)(nil)),
		"Options":                    reflect.ValueOf((*redis.Options)(nil)),
		"Pipeline":                   reflect.ValueOf((*redis.Pipeline)(nil)),
		"Pipeliner":                  reflect.ValueOf((*redis.Pipeliner)(nil)),
		"Pong":                       reflect.ValueOf((*redis.Pong)(nil)),
		"PoolStats":                  reflect.ValueOf((*redis.PoolStats)(nil)),
		"ProbabilisticCmdable":       reflect.ValueOf((*redis.ProbabilisticCmdable)(nil)),
		"ProcessHook":                reflect.ValueOf((*redis.ProcessHook)(nil)),
		"ProcessPipelineHook":        reflect.ValueOf((*redis.ProcessPipelineHook)(nil)),
		"PubSub":                     reflect.ValueOf((*redis.PubSub)(nil)),
		"PubSubCmdable":              reflect.ValueOf((*redis.PubSubCmdable)(nil)),
		"RankScore":                  reflect.ValueOf((*redis.RankScore)(nil)),
		"RankWithScoreCmd":           reflect.ValueOf((*redis.RankWithScoreCmd)(nil)),
		"Ring":                       reflect.ValueOf((*redis.Ring)(nil)),
		"RingOptions":                reflect.ValueOf((*redis.RingOptions)(nil)),
		"RunningScript":              reflect.ValueOf((*redis.RunningScript)(nil)),
		"ScanCmd":                    reflect.ValueOf((*redis.ScanCmd)(nil)),
		"ScanDump":                   reflect.ValueOf((*redis.ScanDump)(nil)),
		"ScanDumpCmd":                reflect.ValueOf((*redis.ScanDumpCmd)(nil)),
		"ScanIterator":               reflect.ValueOf((*redis.ScanIterator)(nil)),
		"Scanner":                    reflect.ValueOf((*redis.Scanner)(nil)),
		"Script":                     reflect.ValueOf((*redis.Script)(nil)),
		"Scripter":                   reflect.ValueOf((*redis.Scripter)(nil)),
		"ScriptingFunctionsCmdable":  reflect.ValueOf((*redis.ScriptingFunctionsCmdable)(nil)),
		"SearchAggregator":           reflect.ValueOf((*redis.SearchAggregator)(nil)),
		"SearchCmdable":              reflect.ValueOf((*redis.SearchCmdable)(nil)),
		"SearchFieldType":            reflect.ValueOf((*redis.SearchFieldType)(nil)),
		"SearchQuery":                reflect.ValueOf((*redis.SearchQuery)(nil)),
		"SentinelClient":             reflect.ValueOf((*redis.SentinelClient)(nil)),
		"SetArgs":                    reflect.ValueOf((*redis.SetArgs)(nil)),
		"SetCmdable":                 reflect.ValueOf((*redis.SetCmdable)(nil)),
		"SliceCmd":                   reflect.ValueOf((*redis.SliceCmd)(nil)),
		"SlotRange":                  reflect.ValueOf((*redis.SlotRange)(nil)),
		"SlowLog":                    reflect.ValueOf((*redis.SlowLog)(nil)),
		"SlowLogCmd":                 reflect.ValueOf((*redis.SlowLogCmd)(nil)),
		"Sort":                       reflect.ValueOf((*redis.Sort)(nil)),
		"SortedSetCmdable":           reflect.ValueOf((*redis.SortedSetCmdable)(nil)),
		"SpellCheckResult":           reflect.ValueOf((*redis.SpellCheckResult)(nil)),
		"SpellCheckSuggestion":       reflect.ValueOf((*redis.SpellCheckSuggestion)(nil)),
		"SpellCheckTerms":            reflect.ValueOf((*redis.SpellCheckTerms)(nil)),
		"StatefulCmdable":            reflect.ValueOf((*redis.StatefulCmdable)(nil)),
		"StatusCmd":                  reflect.ValueOf((*redis.StatusCmd)(nil)),
		"StreamCmdable":              reflect.ValueOf((*redis.StreamCmdable)(nil)),
		"StringCmd":                  reflect.ValueOf((*redis.StringCmd)(nil)),
		"StringCmdable":              reflect.ValueOf((*redis.StringCmdable)(nil)),
		"StringSliceCmd":             reflect.ValueOf((*redis.StringSliceCmd)(nil)),
		"StringStructMapCmd":         reflect.ValueOf((*redis.StringStructMapCmd)(nil)),
		"Subscription":               reflect.ValueOf((*redis.Subscription)(nil)),
		"TDigestInfo":                reflect.ValueOf((*redis.TDigestInfo)(nil)),
		"TDigestInfoCmd":             reflect.ValueOf((*redis.TDigestInfoCmd)(nil)),
		"TDigestMergeOptions":        reflect.ValueOf((*redis.TDigestMergeOptions)(nil)),
		"TFCallOptions":              reflect.ValueOf((*redis.TFCallOptions)(nil)),
		"TFunctionListOptions":       reflect.ValueOf((*redis.TFunctionListOptions)(nil)),
		"TFunctionLoadOptions":       reflect.ValueOf((*redis.TFunctionLoadOptions)(nil)),
		"TSAlterOptions":             reflect.ValueOf((*redis.TSAlterOptions)(nil)),
		"TSCreateRuleOptions":        reflect.ValueOf((*redis.TSCreateRuleOptions)(nil)),
		"TSGetOptions":               reflect.ValueOf((*redis.TSGetOptions)(nil)),
		"TSIncrDecrOptions":          reflect.ValueOf((*redis.TSIncrDecrOptions)(nil)),
		"TSInfoOptions":              reflect.ValueOf((*redis.TSInfoOptions)(nil)),
		"TSMGetOptions":              reflect.ValueOf((*redis.TSMGetOptions)(nil)),
		"TSMRangeOptions":            reflect.ValueOf((*redis.TSMRangeOptions)(nil)),
		"TSMRevRangeOptions":         reflect.ValueOf((*redis.TSMRevRangeOptions)(nil)),
		"TSOptions":                  reflect.ValueOf((*redis.TSOptions)(nil)),
		"TSRangeOptions":             reflect.ValueOf((*redis.TSRangeOptions)(nil)),
		"TSRevRangeOptions":          reflect.ValueOf((*redis.TSRevRangeOptions)(nil)),
		"TSTimestampValue":           reflect.ValueOf((*redis.TSTimestampValue)(nil)),
		"TSTimestampValueCmd":        reflect.ValueOf((*redis.TSTimestampValueCmd)(nil)),
		"TSTimestampValueSliceCmd":   reflect.ValueOf((*redis.TSTimestampValueSliceCmd)(nil)),
		"TimeCmd":                    reflect.ValueOf((*redis.TimeCmd)(nil)),
		"TimeseriesCmdable":          reflect.ValueOf((*redis.TimeseriesCmdable)(nil)),
		"TopKInfo":                   reflect.ValueOf((*redis.TopKInfo)(nil)),
		"TopKInfoCmd":                reflect.ValueOf((*redis.TopKInfoCmd)(nil)),
		"Tx":                         reflect.ValueOf((*redis.Tx)(nil)),
		"UniversalClient":            reflect.ValueOf((*redis.UniversalClient)(nil)),
		"UniversalOptions":           reflect.ValueOf((*redis.UniversalOptions)(nil)),
		"XAddArgs":                   reflect.ValueOf((*redis.XAddArgs)(nil)),
		"XAutoClaimArgs":             reflect.ValueOf((*redis.XAutoClaimArgs)(nil)),
		"XAutoClaimCmd":              reflect.ValueOf((*redis.XAutoClaimCmd)(nil)),
		"XAutoClaimJustIDCmd":        reflect.ValueOf((*redis.XAutoClaimJustIDCmd)(nil)),
		"XClaimArgs":                 reflect.ValueOf((*redis.XClaimArgs)(nil)),
		"XInfoConsumer":              reflect.ValueOf((*redis.XInfoConsumer)(nil)),
		"XInfoConsumersCmd":          reflect.ValueOf((*redis.XInfoConsumersCmd)(nil)),
		"XInfoGroup":                 reflect.ValueOf((*redis.XInfoGroup)(nil)),
		"XInfoGroupsCmd":             reflect.ValueOf((*redis.XInfoGroupsCmd)(nil)),
		"XInfoStream":                reflect.ValueOf((*redis.XInfoStream)(nil)),
		"XInfoStreamCmd":             reflect.ValueOf((*redis.XInfoStreamCmd)(nil)),
		"XInfoStreamConsumer":        reflect.ValueOf((*redis.XInfoStreamConsumer)(nil)),
		"XInfoStreamConsumerPending": reflect.ValueOf((*redis.XInfoStreamConsumerPending)(nil)),
		"XInfoStreamFull":            reflect.ValueOf((*redis.XInfoStreamFull)(nil)),
		"XInfoStreamFullCmd":         reflect.ValueOf((*redis.XInfoStreamFullCmd)(nil)),
		"XInfoStreamGroup":           reflect.ValueOf((*redis.XInfoStreamGroup)(nil)),
		"XInfoStreamGroupPending":    reflect.ValueOf((*redis.XInfoStreamGroupPending)(nil)),
		"XMessage":                   reflect.ValueOf((*redis.XMessage)(nil)),
		"XMessageSliceCmd":           reflect.ValueOf((*redis.XMessageSliceCmd)(nil)),
		"XPending":                   reflect.ValueOf((*redis.XPending)(nil)),
		"XPendingCmd":                reflect.ValueOf((*redis.XPendingCmd)(nil)),
		"XPendingExt":                reflect.ValueOf((*redis.XPendingExt)(nil)),
		"XPendingExtArgs":            reflect.ValueOf((*redis.XPendingExtArgs)(nil)),
		"XPendingExtCmd":             reflect.ValueOf((*redis.XPendingExtCmd)(nil)),
		"XReadArgs":                  reflect.ValueOf((*redis.XReadArgs)(nil)),
		"XReadGroupArgs":             reflect.ValueOf((*redis.XReadGroupArgs)(nil)),
		"XStream":                    reflect.ValueOf((*redis.XStream)(nil)),
		"XStreamSliceCmd":            reflect.ValueOf((*redis.XStreamSliceCmd)(nil)),
		"Z":                          reflect.ValueOf((*redis.Z)(nil)),
		"ZAddArgs":                   reflect.ValueOf((*redis.ZAddArgs)(nil)),
		"ZRangeArgs":                 reflect.ValueOf((*redis.ZRangeArgs)(nil)),
		"ZRangeBy":                   reflect.ValueOf((*redis.ZRangeBy)(nil)),
		"ZSliceCmd":                  reflect.ValueOf((*redis.ZSliceCmd)(nil)),
		"ZSliceWithKeyCmd":           reflect.ValueOf((*redis.ZSliceWithKeyCmd)(nil)),
		"ZStore":                     reflect.ValueOf((*redis.ZStore)(nil)),
		"ZWithKey":                   reflect.ValueOf((*redis.ZWithKey)(nil)),
		"ZWithKeyCmd":                reflect.ValueOf((*redis.ZWithKeyCmd)(nil)),

		// interface wrapper definitions
		"_ACLCmdable":                reflect.ValueOf((*_github_com_redis_go_redis_v9_ACLCmdable)(nil)),
		"_BitMapCmdable":             reflect.ValueOf((*_github_com_redis_go_redis_v9_BitMapCmdable)(nil)),
		"_ClusterCmdable":            reflect.ValueOf((*_github_com_redis_go_redis_v9_ClusterCmdable)(nil)),
		"_Cmdable":                   reflect.ValueOf((*_github_com_redis_go_redis_v9_Cmdable)(nil)),
		"_Cmder":                     reflect.ValueOf((*_github_com_redis_go_redis_v9_Cmder)(nil)),
		"_ConsistentHash":            reflect.ValueOf((*_github_com_redis_go_redis_v9_ConsistentHash)(nil)),
		"_Error":                     reflect.ValueOf((*_github_com_redis_go_redis_v9_Error)(nil)),
		"_GearsCmdable":              reflect.ValueOf((*_github_com_redis_go_redis_v9_GearsCmdable)(nil)),
		"_GenericCmdable":            reflect.ValueOf((*_github_com_redis_go_redis_v9_GenericCmdable)(nil)),
		"_GeoCmdable":                reflect.ValueOf((*_github_com_redis_go_redis_v9_GeoCmdable)(nil)),
		"_HashCmdable":               reflect.ValueOf((*_github_com_redis_go_redis_v9_HashCmdable)(nil)),
		"_Hook":                      reflect.ValueOf((*_github_com_redis_go_redis_v9_Hook)(nil)),
		"_HyperLogLogCmdable":        reflect.ValueOf((*_github_com_redis_go_redis_v9_HyperLogLogCmdable)(nil)),
		"_JSONCmdable":               reflect.ValueOf((*_github_com_redis_go_redis_v9_JSONCmdable)(nil)),
		"_Limiter":                   reflect.ValueOf((*_github_com_redis_go_redis_v9_Limiter)(nil)),
		"_ListCmdable":               reflect.ValueOf((*_github_com_redis_go_redis_v9_ListCmdable)(nil)),
		"_Pipeliner":                 reflect.ValueOf((*_github_com_redis_go_redis_v9_Pipeliner)(nil)),
		"_ProbabilisticCmdable":      reflect.ValueOf((*_github_com_redis_go_redis_v9_ProbabilisticCmdable)(nil)),
		"_PubSubCmdable":             reflect.ValueOf((*_github_com_redis_go_redis_v9_PubSubCmdable)(nil)),
		"_Scanner":                   reflect.ValueOf((*_github_com_redis_go_redis_v9_Scanner)(nil)),
		"_Scripter":                  reflect.ValueOf((*_github_com_redis_go_redis_v9_Scripter)(nil)),
		"_ScriptingFunctionsCmdable": reflect.ValueOf((*_github_com_redis_go_redis_v9_ScriptingFunctionsCmdable)(nil)),
		"_SearchCmdable":             reflect.ValueOf((*_github_com_redis_go_redis_v9_SearchCmdable)(nil)),
		"_SetCmdable":                reflect.ValueOf((*_github_com_redis_go_redis_v9_SetCmdable)(nil)),
		"_SortedSetCmdable":          reflect.ValueOf((*_github_com_redis_go_redis_v9_SortedSetCmdable)(nil)),
		"_StatefulCmdable":           reflect.ValueOf((*_github_com_redis_go_redis_v9_StatefulCmdable)(nil)),
		"_StreamCmdable":             reflect.ValueOf((*_github_com_redis_go_redis_v9_StreamCmdable)(nil)),
		"_StringCmdable":             reflect.ValueOf((*_github_com_redis_go_redis_v9_StringCmdable)(nil)),
		"_TimeseriesCmdable":         reflect.ValueOf((*_github_com_redis_go_redis_v9_TimeseriesCmdable)(nil)),
		"_UniversalClient":           reflect.ValueOf((*_github_com_redis_go_redis_v9_UniversalClient)(nil)),
	}
}

// _github_com_redis_go_redis_v9_ACLCmdable is an interface wrapper for ACLCmdable type
type _github_com_redis_go_redis_v9_ACLCmdable struct {
	IValue       interface{}
	WACLDryRun   func(ctx context.Context, username string, command ...interface{}) *redis.StringCmd
	WACLLog      func(ctx context.Context, count int64) *redis.ACLLogCmd
	WACLLogReset func(ctx context.Context) *redis.StatusCmd
}

func (W _github_com_redis_go_redis_v9_ACLCmdable) ACLDryRun(ctx context.Context, username string, command ...interface{}) *redis.StringCmd {
	return W.WACLDryRun(ctx, username, command...)
}
func (W _github_com_redis_go_redis_v9_ACLCmdable) ACLLog(ctx context.Context, count int64) *redis.ACLLogCmd {
	return W.WACLLog(ctx, count)
}
func (W _github_com_redis_go_redis_v9_ACLCmdable) ACLLogReset(ctx context.Context) *redis.StatusCmd {
	return W.WACLLogReset(ctx)
}

// _github_com_redis_go_redis_v9_BitMapCmdable is an interface wrapper for BitMapCmdable type
type _github_com_redis_go_redis_v9_BitMapCmdable struct {
	IValue      interface{}
	WBitCount   func(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd
	WBitField   func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitFieldRO func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitOpAnd   func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpNot   func(ctx context.Context, destKey string, key string) *redis.IntCmd
	WBitOpOr    func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpXor   func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitPos     func(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd
	WBitPosSpan func(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd
	WGetBit     func(ctx context.Context, key string, offset int64) *redis.IntCmd
	WSetBit     func(ctx context.Context, key string, offset int64, value int) *redis.IntCmd
}

func (W _github_com_redis_go_redis_v9_BitMapCmdable) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd {
	return W.WBitCount(ctx, key, bitCount)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) BitField(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitField(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) BitFieldRO(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitFieldRO(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) BitOpAnd(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpAnd(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) BitOpNot(ctx context.Context, destKey string, key string) *redis.IntCmd {
	return W.WBitOpNot(ctx, destKey, key)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) BitOpOr(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpOr(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) BitOpXor(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpXor(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd {
	return W.WBitPos(ctx, key, bit, pos...)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) BitPosSpan(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd {
	return W.WBitPosSpan(ctx, key, bit, start, end, span)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) GetBit(ctx context.Context, key string, offset int64) *redis.IntCmd {
	return W.WGetBit(ctx, key, offset)
}
func (W _github_com_redis_go_redis_v9_BitMapCmdable) SetBit(ctx context.Context, key string, offset int64, value int) *redis.IntCmd {
	return W.WSetBit(ctx, key, offset, value)
}

// _github_com_redis_go_redis_v9_ClusterCmdable is an interface wrapper for ClusterCmdable type
type _github_com_redis_go_redis_v9_ClusterCmdable struct {
	IValue                      interface{}
	WClusterAddSlots            func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterAddSlotsRange       func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterCountFailureReports func(ctx context.Context, nodeID string) *redis.IntCmd
	WClusterCountKeysInSlot     func(ctx context.Context, slot int) *redis.IntCmd
	WClusterDelSlots            func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterDelSlotsRange       func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterFailover            func(ctx context.Context) *redis.StatusCmd
	WClusterForget              func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterGetKeysInSlot       func(ctx context.Context, slot int, count int) *redis.StringSliceCmd
	WClusterInfo                func(ctx context.Context) *redis.StringCmd
	WClusterKeySlot             func(ctx context.Context, key string) *redis.IntCmd
	WClusterLinks               func(ctx context.Context) *redis.ClusterLinksCmd
	WClusterMeet                func(ctx context.Context, host string, port string) *redis.StatusCmd
	WClusterMyShardID           func(ctx context.Context) *redis.StringCmd
	WClusterNodes               func(ctx context.Context) *redis.StringCmd
	WClusterReplicate           func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterResetHard           func(ctx context.Context) *redis.StatusCmd
	WClusterResetSoft           func(ctx context.Context) *redis.StatusCmd
	WClusterSaveConfig          func(ctx context.Context) *redis.StatusCmd
	WClusterShards              func(ctx context.Context) *redis.ClusterShardsCmd
	WClusterSlaves              func(ctx context.Context, nodeID string) *redis.StringSliceCmd
	WClusterSlots               func(ctx context.Context) *redis.ClusterSlotsCmd
	WReadOnly                   func(ctx context.Context) *redis.StatusCmd
	WReadWrite                  func(ctx context.Context) *redis.StatusCmd
}

func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterAddSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterAddSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterAddSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterAddSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterCountFailureReports(ctx context.Context, nodeID string) *redis.IntCmd {
	return W.WClusterCountFailureReports(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterCountKeysInSlot(ctx context.Context, slot int) *redis.IntCmd {
	return W.WClusterCountKeysInSlot(ctx, slot)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterDelSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterDelSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterDelSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterDelSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterFailover(ctx context.Context) *redis.StatusCmd {
	return W.WClusterFailover(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterForget(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterForget(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) *redis.StringSliceCmd {
	return W.WClusterGetKeysInSlot(ctx, slot, count)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterInfo(ctx context.Context) *redis.StringCmd {
	return W.WClusterInfo(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterKeySlot(ctx context.Context, key string) *redis.IntCmd {
	return W.WClusterKeySlot(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterLinks(ctx context.Context) *redis.ClusterLinksCmd {
	return W.WClusterLinks(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterMeet(ctx context.Context, host string, port string) *redis.StatusCmd {
	return W.WClusterMeet(ctx, host, port)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterMyShardID(ctx context.Context) *redis.StringCmd {
	return W.WClusterMyShardID(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterNodes(ctx context.Context) *redis.StringCmd {
	return W.WClusterNodes(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterReplicate(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterReplicate(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterResetHard(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetHard(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterResetSoft(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetSoft(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterSaveConfig(ctx context.Context) *redis.StatusCmd {
	return W.WClusterSaveConfig(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterShards(ctx context.Context) *redis.ClusterShardsCmd {
	return W.WClusterShards(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterSlaves(ctx context.Context, nodeID string) *redis.StringSliceCmd {
	return W.WClusterSlaves(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ClusterSlots(ctx context.Context) *redis.ClusterSlotsCmd {
	return W.WClusterSlots(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ReadOnly(ctx context.Context) *redis.StatusCmd {
	return W.WReadOnly(ctx)
}
func (W _github_com_redis_go_redis_v9_ClusterCmdable) ReadWrite(ctx context.Context) *redis.StatusCmd {
	return W.WReadWrite(ctx)
}

// _github_com_redis_go_redis_v9_Cmdable is an interface wrapper for Cmdable type
type _github_com_redis_go_redis_v9_Cmdable struct {
	IValue                        interface{}
	WACLDryRun                    func(ctx context.Context, username string, command ...interface{}) *redis.StringCmd
	WACLLog                       func(ctx context.Context, count int64) *redis.ACLLogCmd
	WACLLogReset                  func(ctx context.Context) *redis.StatusCmd
	WAppend                       func(ctx context.Context, key string, value string) *redis.IntCmd
	WBFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFCard                       func(ctx context.Context, key string) *redis.IntCmd
	WBFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFInfo                       func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoArg                    func(ctx context.Context, key string, option string) *redis.BFInfoCmd
	WBFInfoCapacity               func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoExpansion              func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoFilters                func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoItems                  func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoSize                   func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInsert                     func(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WBFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WBFMAdd                       func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFReserve                    func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveExpansion           func(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd
	WBFReserveNonScaling          func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveWithArgs            func(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd
	WBFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WBLMPop                       func(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WBLMove                       func(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd
	WBLPop                        func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPop                        func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPopLPush                   func(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd
	WBZMPop                       func(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WBZPopMax                     func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WBZPopMin                     func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WBgRewriteAOF                 func(ctx context.Context) *redis.StatusCmd
	WBgSave                       func(ctx context.Context) *redis.StatusCmd
	WBitCount                     func(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd
	WBitField                     func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitFieldRO                   func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitOpAnd                     func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpNot                     func(ctx context.Context, destKey string, key string) *redis.IntCmd
	WBitOpOr                      func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpXor                     func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitPos                       func(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd
	WBitPosSpan                   func(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd
	WCFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFAddNX                      func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFCount                      func(ctx context.Context, key string, element interface{}) *redis.IntCmd
	WCFDel                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFInfo                       func(ctx context.Context, key string) *redis.CFInfoCmd
	WCFInsert                     func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WCFInsertNX                   func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd
	WCFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WCFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WCFReserve                    func(ctx context.Context, key string, capacity int64) *redis.StatusCmd
	WCFReserveBucketSize          func(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd
	WCFReserveExpansion           func(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd
	WCFReserveMaxIterations       func(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd
	WCFReserveWithArgs            func(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd
	WCFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WCMSIncrBy                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WCMSInfo                      func(ctx context.Context, key string) *redis.CMSInfoCmd
	WCMSInitByDim                 func(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd
	WCMSInitByProb                func(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd
	WCMSMerge                     func(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd
	WCMSMergeWithWeight           func(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd
	WCMSQuery                     func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WClientGetName                func(ctx context.Context) *redis.StringCmd
	WClientID                     func(ctx context.Context) *redis.IntCmd
	WClientInfo                   func(ctx context.Context) *redis.ClientInfoCmd
	WClientKill                   func(ctx context.Context, ipPort string) *redis.StatusCmd
	WClientKillByFilter           func(ctx context.Context, keys ...string) *redis.IntCmd
	WClientList                   func(ctx context.Context) *redis.StringCmd
	WClientPause                  func(ctx context.Context, dur time.Duration) *redis.BoolCmd
	WClientUnblock                func(ctx context.Context, id int64) *redis.IntCmd
	WClientUnblockWithError       func(ctx context.Context, id int64) *redis.IntCmd
	WClientUnpause                func(ctx context.Context) *redis.BoolCmd
	WClusterAddSlots              func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterAddSlotsRange         func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterCountFailureReports   func(ctx context.Context, nodeID string) *redis.IntCmd
	WClusterCountKeysInSlot       func(ctx context.Context, slot int) *redis.IntCmd
	WClusterDelSlots              func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterDelSlotsRange         func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterFailover              func(ctx context.Context) *redis.StatusCmd
	WClusterForget                func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterGetKeysInSlot         func(ctx context.Context, slot int, count int) *redis.StringSliceCmd
	WClusterInfo                  func(ctx context.Context) *redis.StringCmd
	WClusterKeySlot               func(ctx context.Context, key string) *redis.IntCmd
	WClusterLinks                 func(ctx context.Context) *redis.ClusterLinksCmd
	WClusterMeet                  func(ctx context.Context, host string, port string) *redis.StatusCmd
	WClusterMyShardID             func(ctx context.Context) *redis.StringCmd
	WClusterNodes                 func(ctx context.Context) *redis.StringCmd
	WClusterReplicate             func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterResetHard             func(ctx context.Context) *redis.StatusCmd
	WClusterResetSoft             func(ctx context.Context) *redis.StatusCmd
	WClusterSaveConfig            func(ctx context.Context) *redis.StatusCmd
	WClusterShards                func(ctx context.Context) *redis.ClusterShardsCmd
	WClusterSlaves                func(ctx context.Context, nodeID string) *redis.StringSliceCmd
	WClusterSlots                 func(ctx context.Context) *redis.ClusterSlotsCmd
	WCommand                      func(ctx context.Context) *redis.CommandsInfoCmd
	WCommandGetKeys               func(ctx context.Context, commands ...interface{}) *redis.StringSliceCmd
	WCommandGetKeysAndFlags       func(ctx context.Context, commands ...interface{}) *redis.KeyFlagsCmd
	WCommandList                  func(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd
	WConfigGet                    func(ctx context.Context, parameter string) *redis.MapStringStringCmd
	WConfigResetStat              func(ctx context.Context) *redis.StatusCmd
	WConfigRewrite                func(ctx context.Context) *redis.StatusCmd
	WConfigSet                    func(ctx context.Context, parameter string, value string) *redis.StatusCmd
	WCopy                         func(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd
	WDBSize                       func(ctx context.Context) *redis.IntCmd
	WDebugObject                  func(ctx context.Context, key string) *redis.StringCmd
	WDecr                         func(ctx context.Context, key string) *redis.IntCmd
	WDecrBy                       func(ctx context.Context, key string, decrement int64) *redis.IntCmd
	WDel                          func(ctx context.Context, keys ...string) *redis.IntCmd
	WDump                         func(ctx context.Context, key string) *redis.StringCmd
	WEcho                         func(ctx context.Context, message interface{}) *redis.StringCmd
	WEval                         func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalRO                       func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalSha                      func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WEvalShaRO                    func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WExists                       func(ctx context.Context, keys ...string) *redis.IntCmd
	WExpire                       func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireAt                     func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WExpireGT                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireLT                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireNX                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireTime                   func(ctx context.Context, key string) *redis.DurationCmd
	WExpireXX                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WFCall                        func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRO                      func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRo                      func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFTAggregate                  func(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd
	WFTAggregateWithArgs          func(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd
	WFTAliasAdd                   func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAliasDel                   func(ctx context.Context, alias string) *redis.StatusCmd
	WFTAliasUpdate                func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAlter                      func(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd
	WFTConfigGet                  func(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd
	WFTConfigSet                  func(ctx context.Context, option string, value interface{}) *redis.StatusCmd
	WFTCreate                     func(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd
	WFTCursorDel                  func(ctx context.Context, index string, cursorId int) *redis.StatusCmd
	WFTCursorRead                 func(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd
	WFTDictAdd                    func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDel                    func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDump                   func(ctx context.Context, dict string) *redis.StringSliceCmd
	WFTDropIndex                  func(ctx context.Context, index string) *redis.StatusCmd
	WFTDropIndexWithArgs          func(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd
	WFTExplain                    func(ctx context.Context, index string, query string) *redis.StringCmd
	WFTExplainWithArgs            func(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd
	WFTInfo                       func(ctx context.Context, index string) *redis.FTInfoCmd
	WFTSearch                     func(ctx context.Context, index string, query string) *redis.FTSearchCmd
	WFTSearchWithArgs             func(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd
	WFTSpellCheck                 func(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd
	WFTSpellCheckWithArgs         func(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd
	WFTSynDump                    func(ctx context.Context, index string) *redis.FTSynDumpCmd
	WFTSynUpdate                  func(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd
	WFTSynUpdateWithArgs          func(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd
	WFTTagVals                    func(ctx context.Context, index string, field string) *redis.StringSliceCmd
	WFT_List                      func(ctx context.Context) *redis.StringSliceCmd
	WFlushAll                     func(ctx context.Context) *redis.StatusCmd
	WFlushAllAsync                func(ctx context.Context) *redis.StatusCmd
	WFlushDB                      func(ctx context.Context) *redis.StatusCmd
	WFlushDBAsync                 func(ctx context.Context) *redis.StatusCmd
	WFunctionDelete               func(ctx context.Context, libName string) *redis.StringCmd
	WFunctionDump                 func(ctx context.Context) *redis.StringCmd
	WFunctionFlush                func(ctx context.Context) *redis.StringCmd
	WFunctionFlushAsync           func(ctx context.Context) *redis.StringCmd
	WFunctionKill                 func(ctx context.Context) *redis.StringCmd
	WFunctionList                 func(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd
	WFunctionLoad                 func(ctx context.Context, code string) *redis.StringCmd
	WFunctionLoadReplace          func(ctx context.Context, code string) *redis.StringCmd
	WFunctionRestore              func(ctx context.Context, libDump string) *redis.StringCmd
	WFunctionStats                func(ctx context.Context) *redis.FunctionStatsCmd
	WGeoAdd                       func(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd
	WGeoDist                      func(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd
	WGeoHash                      func(ctx context.Context, key string, members ...string) *redis.StringSliceCmd
	WGeoPos                       func(ctx context.Context, key string, members ...string) *redis.GeoPosCmd
	WGeoRadius                    func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMember            func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMemberStore       func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoRadiusStore               func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoSearch                    func(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd
	WGeoSearchLocation            func(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd
	WGeoSearchStore               func(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd
	WGet                          func(ctx context.Context, key string) *redis.StringCmd
	WGetBit                       func(ctx context.Context, key string, offset int64) *redis.IntCmd
	WGetDel                       func(ctx context.Context, key string) *redis.StringCmd
	WGetEx                        func(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd
	WGetRange                     func(ctx context.Context, key string, start int64, end int64) *redis.StringCmd
	WGetSet                       func(ctx context.Context, key string, value interface{}) *redis.StringCmd
	WHDel                         func(ctx context.Context, key string, fields ...string) *redis.IntCmd
	WHExists                      func(ctx context.Context, key string, field string) *redis.BoolCmd
	WHExpire                      func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHExpireAt                    func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHExpireAtWithArgs            func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHExpireTime                  func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHExpireWithArgs              func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHGet                         func(ctx context.Context, key string, field string) *redis.StringCmd
	WHGetAll                      func(ctx context.Context, key string) *redis.MapStringStringCmd
	WHIncrBy                      func(ctx context.Context, key string, field string, incr int64) *redis.IntCmd
	WHIncrByFloat                 func(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd
	WHKeys                        func(ctx context.Context, key string) *redis.StringSliceCmd
	WHLen                         func(ctx context.Context, key string) *redis.IntCmd
	WHMGet                        func(ctx context.Context, key string, fields ...string) *redis.SliceCmd
	WHMSet                        func(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd
	WHPExpire                     func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHPExpireAt                   func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHPExpireAtWithArgs           func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPExpireTime                 func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPExpireWithArgs             func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPTTL                        func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPersist                     func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHRandField                   func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WHRandFieldWithValues         func(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd
	WHScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHScanNoValues                func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHSet                         func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WHSetNX                       func(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd
	WHTTL                         func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHVals                        func(ctx context.Context, key string) *redis.StringSliceCmd
	WIncr                         func(ctx context.Context, key string) *redis.IntCmd
	WIncrBy                       func(ctx context.Context, key string, value int64) *redis.IntCmd
	WIncrByFloat                  func(ctx context.Context, key string, value float64) *redis.FloatCmd
	WInfo                         func(ctx context.Context, section ...string) *redis.StringCmd
	WJSONArrAppend                func(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd
	WJSONArrIndex                 func(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd
	WJSONArrIndexWithArgs         func(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd
	WJSONArrInsert                func(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd
	WJSONArrLen                   func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrPop                   func(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd
	WJSONArrTrim                  func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrTrimWithArgs          func(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd
	WJSONClear                    func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDebugMemory              func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDel                      func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONForget                   func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONGet                      func(ctx context.Context, key string, paths ...string) *redis.JSONCmd
	WJSONGetWithArgs              func(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd
	WJSONMGet                     func(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd
	WJSONMSet                     func(ctx context.Context, params ...interface{}) *redis.StatusCmd
	WJSONMSetArgs                 func(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd
	WJSONMerge                    func(ctx context.Context, key string, path string, value string) *redis.StatusCmd
	WJSONNumIncrBy                func(ctx context.Context, key string, path string, value float64) *redis.JSONCmd
	WJSONObjKeys                  func(ctx context.Context, key string, path string) *redis.SliceCmd
	WJSONObjLen                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONSet                      func(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd
	WJSONSetMode                  func(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd
	WJSONStrAppend                func(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd
	WJSONStrLen                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONToggle                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONType                     func(ctx context.Context, key string, path string) *redis.JSONSliceCmd
	WKeys                         func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WLCS                          func(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd
	WLIndex                       func(ctx context.Context, key string, index int64) *redis.StringCmd
	WLInsert                      func(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertAfter                 func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertBefore                func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLLen                         func(ctx context.Context, key string) *redis.IntCmd
	WLMPop                        func(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WLMove                        func(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd
	WLPop                         func(ctx context.Context, key string) *redis.StringCmd
	WLPopCount                    func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WLPos                         func(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd
	WLPosCount                    func(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd
	WLPush                        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLPushX                       func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLRange                       func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WLRem                         func(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd
	WLSet                         func(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd
	WLTrim                        func(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd
	WLastSave                     func(ctx context.Context) *redis.IntCmd
	WMGet                         func(ctx context.Context, keys ...string) *redis.SliceCmd
	WMSet                         func(ctx context.Context, values ...interface{}) *redis.StatusCmd
	WMSetNX                       func(ctx context.Context, values ...interface{}) *redis.BoolCmd
	WMemoryUsage                  func(ctx context.Context, key string, samples ...int) *redis.IntCmd
	WMigrate                      func(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd
	WModuleLoadex                 func(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd
	WMove                         func(ctx context.Context, key string, db int) *redis.BoolCmd
	WObjectEncoding               func(ctx context.Context, key string) *redis.StringCmd
	WObjectFreq                   func(ctx context.Context, key string) *redis.IntCmd
	WObjectIdleTime               func(ctx context.Context, key string) *redis.DurationCmd
	WObjectRefCount               func(ctx context.Context, key string) *redis.IntCmd
	WPExpire                      func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WPExpireAt                    func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WPExpireTime                  func(ctx context.Context, key string) *redis.DurationCmd
	WPFAdd                        func(ctx context.Context, key string, els ...interface{}) *redis.IntCmd
	WPFCount                      func(ctx context.Context, keys ...string) *redis.IntCmd
	WPFMerge                      func(ctx context.Context, dest string, keys ...string) *redis.StatusCmd
	WPTTL                         func(ctx context.Context, key string) *redis.DurationCmd
	WPersist                      func(ctx context.Context, key string) *redis.BoolCmd
	WPing                         func(ctx context.Context) *redis.StatusCmd
	WPipeline                     func() redis.Pipeliner
	WPipelined                    func(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WPubSubChannels               func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubNumPat                 func(ctx context.Context) *redis.IntCmd
	WPubSubNumSub                 func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPubSubShardChannels          func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubShardNumSub            func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPublish                      func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
	WQuit                         func(ctx context.Context) *redis.StatusCmd
	WRPop                         func(ctx context.Context, key string) *redis.StringCmd
	WRPopCount                    func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WRPopLPush                    func(ctx context.Context, source string, destination string) *redis.StringCmd
	WRPush                        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WRPushX                       func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WRandomKey                    func(ctx context.Context) *redis.StringCmd
	WReadOnly                     func(ctx context.Context) *redis.StatusCmd
	WReadWrite                    func(ctx context.Context) *redis.StatusCmd
	WRename                       func(ctx context.Context, key string, newkey string) *redis.StatusCmd
	WRenameNX                     func(ctx context.Context, key string, newkey string) *redis.BoolCmd
	WRestore                      func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WRestoreReplace               func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WSAdd                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSCard                        func(ctx context.Context, key string) *redis.IntCmd
	WSDiff                        func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSDiffStore                   func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSInter                       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSInterCard                   func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WSInterStore                  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSIsMember                    func(ctx context.Context, key string, member interface{}) *redis.BoolCmd
	WSMIsMember                   func(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd
	WSMembers                     func(ctx context.Context, key string) *redis.StringSliceCmd
	WSMembersMap                  func(ctx context.Context, key string) *redis.StringStructMapCmd
	WSMove                        func(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd
	WSPop                         func(ctx context.Context, key string) *redis.StringCmd
	WSPopN                        func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSPublish                     func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
	WSRandMember                  func(ctx context.Context, key string) *redis.StringCmd
	WSRandMemberN                 func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSRem                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WSUnion                       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSUnionStore                  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSave                         func(ctx context.Context) *redis.StatusCmd
	WScan                         func(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd
	WScanType                     func(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd
	WScriptExists                 func(ctx context.Context, hashes ...string) *redis.BoolSliceCmd
	WScriptFlush                  func(ctx context.Context) *redis.StatusCmd
	WScriptKill                   func(ctx context.Context) *redis.StatusCmd
	WScriptLoad                   func(ctx context.Context, script string) *redis.StringCmd
	WSet                          func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetArgs                      func(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd
	WSetBit                       func(ctx context.Context, key string, offset int64, value int) *redis.IntCmd
	WSetEx                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetNX                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WSetRange                     func(ctx context.Context, key string, offset int64, value string) *redis.IntCmd
	WSetXX                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WShutdown                     func(ctx context.Context) *redis.StatusCmd
	WShutdownNoSave               func(ctx context.Context) *redis.StatusCmd
	WShutdownSave                 func(ctx context.Context) *redis.StatusCmd
	WSlaveOf                      func(ctx context.Context, host string, port string) *redis.StatusCmd
	WSlowLogGet                   func(ctx context.Context, num int64) *redis.SlowLogCmd
	WSort                         func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortInterfaces               func(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd
	WSortRO                       func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortStore                    func(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd
	WStrLen                       func(ctx context.Context, key string) *redis.IntCmd
	WTDigestAdd                   func(ctx context.Context, key string, elements ...float64) *redis.StatusCmd
	WTDigestByRank                func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestByRevRank             func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestCDF                   func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestCreate                func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestCreateWithCompression func(ctx context.Context, key string, compression int64) *redis.StatusCmd
	WTDigestInfo                  func(ctx context.Context, key string) *redis.TDigestInfoCmd
	WTDigestMax                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestMerge                 func(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd
	WTDigestMin                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestQuantile              func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestRank                  func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestReset                 func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestRevRank               func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestTrimmedMean           func(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd
	WTFCall                       func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNC                  func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNCArgs              func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFCallArgs                   func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFunctionDelete              func(ctx context.Context, libName string) *redis.StatusCmd
	WTFunctionList                func(ctx context.Context) *redis.MapStringInterfaceSliceCmd
	WTFunctionListArgs            func(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd
	WTFunctionLoad                func(ctx context.Context, lib string) *redis.StatusCmd
	WTFunctionLoadArgs            func(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd
	WTSAdd                        func(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd
	WTSAddWithArgs                func(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd
	WTSAlter                      func(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd
	WTSCreate                     func(ctx context.Context, key string) *redis.StatusCmd
	WTSCreateRule                 func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd
	WTSCreateRuleWithArgs         func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd
	WTSCreateWithArgs             func(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd
	WTSDecrBy                     func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSDecrByWithArgs             func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSDel                        func(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd
	WTSDeleteRule                 func(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd
	WTSGet                        func(ctx context.Context, key string) *redis.TSTimestampValueCmd
	WTSGetWithArgs                func(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd
	WTSIncrBy                     func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSIncrByWithArgs             func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSInfo                       func(ctx context.Context, key string) *redis.MapStringInterfaceCmd
	WTSInfoWithArgs               func(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd
	WTSMAdd                       func(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd
	WTSMGet                       func(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd
	WTSMGetWithArgs               func(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRange                     func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRangeWithArgs             func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRevRange                  func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRevRangeWithArgs          func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSQueryIndex                 func(ctx context.Context, filterExpr []string) *redis.StringSliceCmd
	WTSRange                      func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRangeWithArgs              func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd
	WTSRevRange                   func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRevRangeWithArgs           func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd
	WTTL                          func(ctx context.Context, key string) *redis.DurationCmd
	WTime                         func(ctx context.Context) *redis.TimeCmd
	WTopKAdd                      func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKCount                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WTopKIncrBy                   func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKInfo                     func(ctx context.Context, key string) *redis.TopKInfoCmd
	WTopKList                     func(ctx context.Context, key string) *redis.StringSliceCmd
	WTopKListWithCount            func(ctx context.Context, key string) *redis.MapStringIntCmd
	WTopKQuery                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WTopKReserve                  func(ctx context.Context, key string, k int64) *redis.StatusCmd
	WTopKReserveWithOptions       func(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd
	WTouch                        func(ctx context.Context, keys ...string) *redis.IntCmd
	WTxPipeline                   func() redis.Pipeliner
	WTxPipelined                  func(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WType                         func(ctx context.Context, key string) *redis.StatusCmd
	WUnlink                       func(ctx context.Context, keys ...string) *redis.IntCmd
	WXAck                         func(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd
	WXAdd                         func(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd
	WXAutoClaim                   func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd
	WXAutoClaimJustID             func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd
	WXClaim                       func(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd
	WXClaimJustID                 func(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd
	WXDel                         func(ctx context.Context, stream string, ids ...string) *redis.IntCmd
	WXGroupCreate                 func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupCreateConsumer         func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupCreateMkStream         func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupDelConsumer            func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupDestroy                func(ctx context.Context, stream string, group string) *redis.IntCmd
	WXGroupSetID                  func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXInfoConsumers               func(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd
	WXInfoGroups                  func(ctx context.Context, key string) *redis.XInfoGroupsCmd
	WXInfoStream                  func(ctx context.Context, key string) *redis.XInfoStreamCmd
	WXInfoStreamFull              func(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd
	WXLen                         func(ctx context.Context, stream string) *redis.IntCmd
	WXPending                     func(ctx context.Context, stream string, group string) *redis.XPendingCmd
	WXPendingExt                  func(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd
	WXRange                       func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRangeN                      func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXRead                        func(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd
	WXReadGroup                   func(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd
	WXReadStreams                 func(ctx context.Context, streams ...string) *redis.XStreamSliceCmd
	WXRevRange                    func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRevRangeN                   func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXTrimMaxLen                  func(ctx context.Context, key string, maxLen int64) *redis.IntCmd
	WXTrimMaxLenApprox            func(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd
	WXTrimMinID                   func(ctx context.Context, key string, minID string) *redis.IntCmd
	WXTrimMinIDApprox             func(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd
	WZAdd                         func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddArgs                     func(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd
	WZAddArgsIncr                 func(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd
	WZAddGT                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddLT                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddNX                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddXX                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZCard                        func(ctx context.Context, key string) *redis.IntCmd
	WZCount                       func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZDiff                        func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WZDiffStore                   func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WZDiffWithScores              func(ctx context.Context, keys ...string) *redis.ZSliceCmd
	WZIncrBy                      func(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd
	WZInter                       func(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd
	WZInterCard                   func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WZInterStore                  func(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd
	WZInterWithScores             func(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd
	WZLexCount                    func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZMPop                        func(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WZMScore                      func(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd
	WZPopMax                      func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZPopMin                      func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZRandMember                  func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WZRandMemberWithScores        func(ctx context.Context, key string, count int) *redis.ZSliceCmd
	WZRange                       func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRangeArgs                   func(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd
	WZRangeArgsWithScores         func(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd
	WZRangeByLex                  func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScore                func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScoreWithScores      func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRangeStore                  func(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd
	WZRangeWithScores             func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRank                        func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRankWithScore               func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZRem                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WZRemRangeByLex               func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRemRangeByRank              func(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd
	WZRemRangeByScore             func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRevRange                    func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRevRangeByLex               func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScore             func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScoreWithScores   func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRevRangeWithScores          func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRevRank                     func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRevRankWithScore            func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WZScore                       func(ctx context.Context, key string, member string) *redis.FloatCmd
	WZUnion                       func(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd
	WZUnionStore                  func(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd
	WZUnionWithScores             func(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd
}

func (W _github_com_redis_go_redis_v9_Cmdable) ACLDryRun(ctx context.Context, username string, command ...interface{}) *redis.StringCmd {
	return W.WACLDryRun(ctx, username, command...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ACLLog(ctx context.Context, count int64) *redis.ACLLogCmd {
	return W.WACLLog(ctx, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ACLLogReset(ctx context.Context) *redis.StatusCmd {
	return W.WACLLogReset(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Append(ctx context.Context, key string, value string) *redis.IntCmd {
	return W.WAppend(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WBFCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFInfo(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFInfoArg(ctx context.Context, key string, option string) *redis.BFInfoCmd {
	return W.WBFInfoArg(ctx, key, option)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFInfoCapacity(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoCapacity(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFInfoExpansion(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoExpansion(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFInfoFilters(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoFilters(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFInfoItems(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoItems(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFInfoSize(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoSize(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFInsert(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WBFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFMAdd(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserve(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WBFReserveExpansion(ctx, key, errorRate, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserveNonScaling(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFReserveWithArgs(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd {
	return W.WBFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WBFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WBLMPop(ctx, timeout, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BLMove(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd {
	return W.WBLMove(ctx, source, destination, srcpos, destpos, timeout)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBLPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBRPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd {
	return W.WBRPopLPush(ctx, source, destination, timeout)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WBZMPop(ctx, timeout, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMax(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMin(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BgRewriteAOF(ctx context.Context) *redis.StatusCmd {
	return W.WBgRewriteAOF(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BgSave(ctx context.Context) *redis.StatusCmd {
	return W.WBgSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd {
	return W.WBitCount(ctx, key, bitCount)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BitField(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitField(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BitFieldRO(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitFieldRO(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BitOpAnd(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpAnd(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BitOpNot(ctx context.Context, destKey string, key string) *redis.IntCmd {
	return W.WBitOpNot(ctx, destKey, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BitOpOr(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpOr(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BitOpXor(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpXor(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd {
	return W.WBitPos(ctx, key, bit, pos...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) BitPosSpan(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd {
	return W.WBitPosSpan(ctx, key, bit, start, end, span)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFAddNX(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAddNX(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFCount(ctx context.Context, key string, element interface{}) *redis.IntCmd {
	return W.WCFCount(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFDel(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFDel(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFInfo(ctx context.Context, key string) *redis.CFInfoCmd {
	return W.WCFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFInsert(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFInsertNX(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCFInsertNX(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WCFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFReserve(ctx context.Context, key string, capacity int64) *redis.StatusCmd {
	return W.WCFReserve(ctx, key, capacity)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFReserveBucketSize(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd {
	return W.WCFReserveBucketSize(ctx, key, capacity, bucketsize)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFReserveExpansion(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WCFReserveExpansion(ctx, key, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFReserveMaxIterations(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd {
	return W.WCFReserveMaxIterations(ctx, key, capacity, maxiterations)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFReserveWithArgs(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd {
	return W.WCFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WCFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CMSIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CMSInfo(ctx context.Context, key string) *redis.CMSInfoCmd {
	return W.WCMSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CMSInitByDim(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd {
	return W.WCMSInitByDim(ctx, key, width, height)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CMSInitByProb(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd {
	return W.WCMSInitByProb(ctx, key, errorRate, probability)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd {
	return W.WCMSMerge(ctx, destKey, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd {
	return W.WCMSMergeWithWeight(ctx, destKey, sourceKeys)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CMSQuery(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientGetName(ctx context.Context) *redis.StringCmd {
	return W.WClientGetName(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientID(ctx context.Context) *redis.IntCmd {
	return W.WClientID(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientInfo(ctx context.Context) *redis.ClientInfoCmd {
	return W.WClientInfo(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientKill(ctx context.Context, ipPort string) *redis.StatusCmd {
	return W.WClientKill(ctx, ipPort)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientKillByFilter(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WClientKillByFilter(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientList(ctx context.Context) *redis.StringCmd {
	return W.WClientList(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientPause(ctx context.Context, dur time.Duration) *redis.BoolCmd {
	return W.WClientPause(ctx, dur)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientUnblock(ctx context.Context, id int64) *redis.IntCmd {
	return W.WClientUnblock(ctx, id)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientUnblockWithError(ctx context.Context, id int64) *redis.IntCmd {
	return W.WClientUnblockWithError(ctx, id)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClientUnpause(ctx context.Context) *redis.BoolCmd {
	return W.WClientUnpause(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterAddSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterAddSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterAddSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterAddSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterCountFailureReports(ctx context.Context, nodeID string) *redis.IntCmd {
	return W.WClusterCountFailureReports(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterCountKeysInSlot(ctx context.Context, slot int) *redis.IntCmd {
	return W.WClusterCountKeysInSlot(ctx, slot)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterDelSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterDelSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterDelSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterDelSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterFailover(ctx context.Context) *redis.StatusCmd {
	return W.WClusterFailover(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterForget(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterForget(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) *redis.StringSliceCmd {
	return W.WClusterGetKeysInSlot(ctx, slot, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterInfo(ctx context.Context) *redis.StringCmd {
	return W.WClusterInfo(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterKeySlot(ctx context.Context, key string) *redis.IntCmd {
	return W.WClusterKeySlot(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterLinks(ctx context.Context) *redis.ClusterLinksCmd {
	return W.WClusterLinks(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterMeet(ctx context.Context, host string, port string) *redis.StatusCmd {
	return W.WClusterMeet(ctx, host, port)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterMyShardID(ctx context.Context) *redis.StringCmd {
	return W.WClusterMyShardID(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterNodes(ctx context.Context) *redis.StringCmd {
	return W.WClusterNodes(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterReplicate(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterReplicate(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterResetHard(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetHard(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterResetSoft(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetSoft(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterSaveConfig(ctx context.Context) *redis.StatusCmd {
	return W.WClusterSaveConfig(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterShards(ctx context.Context) *redis.ClusterShardsCmd {
	return W.WClusterShards(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterSlaves(ctx context.Context, nodeID string) *redis.StringSliceCmd {
	return W.WClusterSlaves(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ClusterSlots(ctx context.Context) *redis.ClusterSlotsCmd {
	return W.WClusterSlots(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Command(ctx context.Context) *redis.CommandsInfoCmd {
	return W.WCommand(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CommandGetKeys(ctx context.Context, commands ...interface{}) *redis.StringSliceCmd {
	return W.WCommandGetKeys(ctx, commands...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CommandGetKeysAndFlags(ctx context.Context, commands ...interface{}) *redis.KeyFlagsCmd {
	return W.WCommandGetKeysAndFlags(ctx, commands...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) CommandList(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd {
	return W.WCommandList(ctx, filter)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ConfigGet(ctx context.Context, parameter string) *redis.MapStringStringCmd {
	return W.WConfigGet(ctx, parameter)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ConfigResetStat(ctx context.Context) *redis.StatusCmd {
	return W.WConfigResetStat(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ConfigRewrite(ctx context.Context) *redis.StatusCmd {
	return W.WConfigRewrite(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ConfigSet(ctx context.Context, parameter string, value string) *redis.StatusCmd {
	return W.WConfigSet(ctx, parameter, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd {
	return W.WCopy(ctx, sourceKey, destKey, db, replace)
}
func (W _github_com_redis_go_redis_v9_Cmdable) DBSize(ctx context.Context) *redis.IntCmd {
	return W.WDBSize(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) DebugObject(ctx context.Context, key string) *redis.StringCmd {
	return W.WDebugObject(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Decr(ctx context.Context, key string) *redis.IntCmd {
	return W.WDecr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) DecrBy(ctx context.Context, key string, decrement int64) *redis.IntCmd {
	return W.WDecrBy(ctx, key, decrement)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WDel(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Dump(ctx context.Context, key string) *redis.StringCmd {
	return W.WDump(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Echo(ctx context.Context, message interface{}) *redis.StringCmd {
	return W.WEcho(ctx, message)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEval(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalRO(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalSha(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalShaRO(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Exists(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WExists(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Expire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ExpireGT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireGT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ExpireLT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireLT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ExpireNX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireNX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ExpireXX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireXX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FCall(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCall(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FCallRO(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRO(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FCallRo(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRo(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTAggregate(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd {
	return W.WFTAggregate(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTAggregateWithArgs(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd {
	return W.WFTAggregateWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTAliasAdd(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasAdd(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTAliasDel(ctx context.Context, alias string) *redis.StatusCmd {
	return W.WFTAliasDel(ctx, alias)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTAliasUpdate(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasUpdate(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd {
	return W.WFTAlter(ctx, index, skipInitialScan, definition)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTConfigGet(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd {
	return W.WFTConfigGet(ctx, option)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTConfigSet(ctx context.Context, option string, value interface{}) *redis.StatusCmd {
	return W.WFTConfigSet(ctx, option, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTCreate(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd {
	return W.WFTCreate(ctx, index, options, schema...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTCursorDel(ctx context.Context, index string, cursorId int) *redis.StatusCmd {
	return W.WFTCursorDel(ctx, index, cursorId)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTCursorRead(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd {
	return W.WFTCursorRead(ctx, index, cursorId, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTDictAdd(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictAdd(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTDictDel(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictDel(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTDictDump(ctx context.Context, dict string) *redis.StringSliceCmd {
	return W.WFTDictDump(ctx, dict)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTDropIndex(ctx context.Context, index string) *redis.StatusCmd {
	return W.WFTDropIndex(ctx, index)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTDropIndexWithArgs(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd {
	return W.WFTDropIndexWithArgs(ctx, index, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTExplain(ctx context.Context, index string, query string) *redis.StringCmd {
	return W.WFTExplain(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTExplainWithArgs(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd {
	return W.WFTExplainWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTInfo(ctx context.Context, index string) *redis.FTInfoCmd {
	return W.WFTInfo(ctx, index)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTSearch(ctx context.Context, index string, query string) *redis.FTSearchCmd {
	return W.WFTSearch(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTSearchWithArgs(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd {
	return W.WFTSearchWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTSpellCheck(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheck(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTSpellCheckWithArgs(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheckWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTSynDump(ctx context.Context, index string) *redis.FTSynDumpCmd {
	return W.WFTSynDump(ctx, index)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTSynUpdate(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdate(ctx, index, synGroupId, terms)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdateWithArgs(ctx, index, synGroupId, options, terms)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FTTagVals(ctx context.Context, index string, field string) *redis.StringSliceCmd {
	return W.WFTTagVals(ctx, index, field)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FT_List(ctx context.Context) *redis.StringSliceCmd {
	return W.WFT_List(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FlushAll(ctx context.Context) *redis.StatusCmd {
	return W.WFlushAll(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FlushAllAsync(ctx context.Context) *redis.StatusCmd {
	return W.WFlushAllAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FlushDB(ctx context.Context) *redis.StatusCmd {
	return W.WFlushDB(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FlushDBAsync(ctx context.Context) *redis.StatusCmd {
	return W.WFlushDBAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionDelete(ctx context.Context, libName string) *redis.StringCmd {
	return W.WFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionDump(ctx context.Context) *redis.StringCmd {
	return W.WFunctionDump(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionFlush(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionFlushAsync(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlushAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionKill(ctx context.Context) *redis.StringCmd {
	return W.WFunctionKill(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionList(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd {
	return W.WFunctionList(ctx, q)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionLoad(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoad(ctx, code)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionLoadReplace(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoadReplace(ctx, code)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionRestore(ctx context.Context, libDump string) *redis.StringCmd {
	return W.WFunctionRestore(ctx, libDump)
}
func (W _github_com_redis_go_redis_v9_Cmdable) FunctionStats(ctx context.Context) *redis.FunctionStatsCmd {
	return W.WFunctionStats(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd {
	return W.WGeoAdd(ctx, key, geoLocation...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	return W.WGeoDist(ctx, key, member1, member2, unit)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoHash(ctx context.Context, key string, members ...string) *redis.StringSliceCmd {
	return W.WGeoHash(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoPos(ctx context.Context, key string, members ...string) *redis.GeoPosCmd {
	return W.WGeoPos(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadius(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoRadiusByMember(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadiusByMember(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusByMemberStore(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusStore(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd {
	return W.WGeoSearch(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd {
	return W.WGeoSearchLocation(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GeoSearchStore(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd {
	return W.WGeoSearchStore(ctx, key, store, q)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Get(ctx context.Context, key string) *redis.StringCmd {
	return W.WGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GetBit(ctx context.Context, key string, offset int64) *redis.IntCmd {
	return W.WGetBit(ctx, key, offset)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GetDel(ctx context.Context, key string) *redis.StringCmd {
	return W.WGetDel(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GetEx(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd {
	return W.WGetEx(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GetRange(ctx context.Context, key string, start int64, end int64) *redis.StringCmd {
	return W.WGetRange(ctx, key, start, end)
}
func (W _github_com_redis_go_redis_v9_Cmdable) GetSet(ctx context.Context, key string, value interface{}) *redis.StringCmd {
	return W.WGetSet(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HDel(ctx context.Context, key string, fields ...string) *redis.IntCmd {
	return W.WHDel(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HExists(ctx context.Context, key string, field string) *redis.BoolCmd {
	return W.WHExists(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HGet(ctx context.Context, key string, field string) *redis.StringCmd {
	return W.WHGet(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HGetAll(ctx context.Context, key string) *redis.MapStringStringCmd {
	return W.WHGetAll(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HIncrBy(ctx context.Context, key string, field string, incr int64) *redis.IntCmd {
	return W.WHIncrBy(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HIncrByFloat(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd {
	return W.WHIncrByFloat(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HKeys(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHKeys(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WHLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HMGet(ctx context.Context, key string, fields ...string) *redis.SliceCmd {
	return W.WHMGet(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HMSet(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd {
	return W.WHMSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HPExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HPTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HPersist(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPersist(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HRandField(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WHRandField(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HRandFieldWithValues(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd {
	return W.WHRandFieldWithValues(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScanNoValues(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HSet(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WHSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HSetNX(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSetNX(ctx, key, field, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) HVals(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHVals(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Incr(ctx context.Context, key string) *redis.IntCmd {
	return W.WIncr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) IncrBy(ctx context.Context, key string, value int64) *redis.IntCmd {
	return W.WIncrBy(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) IncrByFloat(ctx context.Context, key string, value float64) *redis.FloatCmd {
	return W.WIncrByFloat(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Info(ctx context.Context, section ...string) *redis.StringCmd {
	return W.WInfo(ctx, section...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONArrAppend(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrAppend(ctx, key, path, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONArrIndex(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndex(ctx, key, path, value...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONArrIndexWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndexWithArgs(ctx, key, path, options, value...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONArrInsert(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrInsert(ctx, key, path, index, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONArrLen(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONArrPop(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd {
	return W.WJSONArrPop(ctx, key, path, index)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONArrTrim(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrTrim(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONArrTrimWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd {
	return W.WJSONArrTrimWithArgs(ctx, key, path, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONClear(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONClear(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONDebugMemory(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDebugMemory(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONDel(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDel(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONForget(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONForget(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONGet(ctx context.Context, key string, paths ...string) *redis.JSONCmd {
	return W.WJSONGet(ctx, key, paths...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONGetWithArgs(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd {
	return W.WJSONGetWithArgs(ctx, key, options, paths...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONMGet(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd {
	return W.WJSONMGet(ctx, path, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONMSet(ctx context.Context, params ...interface{}) *redis.StatusCmd {
	return W.WJSONMSet(ctx, params...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONMSetArgs(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd {
	return W.WJSONMSetArgs(ctx, docs)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONMerge(ctx context.Context, key string, path string, value string) *redis.StatusCmd {
	return W.WJSONMerge(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONNumIncrBy(ctx context.Context, key string, path string, value float64) *redis.JSONCmd {
	return W.WJSONNumIncrBy(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONObjKeys(ctx context.Context, key string, path string) *redis.SliceCmd {
	return W.WJSONObjKeys(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONObjLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONObjLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONSet(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd {
	return W.WJSONSet(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONSetMode(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd {
	return W.WJSONSetMode(ctx, key, path, value, mode)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONStrAppend(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd {
	return W.WJSONStrAppend(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONStrLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONStrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONToggle(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONToggle(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) JSONType(ctx context.Context, key string, path string) *redis.JSONSliceCmd {
	return W.WJSONType(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Keys(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WKeys(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LCS(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd {
	return W.WLCS(ctx, q)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LIndex(ctx context.Context, key string, index int64) *redis.StringCmd {
	return W.WLIndex(ctx, key, index)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsert(ctx, key, op, pivot, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertAfter(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertBefore(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WLLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LMPop(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WLMPop(ctx, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd {
	return W.WLMove(ctx, source, destination, srcpos, destpos)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WLPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WLPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LPos(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd {
	return W.WLPos(ctx, key, value, args)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LPosCount(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd {
	return W.WLPosCount(ctx, key, value, count, args)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPushX(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WLRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LRem(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd {
	return W.WLRem(ctx, key, count, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LSet(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd {
	return W.WLSet(ctx, key, index, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LTrim(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd {
	return W.WLTrim(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Cmdable) LastSave(ctx context.Context) *redis.IntCmd {
	return W.WLastSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) MGet(ctx context.Context, keys ...string) *redis.SliceCmd {
	return W.WMGet(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) MSet(ctx context.Context, values ...interface{}) *redis.StatusCmd {
	return W.WMSet(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) MSetNX(ctx context.Context, values ...interface{}) *redis.BoolCmd {
	return W.WMSetNX(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) MemoryUsage(ctx context.Context, key string, samples ...int) *redis.IntCmd {
	return W.WMemoryUsage(ctx, key, samples...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	return W.WMigrate(ctx, host, port, key, db, timeout)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ModuleLoadex(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd {
	return W.WModuleLoadex(ctx, conf)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Move(ctx context.Context, key string, db int) *redis.BoolCmd {
	return W.WMove(ctx, key, db)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ObjectEncoding(ctx context.Context, key string) *redis.StringCmd {
	return W.WObjectEncoding(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ObjectFreq(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectFreq(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ObjectIdleTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WObjectIdleTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ObjectRefCount(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectRefCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PExpire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WPExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WPExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PFAdd(ctx context.Context, key string, els ...interface{}) *redis.IntCmd {
	return W.WPFAdd(ctx, key, els...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PFCount(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WPFCount(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PFMerge(ctx context.Context, dest string, keys ...string) *redis.StatusCmd {
	return W.WPFMerge(ctx, dest, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PTTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Persist(ctx context.Context, key string) *redis.BoolCmd {
	return W.WPersist(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Ping(ctx context.Context) *redis.StatusCmd {
	return W.WPing(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Pipeline() redis.Pipeliner {
	return W.WPipeline()
}
func (W _github_com_redis_go_redis_v9_Cmdable) Pipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WPipelined(ctx, fn)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PubSubChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PubSubNumPat(ctx context.Context) *redis.IntCmd {
	return W.WPubSubNumPat(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PubSubNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PubSubShardChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubShardChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_Cmdable) PubSubShardNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubShardNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Publish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WPublish(ctx, channel, message)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Quit(ctx context.Context) *redis.StatusCmd {
	return W.WQuit(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) RPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WRPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) RPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WRPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) RPopLPush(ctx context.Context, source string, destination string) *redis.StringCmd {
	return W.WRPopLPush(ctx, source, destination)
}
func (W _github_com_redis_go_redis_v9_Cmdable) RPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) RPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPushX(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) RandomKey(ctx context.Context) *redis.StringCmd {
	return W.WRandomKey(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ReadOnly(ctx context.Context) *redis.StatusCmd {
	return W.WReadOnly(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ReadWrite(ctx context.Context) *redis.StatusCmd {
	return W.WReadWrite(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Rename(ctx context.Context, key string, newkey string) *redis.StatusCmd {
	return W.WRename(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_Cmdable) RenameNX(ctx context.Context, key string, newkey string) *redis.BoolCmd {
	return W.WRenameNX(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Restore(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestore(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestoreReplace(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SAdd(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WSCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SInter(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSInter(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WSInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SInterStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSInterStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SIsMember(ctx context.Context, key string, member interface{}) *redis.BoolCmd {
	return W.WSIsMember(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SMIsMember(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd {
	return W.WSMIsMember(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SMembers(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WSMembers(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SMembersMap(ctx context.Context, key string) *redis.StringStructMapCmd {
	return W.WSMembersMap(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SMove(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd {
	return W.WSMove(ctx, source, destination, member)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WSPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SPopN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSPopN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SPublish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WSPublish(ctx, channel, message)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SRandMember(ctx context.Context, key string) *redis.StringCmd {
	return W.WSRandMember(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SRandMemberN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSRandMemberN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WSScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SUnion(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSUnion(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SUnionStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSUnionStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Save(ctx context.Context) *redis.StatusCmd {
	return W.WSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Scan(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WScan(ctx, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd {
	return W.WScanType(ctx, cursor, match, count, keyType)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ScriptExists(ctx context.Context, hashes ...string) *redis.BoolSliceCmd {
	return W.WScriptExists(ctx, hashes...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ScriptFlush(ctx context.Context) *redis.StatusCmd {
	return W.WScriptFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ScriptKill(ctx context.Context) *redis.StatusCmd {
	return W.WScriptKill(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	return W.WScriptLoad(ctx, script)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSet(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SetArgs(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd {
	return W.WSetArgs(ctx, key, value, a)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SetBit(ctx context.Context, key string, offset int64, value int) *redis.IntCmd {
	return W.WSetBit(ctx, key, offset, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SetEx(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSetEx(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetNX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SetRange(ctx context.Context, key string, offset int64, value string) *redis.IntCmd {
	return W.WSetRange(ctx, key, offset, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetXX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Shutdown(ctx context.Context) *redis.StatusCmd {
	return W.WShutdown(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ShutdownNoSave(ctx context.Context) *redis.StatusCmd {
	return W.WShutdownNoSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ShutdownSave(ctx context.Context) *redis.StatusCmd {
	return W.WShutdownSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SlaveOf(ctx context.Context, host string, port string) *redis.StatusCmd {
	return W.WSlaveOf(ctx, host, port)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SlowLogGet(ctx context.Context, num int64) *redis.SlowLogCmd {
	return W.WSlowLogGet(ctx, num)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Sort(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSort(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd {
	return W.WSortInterfaces(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SortRO(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSortRO(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_Cmdable) SortStore(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd {
	return W.WSortStore(ctx, key, store, sort)
}
func (W _github_com_redis_go_redis_v9_Cmdable) StrLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WStrLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestAdd(ctx context.Context, key string, elements ...float64) *redis.StatusCmd {
	return W.WTDigestAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestByRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRevRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestCDF(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestCDF(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *redis.StatusCmd {
	return W.WTDigestCreateWithCompression(ctx, key, compression)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestInfo(ctx context.Context, key string) *redis.TDigestInfoCmd {
	return W.WTDigestInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestMax(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMax(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestMerge(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd {
	return W.WTDigestMerge(ctx, destKey, options, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestMin(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMin(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestQuantile(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestQuantile(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestReset(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestReset(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestRevRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRevRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd {
	return W.WTDigestTrimmedMean(ctx, key, lowCutQuantile, highCutQuantile)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TFCall(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCall(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TFCallASYNC(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCallASYNC(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TFCallASYNCArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallASYNCArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TFCallArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TFunctionDelete(ctx context.Context, libName string) *redis.StatusCmd {
	return W.WTFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TFunctionList(ctx context.Context) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionList(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TFunctionListArgs(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionListArgs(ctx, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TFunctionLoad(ctx context.Context, lib string) *redis.StatusCmd {
	return W.WTFunctionLoad(ctx, lib)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TFunctionLoadArgs(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd {
	return W.WTFunctionLoadArgs(ctx, lib, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSAdd(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd {
	return W.WTSAdd(ctx, key, timestamp, value)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSAddWithArgs(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd {
	return W.WTSAddWithArgs(ctx, key, timestamp, value, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSAlter(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd {
	return W.WTSAlter(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTSCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSCreateRule(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd {
	return W.WTSCreateRule(ctx, sourceKey, destKey, aggregator, bucketDuration)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSCreateRuleWithArgs(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd {
	return W.WTSCreateRuleWithArgs(ctx, sourceKey, destKey, aggregator, bucketDuration, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSCreateWithArgs(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd {
	return W.WTSCreateWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSDecrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSDecrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSDecrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSDecrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSDel(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd {
	return W.WTSDel(ctx, Key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSDeleteRule(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd {
	return W.WTSDeleteRule(ctx, sourceKey, destKey)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSGet(ctx context.Context, key string) *redis.TSTimestampValueCmd {
	return W.WTSGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSGetWithArgs(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd {
	return W.WTSGetWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSIncrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSIncrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSIncrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSIncrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSInfo(ctx context.Context, key string) *redis.MapStringInterfaceCmd {
	return W.WTSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSInfoWithArgs(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd {
	return W.WTSInfoWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSMAdd(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd {
	return W.WTSMAdd(ctx, ktvSlices)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSMGet(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGet(ctx, filters)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSMGetWithArgs(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGetWithArgs(ctx, filters, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSMRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSMRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSMRevRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSMRevRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSQueryIndex(ctx context.Context, filterExpr []string) *redis.StringSliceCmd {
	return W.WTSQueryIndex(ctx, filterExpr)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSRevRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TSRevRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Time(ctx context.Context) *redis.TimeCmd {
	return W.WTime(ctx)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TopKAdd(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TopKCount(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WTopKCount(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TopKIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TopKInfo(ctx context.Context, key string) *redis.TopKInfoCmd {
	return W.WTopKInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TopKList(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WTopKList(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TopKListWithCount(ctx context.Context, key string) *redis.MapStringIntCmd {
	return W.WTopKListWithCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TopKQuery(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WTopKQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TopKReserve(ctx context.Context, key string, k int64) *redis.StatusCmd {
	return W.WTopKReserve(ctx, key, k)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TopKReserveWithOptions(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd {
	return W.WTopKReserveWithOptions(ctx, key, k, width, depth, decay)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Touch(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WTouch(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) TxPipeline() redis.Pipeliner {
	return W.WTxPipeline()
}
func (W _github_com_redis_go_redis_v9_Cmdable) TxPipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WTxPipelined(ctx, fn)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Type(ctx context.Context, key string) *redis.StatusCmd {
	return W.WType(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) Unlink(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WUnlink(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XAck(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd {
	return W.WXAck(ctx, stream, group, ids...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XAdd(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd {
	return W.WXAdd(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd {
	return W.WXAutoClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd {
	return W.WXAutoClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XClaim(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	return W.WXClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd {
	return W.WXClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XDel(ctx context.Context, stream string, ids ...string) *redis.IntCmd {
	return W.WXDel(ctx, stream, ids...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XGroupCreate(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreate(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupCreateConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreateMkStream(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupDelConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XGroupDestroy(ctx context.Context, stream string, group string) *redis.IntCmd {
	return W.WXGroupDestroy(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XGroupSetID(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupSetID(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XInfoConsumers(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd {
	return W.WXInfoConsumers(ctx, key, group)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XInfoGroups(ctx context.Context, key string) *redis.XInfoGroupsCmd {
	return W.WXInfoGroups(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XInfoStream(ctx context.Context, key string) *redis.XInfoStreamCmd {
	return W.WXInfoStream(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XInfoStreamFull(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd {
	return W.WXInfoStreamFull(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XLen(ctx context.Context, stream string) *redis.IntCmd {
	return W.WXLen(ctx, stream)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XPending(ctx context.Context, stream string, group string) *redis.XPendingCmd {
	return W.WXPending(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	return W.WXPendingExt(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XRead(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd {
	return W.WXRead(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	return W.WXReadGroup(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XReadStreams(ctx context.Context, streams ...string) *redis.XStreamSliceCmd {
	return W.WXReadStreams(ctx, streams...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XRevRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRevRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRevRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *redis.IntCmd {
	return W.WXTrimMaxLen(ctx, key, maxLen)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd {
	return W.WXTrimMaxLenApprox(ctx, key, maxLen, limit)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XTrimMinID(ctx context.Context, key string, minID string) *redis.IntCmd {
	return W.WXTrimMinID(ctx, key, minID)
}
func (W _github_com_redis_go_redis_v9_Cmdable) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd {
	return W.WXTrimMinIDApprox(ctx, key, minID, limit)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZAdd(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd {
	return W.WZAddArgs(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd {
	return W.WZAddArgsIncr(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZAddGT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddGT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZAddLT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddLT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZAddNX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddNX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZAddXX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddXX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WZCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WZDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WZDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZDiffWithScores(ctx context.Context, keys ...string) *redis.ZSliceCmd {
	return W.WZDiffWithScores(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZIncrBy(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd {
	return W.WZIncrBy(ctx, key, increment, member)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZInter(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd {
	return W.WZInter(ctx, store)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WZInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd {
	return W.WZInterStore(ctx, destination, store)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZInterWithScores(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd {
	return W.WZInterWithScores(ctx, store)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZLexCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZLexCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZMPop(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WZMPop(ctx, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZMScore(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd {
	return W.WZMScore(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZPopMax(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMax(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZPopMin(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMin(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRandMember(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WZRandMember(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRandMemberWithScores(ctx context.Context, key string, count int) *redis.ZSliceCmd {
	return W.WZRandMemberWithScores(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd {
	return W.WZRangeArgs(ctx, z)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd {
	return W.WZRangeArgsWithScores(ctx, z)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd {
	return W.WZRangeStore(ctx, dst, z)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WZRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRemRangeByLex(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByLex(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd {
	return W.WZRemRangeByRank(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRemRangeByScore(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByScore(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRevRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRevRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRevRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRevRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRevRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRevRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZRevRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRevRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WZScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZScore(ctx context.Context, key string, member string) *redis.FloatCmd {
	return W.WZScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZUnion(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd {
	return W.WZUnion(ctx, store)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd {
	return W.WZUnionStore(ctx, dest, store)
}
func (W _github_com_redis_go_redis_v9_Cmdable) ZUnionWithScores(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd {
	return W.WZUnionWithScores(ctx, store)
}

// _github_com_redis_go_redis_v9_Cmder is an interface wrapper for Cmder type
type _github_com_redis_go_redis_v9_Cmder struct {
	IValue          interface{}
	WArgs           func() []interface{}
	WErr            func() error
	WFullName       func() string
	WName           func() string
	WSetErr         func(a0 error)
	WSetFirstKeyPos func(a0 int8)
	WString         func() string
}

func (W _github_com_redis_go_redis_v9_Cmder) Args() []interface{} {
	return W.WArgs()
}
func (W _github_com_redis_go_redis_v9_Cmder) Err() error {
	return W.WErr()
}
func (W _github_com_redis_go_redis_v9_Cmder) FullName() string {
	return W.WFullName()
}
func (W _github_com_redis_go_redis_v9_Cmder) Name() string {
	return W.WName()
}
func (W _github_com_redis_go_redis_v9_Cmder) SetErr(a0 error) {
	W.WSetErr(a0)
}
func (W _github_com_redis_go_redis_v9_Cmder) SetFirstKeyPos(a0 int8) {
	W.WSetFirstKeyPos(a0)
}
func (W _github_com_redis_go_redis_v9_Cmder) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}

// _github_com_redis_go_redis_v9_ConsistentHash is an interface wrapper for ConsistentHash type
type _github_com_redis_go_redis_v9_ConsistentHash struct {
	IValue interface{}
	WGet   func(a0 string) string
}

func (W _github_com_redis_go_redis_v9_ConsistentHash) Get(a0 string) string {
	return W.WGet(a0)
}

// _github_com_redis_go_redis_v9_Error is an interface wrapper for Error type
type _github_com_redis_go_redis_v9_Error struct {
	IValue      interface{}
	WError      func() string
	WRedisError func()
}

func (W _github_com_redis_go_redis_v9_Error) Error() string {
	return W.WError()
}
func (W _github_com_redis_go_redis_v9_Error) RedisError() {
	W.WRedisError()
}

// _github_com_redis_go_redis_v9_GearsCmdable is an interface wrapper for GearsCmdable type
type _github_com_redis_go_redis_v9_GearsCmdable struct {
	IValue             interface{}
	WTFCall            func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNC       func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNCArgs   func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFCallArgs        func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFunctionDelete   func(ctx context.Context, libName string) *redis.StatusCmd
	WTFunctionList     func(ctx context.Context) *redis.MapStringInterfaceSliceCmd
	WTFunctionListArgs func(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd
	WTFunctionLoad     func(ctx context.Context, lib string) *redis.StatusCmd
	WTFunctionLoadArgs func(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd
}

func (W _github_com_redis_go_redis_v9_GearsCmdable) TFCall(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCall(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_GearsCmdable) TFCallASYNC(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCallASYNC(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_GearsCmdable) TFCallASYNCArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallASYNCArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_GearsCmdable) TFCallArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_GearsCmdable) TFunctionDelete(ctx context.Context, libName string) *redis.StatusCmd {
	return W.WTFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_GearsCmdable) TFunctionList(ctx context.Context) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionList(ctx)
}
func (W _github_com_redis_go_redis_v9_GearsCmdable) TFunctionListArgs(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionListArgs(ctx, options)
}
func (W _github_com_redis_go_redis_v9_GearsCmdable) TFunctionLoad(ctx context.Context, lib string) *redis.StatusCmd {
	return W.WTFunctionLoad(ctx, lib)
}
func (W _github_com_redis_go_redis_v9_GearsCmdable) TFunctionLoadArgs(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd {
	return W.WTFunctionLoadArgs(ctx, lib, options)
}

// _github_com_redis_go_redis_v9_GenericCmdable is an interface wrapper for GenericCmdable type
type _github_com_redis_go_redis_v9_GenericCmdable struct {
	IValue          interface{}
	WCopy           func(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd
	WDel            func(ctx context.Context, keys ...string) *redis.IntCmd
	WDump           func(ctx context.Context, key string) *redis.StringCmd
	WExists         func(ctx context.Context, keys ...string) *redis.IntCmd
	WExpire         func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireAt       func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WExpireGT       func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireLT       func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireNX       func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireTime     func(ctx context.Context, key string) *redis.DurationCmd
	WExpireXX       func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WKeys           func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WMigrate        func(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd
	WMove           func(ctx context.Context, key string, db int) *redis.BoolCmd
	WObjectEncoding func(ctx context.Context, key string) *redis.StringCmd
	WObjectFreq     func(ctx context.Context, key string) *redis.IntCmd
	WObjectIdleTime func(ctx context.Context, key string) *redis.DurationCmd
	WObjectRefCount func(ctx context.Context, key string) *redis.IntCmd
	WPExpire        func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WPExpireAt      func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WPExpireTime    func(ctx context.Context, key string) *redis.DurationCmd
	WPTTL           func(ctx context.Context, key string) *redis.DurationCmd
	WPersist        func(ctx context.Context, key string) *redis.BoolCmd
	WRandomKey      func(ctx context.Context) *redis.StringCmd
	WRename         func(ctx context.Context, key string, newkey string) *redis.StatusCmd
	WRenameNX       func(ctx context.Context, key string, newkey string) *redis.BoolCmd
	WRestore        func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WRestoreReplace func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WScan           func(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd
	WScanType       func(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd
	WSort           func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortInterfaces func(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd
	WSortRO         func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortStore      func(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd
	WTTL            func(ctx context.Context, key string) *redis.DurationCmd
	WTouch          func(ctx context.Context, keys ...string) *redis.IntCmd
	WType           func(ctx context.Context, key string) *redis.StatusCmd
}

func (W _github_com_redis_go_redis_v9_GenericCmdable) Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd {
	return W.WCopy(ctx, sourceKey, destKey, db, replace)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WDel(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Dump(ctx context.Context, key string) *redis.StringCmd {
	return W.WDump(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Exists(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WExists(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Expire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ExpireGT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireGT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ExpireLT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireLT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ExpireNX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireNX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ExpireXX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireXX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Keys(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WKeys(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	return W.WMigrate(ctx, host, port, key, db, timeout)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Move(ctx context.Context, key string, db int) *redis.BoolCmd {
	return W.WMove(ctx, key, db)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ObjectEncoding(ctx context.Context, key string) *redis.StringCmd {
	return W.WObjectEncoding(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ObjectFreq(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectFreq(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ObjectIdleTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WObjectIdleTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ObjectRefCount(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectRefCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) PExpire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WPExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) PExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WPExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) PExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) PTTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Persist(ctx context.Context, key string) *redis.BoolCmd {
	return W.WPersist(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) RandomKey(ctx context.Context) *redis.StringCmd {
	return W.WRandomKey(ctx)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Rename(ctx context.Context, key string, newkey string) *redis.StatusCmd {
	return W.WRename(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) RenameNX(ctx context.Context, key string, newkey string) *redis.BoolCmd {
	return W.WRenameNX(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Restore(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestore(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestoreReplace(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Scan(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WScan(ctx, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd {
	return W.WScanType(ctx, cursor, match, count, keyType)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Sort(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSort(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd {
	return W.WSortInterfaces(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) SortRO(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSortRO(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) SortStore(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd {
	return W.WSortStore(ctx, key, store, sort)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) TTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Touch(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WTouch(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_GenericCmdable) Type(ctx context.Context, key string) *redis.StatusCmd {
	return W.WType(ctx, key)
}

// _github_com_redis_go_redis_v9_GeoCmdable is an interface wrapper for GeoCmdable type
type _github_com_redis_go_redis_v9_GeoCmdable struct {
	IValue                  interface{}
	WGeoAdd                 func(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd
	WGeoDist                func(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd
	WGeoHash                func(ctx context.Context, key string, members ...string) *redis.StringSliceCmd
	WGeoPos                 func(ctx context.Context, key string, members ...string) *redis.GeoPosCmd
	WGeoRadius              func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMember      func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMemberStore func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoRadiusStore         func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoSearch              func(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd
	WGeoSearchLocation      func(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd
	WGeoSearchStore         func(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd
}

func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd {
	return W.WGeoAdd(ctx, key, geoLocation...)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	return W.WGeoDist(ctx, key, member1, member2, unit)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoHash(ctx context.Context, key string, members ...string) *redis.StringSliceCmd {
	return W.WGeoHash(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoPos(ctx context.Context, key string, members ...string) *redis.GeoPosCmd {
	return W.WGeoPos(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadius(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoRadiusByMember(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadiusByMember(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusByMemberStore(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusStore(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd {
	return W.WGeoSearch(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd {
	return W.WGeoSearchLocation(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_GeoCmdable) GeoSearchStore(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd {
	return W.WGeoSearchStore(ctx, key, store, q)
}

// _github_com_redis_go_redis_v9_HashCmdable is an interface wrapper for HashCmdable type
type _github_com_redis_go_redis_v9_HashCmdable struct {
	IValue                interface{}
	WHDel                 func(ctx context.Context, key string, fields ...string) *redis.IntCmd
	WHExists              func(ctx context.Context, key string, field string) *redis.BoolCmd
	WHExpire              func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHExpireAt            func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHExpireAtWithArgs    func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHExpireTime          func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHExpireWithArgs      func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHGet                 func(ctx context.Context, key string, field string) *redis.StringCmd
	WHGetAll              func(ctx context.Context, key string) *redis.MapStringStringCmd
	WHIncrBy              func(ctx context.Context, key string, field string, incr int64) *redis.IntCmd
	WHIncrByFloat         func(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd
	WHKeys                func(ctx context.Context, key string) *redis.StringSliceCmd
	WHLen                 func(ctx context.Context, key string) *redis.IntCmd
	WHMGet                func(ctx context.Context, key string, fields ...string) *redis.SliceCmd
	WHMSet                func(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd
	WHPExpire             func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHPExpireAt           func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHPExpireAtWithArgs   func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPExpireTime         func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPExpireWithArgs     func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPTTL                func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPersist             func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHRandField           func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WHRandFieldWithValues func(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd
	WHScan                func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHScanNoValues        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHSet                 func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WHSetNX               func(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd
	WHTTL                 func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHVals                func(ctx context.Context, key string) *redis.StringSliceCmd
}

func (W _github_com_redis_go_redis_v9_HashCmdable) HDel(ctx context.Context, key string, fields ...string) *redis.IntCmd {
	return W.WHDel(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HExists(ctx context.Context, key string, field string) *redis.BoolCmd {
	return W.WHExists(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HGet(ctx context.Context, key string, field string) *redis.StringCmd {
	return W.WHGet(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HGetAll(ctx context.Context, key string) *redis.MapStringStringCmd {
	return W.WHGetAll(ctx, key)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HIncrBy(ctx context.Context, key string, field string, incr int64) *redis.IntCmd {
	return W.WHIncrBy(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HIncrByFloat(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd {
	return W.WHIncrByFloat(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HKeys(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHKeys(ctx, key)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WHLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HMGet(ctx context.Context, key string, fields ...string) *redis.SliceCmd {
	return W.WHMGet(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HMSet(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd {
	return W.WHMSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HPExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HPTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HPersist(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPersist(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HRandField(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WHRandField(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HRandFieldWithValues(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd {
	return W.WHRandFieldWithValues(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScanNoValues(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HSet(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WHSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HSetNX(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSetNX(ctx, key, field, value)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_HashCmdable) HVals(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHVals(ctx, key)
}

// _github_com_redis_go_redis_v9_Hook is an interface wrapper for Hook type
type _github_com_redis_go_redis_v9_Hook struct {
	IValue               interface{}
	WDialHook            func(next redis.DialHook) redis.DialHook
	WProcessHook         func(next redis.ProcessHook) redis.ProcessHook
	WProcessPipelineHook func(next redis.ProcessPipelineHook) redis.ProcessPipelineHook
}

func (W _github_com_redis_go_redis_v9_Hook) DialHook(next redis.DialHook) redis.DialHook {
	return W.WDialHook(next)
}
func (W _github_com_redis_go_redis_v9_Hook) ProcessHook(next redis.ProcessHook) redis.ProcessHook {
	return W.WProcessHook(next)
}
func (W _github_com_redis_go_redis_v9_Hook) ProcessPipelineHook(next redis.ProcessPipelineHook) redis.ProcessPipelineHook {
	return W.WProcessPipelineHook(next)
}

// _github_com_redis_go_redis_v9_HyperLogLogCmdable is an interface wrapper for HyperLogLogCmdable type
type _github_com_redis_go_redis_v9_HyperLogLogCmdable struct {
	IValue   interface{}
	WPFAdd   func(ctx context.Context, key string, els ...interface{}) *redis.IntCmd
	WPFCount func(ctx context.Context, keys ...string) *redis.IntCmd
	WPFMerge func(ctx context.Context, dest string, keys ...string) *redis.StatusCmd
}

func (W _github_com_redis_go_redis_v9_HyperLogLogCmdable) PFAdd(ctx context.Context, key string, els ...interface{}) *redis.IntCmd {
	return W.WPFAdd(ctx, key, els...)
}
func (W _github_com_redis_go_redis_v9_HyperLogLogCmdable) PFCount(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WPFCount(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_HyperLogLogCmdable) PFMerge(ctx context.Context, dest string, keys ...string) *redis.StatusCmd {
	return W.WPFMerge(ctx, dest, keys...)
}

// _github_com_redis_go_redis_v9_JSONCmdable is an interface wrapper for JSONCmdable type
type _github_com_redis_go_redis_v9_JSONCmdable struct {
	IValue                interface{}
	WJSONArrAppend        func(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd
	WJSONArrIndex         func(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd
	WJSONArrIndexWithArgs func(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd
	WJSONArrInsert        func(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd
	WJSONArrLen           func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrPop           func(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd
	WJSONArrTrim          func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrTrimWithArgs  func(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd
	WJSONClear            func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDebugMemory      func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDel              func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONForget           func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONGet              func(ctx context.Context, key string, paths ...string) *redis.JSONCmd
	WJSONGetWithArgs      func(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd
	WJSONMGet             func(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd
	WJSONMSet             func(ctx context.Context, params ...interface{}) *redis.StatusCmd
	WJSONMSetArgs         func(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd
	WJSONMerge            func(ctx context.Context, key string, path string, value string) *redis.StatusCmd
	WJSONNumIncrBy        func(ctx context.Context, key string, path string, value float64) *redis.JSONCmd
	WJSONObjKeys          func(ctx context.Context, key string, path string) *redis.SliceCmd
	WJSONObjLen           func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONSet              func(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd
	WJSONSetMode          func(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd
	WJSONStrAppend        func(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd
	WJSONStrLen           func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONToggle           func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONType             func(ctx context.Context, key string, path string) *redis.JSONSliceCmd
}

func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONArrAppend(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrAppend(ctx, key, path, values...)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONArrIndex(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndex(ctx, key, path, value...)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONArrIndexWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndexWithArgs(ctx, key, path, options, value...)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONArrInsert(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrInsert(ctx, key, path, index, values...)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONArrLen(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONArrPop(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd {
	return W.WJSONArrPop(ctx, key, path, index)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONArrTrim(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrTrim(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONArrTrimWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd {
	return W.WJSONArrTrimWithArgs(ctx, key, path, options)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONClear(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONClear(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONDebugMemory(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDebugMemory(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONDel(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDel(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONForget(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONForget(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONGet(ctx context.Context, key string, paths ...string) *redis.JSONCmd {
	return W.WJSONGet(ctx, key, paths...)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONGetWithArgs(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd {
	return W.WJSONGetWithArgs(ctx, key, options, paths...)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONMGet(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd {
	return W.WJSONMGet(ctx, path, keys...)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONMSet(ctx context.Context, params ...interface{}) *redis.StatusCmd {
	return W.WJSONMSet(ctx, params...)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONMSetArgs(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd {
	return W.WJSONMSetArgs(ctx, docs)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONMerge(ctx context.Context, key string, path string, value string) *redis.StatusCmd {
	return W.WJSONMerge(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONNumIncrBy(ctx context.Context, key string, path string, value float64) *redis.JSONCmd {
	return W.WJSONNumIncrBy(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONObjKeys(ctx context.Context, key string, path string) *redis.SliceCmd {
	return W.WJSONObjKeys(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONObjLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONObjLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONSet(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd {
	return W.WJSONSet(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONSetMode(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd {
	return W.WJSONSetMode(ctx, key, path, value, mode)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONStrAppend(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd {
	return W.WJSONStrAppend(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONStrLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONStrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONToggle(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONToggle(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_JSONCmdable) JSONType(ctx context.Context, key string, path string) *redis.JSONSliceCmd {
	return W.WJSONType(ctx, key, path)
}

// _github_com_redis_go_redis_v9_Limiter is an interface wrapper for Limiter type
type _github_com_redis_go_redis_v9_Limiter struct {
	IValue        interface{}
	WAllow        func() error
	WReportResult func(result error)
}

func (W _github_com_redis_go_redis_v9_Limiter) Allow() error {
	return W.WAllow()
}
func (W _github_com_redis_go_redis_v9_Limiter) ReportResult(result error) {
	W.WReportResult(result)
}

// _github_com_redis_go_redis_v9_ListCmdable is an interface wrapper for ListCmdable type
type _github_com_redis_go_redis_v9_ListCmdable struct {
	IValue         interface{}
	WBLMPop        func(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WBLMove        func(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd
	WBLPop         func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPop         func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPopLPush    func(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd
	WLIndex        func(ctx context.Context, key string, index int64) *redis.StringCmd
	WLInsert       func(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertAfter  func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertBefore func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLLen          func(ctx context.Context, key string) *redis.IntCmd
	WLMPop         func(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WLMove         func(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd
	WLPop          func(ctx context.Context, key string) *redis.StringCmd
	WLPopCount     func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WLPos          func(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd
	WLPosCount     func(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd
	WLPush         func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLPushX        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLRange        func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WLRem          func(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd
	WLSet          func(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd
	WLTrim         func(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd
	WRPop          func(ctx context.Context, key string) *redis.StringCmd
	WRPopCount     func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WRPopLPush     func(ctx context.Context, source string, destination string) *redis.StringCmd
	WRPush         func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WRPushX        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
}

func (W _github_com_redis_go_redis_v9_ListCmdable) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WBLMPop(ctx, timeout, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) BLMove(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd {
	return W.WBLMove(ctx, source, destination, srcpos, destpos, timeout)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBLPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBRPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd {
	return W.WBRPopLPush(ctx, source, destination, timeout)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LIndex(ctx context.Context, key string, index int64) *redis.StringCmd {
	return W.WLIndex(ctx, key, index)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsert(ctx, key, op, pivot, value)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertAfter(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertBefore(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WLLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LMPop(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WLMPop(ctx, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd {
	return W.WLMove(ctx, source, destination, srcpos, destpos)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WLPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WLPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LPos(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd {
	return W.WLPos(ctx, key, value, args)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LPosCount(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd {
	return W.WLPosCount(ctx, key, value, count, args)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPushX(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WLRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LRem(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd {
	return W.WLRem(ctx, key, count, value)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LSet(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd {
	return W.WLSet(ctx, key, index, value)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) LTrim(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd {
	return W.WLTrim(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) RPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WRPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) RPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WRPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) RPopLPush(ctx context.Context, source string, destination string) *redis.StringCmd {
	return W.WRPopLPush(ctx, source, destination)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) RPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_ListCmdable) RPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPushX(ctx, key, values...)
}

// _github_com_redis_go_redis_v9_Pipeliner is an interface wrapper for Pipeliner type
type _github_com_redis_go_redis_v9_Pipeliner struct {
	IValue                        interface{}
	WACLDryRun                    func(ctx context.Context, username string, command ...interface{}) *redis.StringCmd
	WACLLog                       func(ctx context.Context, count int64) *redis.ACLLogCmd
	WACLLogReset                  func(ctx context.Context) *redis.StatusCmd
	WAppend                       func(ctx context.Context, key string, value string) *redis.IntCmd
	WAuth                         func(ctx context.Context, password string) *redis.StatusCmd
	WAuthACL                      func(ctx context.Context, username string, password string) *redis.StatusCmd
	WBFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFCard                       func(ctx context.Context, key string) *redis.IntCmd
	WBFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFInfo                       func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoArg                    func(ctx context.Context, key string, option string) *redis.BFInfoCmd
	WBFInfoCapacity               func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoExpansion              func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoFilters                func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoItems                  func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoSize                   func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInsert                     func(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WBFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WBFMAdd                       func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFReserve                    func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveExpansion           func(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd
	WBFReserveNonScaling          func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveWithArgs            func(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd
	WBFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WBLMPop                       func(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WBLMove                       func(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd
	WBLPop                        func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPop                        func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPopLPush                   func(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd
	WBZMPop                       func(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WBZPopMax                     func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WBZPopMin                     func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WBgRewriteAOF                 func(ctx context.Context) *redis.StatusCmd
	WBgSave                       func(ctx context.Context) *redis.StatusCmd
	WBitCount                     func(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd
	WBitField                     func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitFieldRO                   func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitOpAnd                     func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpNot                     func(ctx context.Context, destKey string, key string) *redis.IntCmd
	WBitOpOr                      func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpXor                     func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitPos                       func(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd
	WBitPosSpan                   func(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd
	WCFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFAddNX                      func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFCount                      func(ctx context.Context, key string, element interface{}) *redis.IntCmd
	WCFDel                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFInfo                       func(ctx context.Context, key string) *redis.CFInfoCmd
	WCFInsert                     func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WCFInsertNX                   func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd
	WCFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WCFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WCFReserve                    func(ctx context.Context, key string, capacity int64) *redis.StatusCmd
	WCFReserveBucketSize          func(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd
	WCFReserveExpansion           func(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd
	WCFReserveMaxIterations       func(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd
	WCFReserveWithArgs            func(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd
	WCFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WCMSIncrBy                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WCMSInfo                      func(ctx context.Context, key string) *redis.CMSInfoCmd
	WCMSInitByDim                 func(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd
	WCMSInitByProb                func(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd
	WCMSMerge                     func(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd
	WCMSMergeWithWeight           func(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd
	WCMSQuery                     func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WClientGetName                func(ctx context.Context) *redis.StringCmd
	WClientID                     func(ctx context.Context) *redis.IntCmd
	WClientInfo                   func(ctx context.Context) *redis.ClientInfoCmd
	WClientKill                   func(ctx context.Context, ipPort string) *redis.StatusCmd
	WClientKillByFilter           func(ctx context.Context, keys ...string) *redis.IntCmd
	WClientList                   func(ctx context.Context) *redis.StringCmd
	WClientPause                  func(ctx context.Context, dur time.Duration) *redis.BoolCmd
	WClientSetInfo                func(ctx context.Context, info redis.LibraryInfo) *redis.StatusCmd
	WClientSetName                func(ctx context.Context, name string) *redis.BoolCmd
	WClientUnblock                func(ctx context.Context, id int64) *redis.IntCmd
	WClientUnblockWithError       func(ctx context.Context, id int64) *redis.IntCmd
	WClientUnpause                func(ctx context.Context) *redis.BoolCmd
	WClusterAddSlots              func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterAddSlotsRange         func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterCountFailureReports   func(ctx context.Context, nodeID string) *redis.IntCmd
	WClusterCountKeysInSlot       func(ctx context.Context, slot int) *redis.IntCmd
	WClusterDelSlots              func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterDelSlotsRange         func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterFailover              func(ctx context.Context) *redis.StatusCmd
	WClusterForget                func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterGetKeysInSlot         func(ctx context.Context, slot int, count int) *redis.StringSliceCmd
	WClusterInfo                  func(ctx context.Context) *redis.StringCmd
	WClusterKeySlot               func(ctx context.Context, key string) *redis.IntCmd
	WClusterLinks                 func(ctx context.Context) *redis.ClusterLinksCmd
	WClusterMeet                  func(ctx context.Context, host string, port string) *redis.StatusCmd
	WClusterMyShardID             func(ctx context.Context) *redis.StringCmd
	WClusterNodes                 func(ctx context.Context) *redis.StringCmd
	WClusterReplicate             func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterResetHard             func(ctx context.Context) *redis.StatusCmd
	WClusterResetSoft             func(ctx context.Context) *redis.StatusCmd
	WClusterSaveConfig            func(ctx context.Context) *redis.StatusCmd
	WClusterShards                func(ctx context.Context) *redis.ClusterShardsCmd
	WClusterSlaves                func(ctx context.Context, nodeID string) *redis.StringSliceCmd
	WClusterSlots                 func(ctx context.Context) *redis.ClusterSlotsCmd
	WCommand                      func(ctx context.Context) *redis.CommandsInfoCmd
	WCommandGetKeys               func(ctx context.Context, commands ...interface{}) *redis.StringSliceCmd
	WCommandGetKeysAndFlags       func(ctx context.Context, commands ...interface{}) *redis.KeyFlagsCmd
	WCommandList                  func(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd
	WConfigGet                    func(ctx context.Context, parameter string) *redis.MapStringStringCmd
	WConfigResetStat              func(ctx context.Context) *redis.StatusCmd
	WConfigRewrite                func(ctx context.Context) *redis.StatusCmd
	WConfigSet                    func(ctx context.Context, parameter string, value string) *redis.StatusCmd
	WCopy                         func(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd
	WDBSize                       func(ctx context.Context) *redis.IntCmd
	WDebugObject                  func(ctx context.Context, key string) *redis.StringCmd
	WDecr                         func(ctx context.Context, key string) *redis.IntCmd
	WDecrBy                       func(ctx context.Context, key string, decrement int64) *redis.IntCmd
	WDel                          func(ctx context.Context, keys ...string) *redis.IntCmd
	WDiscard                      func()
	WDo                           func(ctx context.Context, args ...interface{}) *redis.Cmd
	WDump                         func(ctx context.Context, key string) *redis.StringCmd
	WEcho                         func(ctx context.Context, message interface{}) *redis.StringCmd
	WEval                         func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalRO                       func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalSha                      func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WEvalShaRO                    func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WExec                         func(ctx context.Context) ([]redis.Cmder, error)
	WExists                       func(ctx context.Context, keys ...string) *redis.IntCmd
	WExpire                       func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireAt                     func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WExpireGT                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireLT                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireNX                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireTime                   func(ctx context.Context, key string) *redis.DurationCmd
	WExpireXX                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WFCall                        func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRO                      func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRo                      func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFTAggregate                  func(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd
	WFTAggregateWithArgs          func(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd
	WFTAliasAdd                   func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAliasDel                   func(ctx context.Context, alias string) *redis.StatusCmd
	WFTAliasUpdate                func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAlter                      func(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd
	WFTConfigGet                  func(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd
	WFTConfigSet                  func(ctx context.Context, option string, value interface{}) *redis.StatusCmd
	WFTCreate                     func(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd
	WFTCursorDel                  func(ctx context.Context, index string, cursorId int) *redis.StatusCmd
	WFTCursorRead                 func(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd
	WFTDictAdd                    func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDel                    func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDump                   func(ctx context.Context, dict string) *redis.StringSliceCmd
	WFTDropIndex                  func(ctx context.Context, index string) *redis.StatusCmd
	WFTDropIndexWithArgs          func(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd
	WFTExplain                    func(ctx context.Context, index string, query string) *redis.StringCmd
	WFTExplainWithArgs            func(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd
	WFTInfo                       func(ctx context.Context, index string) *redis.FTInfoCmd
	WFTSearch                     func(ctx context.Context, index string, query string) *redis.FTSearchCmd
	WFTSearchWithArgs             func(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd
	WFTSpellCheck                 func(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd
	WFTSpellCheckWithArgs         func(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd
	WFTSynDump                    func(ctx context.Context, index string) *redis.FTSynDumpCmd
	WFTSynUpdate                  func(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd
	WFTSynUpdateWithArgs          func(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd
	WFTTagVals                    func(ctx context.Context, index string, field string) *redis.StringSliceCmd
	WFT_List                      func(ctx context.Context) *redis.StringSliceCmd
	WFlushAll                     func(ctx context.Context) *redis.StatusCmd
	WFlushAllAsync                func(ctx context.Context) *redis.StatusCmd
	WFlushDB                      func(ctx context.Context) *redis.StatusCmd
	WFlushDBAsync                 func(ctx context.Context) *redis.StatusCmd
	WFunctionDelete               func(ctx context.Context, libName string) *redis.StringCmd
	WFunctionDump                 func(ctx context.Context) *redis.StringCmd
	WFunctionFlush                func(ctx context.Context) *redis.StringCmd
	WFunctionFlushAsync           func(ctx context.Context) *redis.StringCmd
	WFunctionKill                 func(ctx context.Context) *redis.StringCmd
	WFunctionList                 func(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd
	WFunctionLoad                 func(ctx context.Context, code string) *redis.StringCmd
	WFunctionLoadReplace          func(ctx context.Context, code string) *redis.StringCmd
	WFunctionRestore              func(ctx context.Context, libDump string) *redis.StringCmd
	WFunctionStats                func(ctx context.Context) *redis.FunctionStatsCmd
	WGeoAdd                       func(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd
	WGeoDist                      func(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd
	WGeoHash                      func(ctx context.Context, key string, members ...string) *redis.StringSliceCmd
	WGeoPos                       func(ctx context.Context, key string, members ...string) *redis.GeoPosCmd
	WGeoRadius                    func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMember            func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMemberStore       func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoRadiusStore               func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoSearch                    func(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd
	WGeoSearchLocation            func(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd
	WGeoSearchStore               func(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd
	WGet                          func(ctx context.Context, key string) *redis.StringCmd
	WGetBit                       func(ctx context.Context, key string, offset int64) *redis.IntCmd
	WGetDel                       func(ctx context.Context, key string) *redis.StringCmd
	WGetEx                        func(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd
	WGetRange                     func(ctx context.Context, key string, start int64, end int64) *redis.StringCmd
	WGetSet                       func(ctx context.Context, key string, value interface{}) *redis.StringCmd
	WHDel                         func(ctx context.Context, key string, fields ...string) *redis.IntCmd
	WHExists                      func(ctx context.Context, key string, field string) *redis.BoolCmd
	WHExpire                      func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHExpireAt                    func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHExpireAtWithArgs            func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHExpireTime                  func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHExpireWithArgs              func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHGet                         func(ctx context.Context, key string, field string) *redis.StringCmd
	WHGetAll                      func(ctx context.Context, key string) *redis.MapStringStringCmd
	WHIncrBy                      func(ctx context.Context, key string, field string, incr int64) *redis.IntCmd
	WHIncrByFloat                 func(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd
	WHKeys                        func(ctx context.Context, key string) *redis.StringSliceCmd
	WHLen                         func(ctx context.Context, key string) *redis.IntCmd
	WHMGet                        func(ctx context.Context, key string, fields ...string) *redis.SliceCmd
	WHMSet                        func(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd
	WHPExpire                     func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHPExpireAt                   func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHPExpireAtWithArgs           func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPExpireTime                 func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPExpireWithArgs             func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPTTL                        func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPersist                     func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHRandField                   func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WHRandFieldWithValues         func(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd
	WHScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHScanNoValues                func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHSet                         func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WHSetNX                       func(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd
	WHTTL                         func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHVals                        func(ctx context.Context, key string) *redis.StringSliceCmd
	WHello                        func(ctx context.Context, ver int, username string, password string, clientName string) *redis.MapStringInterfaceCmd
	WIncr                         func(ctx context.Context, key string) *redis.IntCmd
	WIncrBy                       func(ctx context.Context, key string, value int64) *redis.IntCmd
	WIncrByFloat                  func(ctx context.Context, key string, value float64) *redis.FloatCmd
	WInfo                         func(ctx context.Context, section ...string) *redis.StringCmd
	WJSONArrAppend                func(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd
	WJSONArrIndex                 func(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd
	WJSONArrIndexWithArgs         func(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd
	WJSONArrInsert                func(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd
	WJSONArrLen                   func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrPop                   func(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd
	WJSONArrTrim                  func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrTrimWithArgs          func(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd
	WJSONClear                    func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDebugMemory              func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDel                      func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONForget                   func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONGet                      func(ctx context.Context, key string, paths ...string) *redis.JSONCmd
	WJSONGetWithArgs              func(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd
	WJSONMGet                     func(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd
	WJSONMSet                     func(ctx context.Context, params ...interface{}) *redis.StatusCmd
	WJSONMSetArgs                 func(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd
	WJSONMerge                    func(ctx context.Context, key string, path string, value string) *redis.StatusCmd
	WJSONNumIncrBy                func(ctx context.Context, key string, path string, value float64) *redis.JSONCmd
	WJSONObjKeys                  func(ctx context.Context, key string, path string) *redis.SliceCmd
	WJSONObjLen                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONSet                      func(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd
	WJSONSetMode                  func(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd
	WJSONStrAppend                func(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd
	WJSONStrLen                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONToggle                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONType                     func(ctx context.Context, key string, path string) *redis.JSONSliceCmd
	WKeys                         func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WLCS                          func(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd
	WLIndex                       func(ctx context.Context, key string, index int64) *redis.StringCmd
	WLInsert                      func(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertAfter                 func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertBefore                func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLLen                         func(ctx context.Context, key string) *redis.IntCmd
	WLMPop                        func(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WLMove                        func(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd
	WLPop                         func(ctx context.Context, key string) *redis.StringCmd
	WLPopCount                    func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WLPos                         func(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd
	WLPosCount                    func(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd
	WLPush                        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLPushX                       func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLRange                       func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WLRem                         func(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd
	WLSet                         func(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd
	WLTrim                        func(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd
	WLastSave                     func(ctx context.Context) *redis.IntCmd
	WLen                          func() int
	WMGet                         func(ctx context.Context, keys ...string) *redis.SliceCmd
	WMSet                         func(ctx context.Context, values ...interface{}) *redis.StatusCmd
	WMSetNX                       func(ctx context.Context, values ...interface{}) *redis.BoolCmd
	WMemoryUsage                  func(ctx context.Context, key string, samples ...int) *redis.IntCmd
	WMigrate                      func(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd
	WModuleLoadex                 func(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd
	WMove                         func(ctx context.Context, key string, db int) *redis.BoolCmd
	WObjectEncoding               func(ctx context.Context, key string) *redis.StringCmd
	WObjectFreq                   func(ctx context.Context, key string) *redis.IntCmd
	WObjectIdleTime               func(ctx context.Context, key string) *redis.DurationCmd
	WObjectRefCount               func(ctx context.Context, key string) *redis.IntCmd
	WPExpire                      func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WPExpireAt                    func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WPExpireTime                  func(ctx context.Context, key string) *redis.DurationCmd
	WPFAdd                        func(ctx context.Context, key string, els ...interface{}) *redis.IntCmd
	WPFCount                      func(ctx context.Context, keys ...string) *redis.IntCmd
	WPFMerge                      func(ctx context.Context, dest string, keys ...string) *redis.StatusCmd
	WPTTL                         func(ctx context.Context, key string) *redis.DurationCmd
	WPersist                      func(ctx context.Context, key string) *redis.BoolCmd
	WPing                         func(ctx context.Context) *redis.StatusCmd
	WPipeline                     func() redis.Pipeliner
	WPipelined                    func(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WProcess                      func(ctx context.Context, cmd redis.Cmder) error
	WPubSubChannels               func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubNumPat                 func(ctx context.Context) *redis.IntCmd
	WPubSubNumSub                 func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPubSubShardChannels          func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubShardNumSub            func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPublish                      func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
	WQuit                         func(ctx context.Context) *redis.StatusCmd
	WRPop                         func(ctx context.Context, key string) *redis.StringCmd
	WRPopCount                    func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WRPopLPush                    func(ctx context.Context, source string, destination string) *redis.StringCmd
	WRPush                        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WRPushX                       func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WRandomKey                    func(ctx context.Context) *redis.StringCmd
	WReadOnly                     func(ctx context.Context) *redis.StatusCmd
	WReadWrite                    func(ctx context.Context) *redis.StatusCmd
	WRename                       func(ctx context.Context, key string, newkey string) *redis.StatusCmd
	WRenameNX                     func(ctx context.Context, key string, newkey string) *redis.BoolCmd
	WRestore                      func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WRestoreReplace               func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WSAdd                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSCard                        func(ctx context.Context, key string) *redis.IntCmd
	WSDiff                        func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSDiffStore                   func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSInter                       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSInterCard                   func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WSInterStore                  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSIsMember                    func(ctx context.Context, key string, member interface{}) *redis.BoolCmd
	WSMIsMember                   func(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd
	WSMembers                     func(ctx context.Context, key string) *redis.StringSliceCmd
	WSMembersMap                  func(ctx context.Context, key string) *redis.StringStructMapCmd
	WSMove                        func(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd
	WSPop                         func(ctx context.Context, key string) *redis.StringCmd
	WSPopN                        func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSPublish                     func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
	WSRandMember                  func(ctx context.Context, key string) *redis.StringCmd
	WSRandMemberN                 func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSRem                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WSUnion                       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSUnionStore                  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSave                         func(ctx context.Context) *redis.StatusCmd
	WScan                         func(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd
	WScanType                     func(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd
	WScriptExists                 func(ctx context.Context, hashes ...string) *redis.BoolSliceCmd
	WScriptFlush                  func(ctx context.Context) *redis.StatusCmd
	WScriptKill                   func(ctx context.Context) *redis.StatusCmd
	WScriptLoad                   func(ctx context.Context, script string) *redis.StringCmd
	WSelect                       func(ctx context.Context, index int) *redis.StatusCmd
	WSet                          func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetArgs                      func(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd
	WSetBit                       func(ctx context.Context, key string, offset int64, value int) *redis.IntCmd
	WSetEx                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetNX                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WSetRange                     func(ctx context.Context, key string, offset int64, value string) *redis.IntCmd
	WSetXX                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WShutdown                     func(ctx context.Context) *redis.StatusCmd
	WShutdownNoSave               func(ctx context.Context) *redis.StatusCmd
	WShutdownSave                 func(ctx context.Context) *redis.StatusCmd
	WSlaveOf                      func(ctx context.Context, host string, port string) *redis.StatusCmd
	WSlowLogGet                   func(ctx context.Context, num int64) *redis.SlowLogCmd
	WSort                         func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortInterfaces               func(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd
	WSortRO                       func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortStore                    func(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd
	WStrLen                       func(ctx context.Context, key string) *redis.IntCmd
	WSwapDB                       func(ctx context.Context, index1 int, index2 int) *redis.StatusCmd
	WTDigestAdd                   func(ctx context.Context, key string, elements ...float64) *redis.StatusCmd
	WTDigestByRank                func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestByRevRank             func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestCDF                   func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestCreate                func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestCreateWithCompression func(ctx context.Context, key string, compression int64) *redis.StatusCmd
	WTDigestInfo                  func(ctx context.Context, key string) *redis.TDigestInfoCmd
	WTDigestMax                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestMerge                 func(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd
	WTDigestMin                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestQuantile              func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestRank                  func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestReset                 func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestRevRank               func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestTrimmedMean           func(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd
	WTFCall                       func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNC                  func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNCArgs              func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFCallArgs                   func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFunctionDelete              func(ctx context.Context, libName string) *redis.StatusCmd
	WTFunctionList                func(ctx context.Context) *redis.MapStringInterfaceSliceCmd
	WTFunctionListArgs            func(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd
	WTFunctionLoad                func(ctx context.Context, lib string) *redis.StatusCmd
	WTFunctionLoadArgs            func(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd
	WTSAdd                        func(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd
	WTSAddWithArgs                func(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd
	WTSAlter                      func(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd
	WTSCreate                     func(ctx context.Context, key string) *redis.StatusCmd
	WTSCreateRule                 func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd
	WTSCreateRuleWithArgs         func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd
	WTSCreateWithArgs             func(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd
	WTSDecrBy                     func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSDecrByWithArgs             func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSDel                        func(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd
	WTSDeleteRule                 func(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd
	WTSGet                        func(ctx context.Context, key string) *redis.TSTimestampValueCmd
	WTSGetWithArgs                func(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd
	WTSIncrBy                     func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSIncrByWithArgs             func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSInfo                       func(ctx context.Context, key string) *redis.MapStringInterfaceCmd
	WTSInfoWithArgs               func(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd
	WTSMAdd                       func(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd
	WTSMGet                       func(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd
	WTSMGetWithArgs               func(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRange                     func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRangeWithArgs             func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRevRange                  func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRevRangeWithArgs          func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSQueryIndex                 func(ctx context.Context, filterExpr []string) *redis.StringSliceCmd
	WTSRange                      func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRangeWithArgs              func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd
	WTSRevRange                   func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRevRangeWithArgs           func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd
	WTTL                          func(ctx context.Context, key string) *redis.DurationCmd
	WTime                         func(ctx context.Context) *redis.TimeCmd
	WTopKAdd                      func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKCount                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WTopKIncrBy                   func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKInfo                     func(ctx context.Context, key string) *redis.TopKInfoCmd
	WTopKList                     func(ctx context.Context, key string) *redis.StringSliceCmd
	WTopKListWithCount            func(ctx context.Context, key string) *redis.MapStringIntCmd
	WTopKQuery                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WTopKReserve                  func(ctx context.Context, key string, k int64) *redis.StatusCmd
	WTopKReserveWithOptions       func(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd
	WTouch                        func(ctx context.Context, keys ...string) *redis.IntCmd
	WTxPipeline                   func() redis.Pipeliner
	WTxPipelined                  func(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WType                         func(ctx context.Context, key string) *redis.StatusCmd
	WUnlink                       func(ctx context.Context, keys ...string) *redis.IntCmd
	WXAck                         func(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd
	WXAdd                         func(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd
	WXAutoClaim                   func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd
	WXAutoClaimJustID             func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd
	WXClaim                       func(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd
	WXClaimJustID                 func(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd
	WXDel                         func(ctx context.Context, stream string, ids ...string) *redis.IntCmd
	WXGroupCreate                 func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupCreateConsumer         func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupCreateMkStream         func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupDelConsumer            func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupDestroy                func(ctx context.Context, stream string, group string) *redis.IntCmd
	WXGroupSetID                  func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXInfoConsumers               func(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd
	WXInfoGroups                  func(ctx context.Context, key string) *redis.XInfoGroupsCmd
	WXInfoStream                  func(ctx context.Context, key string) *redis.XInfoStreamCmd
	WXInfoStreamFull              func(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd
	WXLen                         func(ctx context.Context, stream string) *redis.IntCmd
	WXPending                     func(ctx context.Context, stream string, group string) *redis.XPendingCmd
	WXPendingExt                  func(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd
	WXRange                       func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRangeN                      func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXRead                        func(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd
	WXReadGroup                   func(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd
	WXReadStreams                 func(ctx context.Context, streams ...string) *redis.XStreamSliceCmd
	WXRevRange                    func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRevRangeN                   func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXTrimMaxLen                  func(ctx context.Context, key string, maxLen int64) *redis.IntCmd
	WXTrimMaxLenApprox            func(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd
	WXTrimMinID                   func(ctx context.Context, key string, minID string) *redis.IntCmd
	WXTrimMinIDApprox             func(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd
	WZAdd                         func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddArgs                     func(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd
	WZAddArgsIncr                 func(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd
	WZAddGT                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddLT                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddNX                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddXX                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZCard                        func(ctx context.Context, key string) *redis.IntCmd
	WZCount                       func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZDiff                        func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WZDiffStore                   func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WZDiffWithScores              func(ctx context.Context, keys ...string) *redis.ZSliceCmd
	WZIncrBy                      func(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd
	WZInter                       func(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd
	WZInterCard                   func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WZInterStore                  func(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd
	WZInterWithScores             func(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd
	WZLexCount                    func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZMPop                        func(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WZMScore                      func(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd
	WZPopMax                      func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZPopMin                      func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZRandMember                  func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WZRandMemberWithScores        func(ctx context.Context, key string, count int) *redis.ZSliceCmd
	WZRange                       func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRangeArgs                   func(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd
	WZRangeArgsWithScores         func(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd
	WZRangeByLex                  func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScore                func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScoreWithScores      func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRangeStore                  func(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd
	WZRangeWithScores             func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRank                        func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRankWithScore               func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZRem                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WZRemRangeByLex               func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRemRangeByRank              func(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd
	WZRemRangeByScore             func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRevRange                    func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRevRangeByLex               func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScore             func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScoreWithScores   func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRevRangeWithScores          func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRevRank                     func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRevRankWithScore            func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WZScore                       func(ctx context.Context, key string, member string) *redis.FloatCmd
	WZUnion                       func(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd
	WZUnionStore                  func(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd
	WZUnionWithScores             func(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd
}

func (W _github_com_redis_go_redis_v9_Pipeliner) ACLDryRun(ctx context.Context, username string, command ...interface{}) *redis.StringCmd {
	return W.WACLDryRun(ctx, username, command...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ACLLog(ctx context.Context, count int64) *redis.ACLLogCmd {
	return W.WACLLog(ctx, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ACLLogReset(ctx context.Context) *redis.StatusCmd {
	return W.WACLLogReset(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Append(ctx context.Context, key string, value string) *redis.IntCmd {
	return W.WAppend(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Auth(ctx context.Context, password string) *redis.StatusCmd {
	return W.WAuth(ctx, password)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) AuthACL(ctx context.Context, username string, password string) *redis.StatusCmd {
	return W.WAuthACL(ctx, username, password)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WBFCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFInfo(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFInfoArg(ctx context.Context, key string, option string) *redis.BFInfoCmd {
	return W.WBFInfoArg(ctx, key, option)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFInfoCapacity(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoCapacity(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFInfoExpansion(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoExpansion(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFInfoFilters(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoFilters(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFInfoItems(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoItems(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFInfoSize(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoSize(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFInsert(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WBFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFMAdd(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserve(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WBFReserveExpansion(ctx, key, errorRate, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserveNonScaling(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFReserveWithArgs(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd {
	return W.WBFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WBFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WBLMPop(ctx, timeout, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BLMove(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd {
	return W.WBLMove(ctx, source, destination, srcpos, destpos, timeout)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBLPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBRPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd {
	return W.WBRPopLPush(ctx, source, destination, timeout)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WBZMPop(ctx, timeout, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMax(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMin(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BgRewriteAOF(ctx context.Context) *redis.StatusCmd {
	return W.WBgRewriteAOF(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BgSave(ctx context.Context) *redis.StatusCmd {
	return W.WBgSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd {
	return W.WBitCount(ctx, key, bitCount)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BitField(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitField(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BitFieldRO(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitFieldRO(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BitOpAnd(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpAnd(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BitOpNot(ctx context.Context, destKey string, key string) *redis.IntCmd {
	return W.WBitOpNot(ctx, destKey, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BitOpOr(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpOr(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BitOpXor(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpXor(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd {
	return W.WBitPos(ctx, key, bit, pos...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) BitPosSpan(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd {
	return W.WBitPosSpan(ctx, key, bit, start, end, span)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFAddNX(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAddNX(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFCount(ctx context.Context, key string, element interface{}) *redis.IntCmd {
	return W.WCFCount(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFDel(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFDel(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFInfo(ctx context.Context, key string) *redis.CFInfoCmd {
	return W.WCFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFInsert(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFInsertNX(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCFInsertNX(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WCFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFReserve(ctx context.Context, key string, capacity int64) *redis.StatusCmd {
	return W.WCFReserve(ctx, key, capacity)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFReserveBucketSize(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd {
	return W.WCFReserveBucketSize(ctx, key, capacity, bucketsize)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFReserveExpansion(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WCFReserveExpansion(ctx, key, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFReserveMaxIterations(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd {
	return W.WCFReserveMaxIterations(ctx, key, capacity, maxiterations)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFReserveWithArgs(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd {
	return W.WCFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WCFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CMSIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CMSInfo(ctx context.Context, key string) *redis.CMSInfoCmd {
	return W.WCMSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CMSInitByDim(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd {
	return W.WCMSInitByDim(ctx, key, width, height)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CMSInitByProb(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd {
	return W.WCMSInitByProb(ctx, key, errorRate, probability)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd {
	return W.WCMSMerge(ctx, destKey, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd {
	return W.WCMSMergeWithWeight(ctx, destKey, sourceKeys)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CMSQuery(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientGetName(ctx context.Context) *redis.StringCmd {
	return W.WClientGetName(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientID(ctx context.Context) *redis.IntCmd {
	return W.WClientID(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientInfo(ctx context.Context) *redis.ClientInfoCmd {
	return W.WClientInfo(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientKill(ctx context.Context, ipPort string) *redis.StatusCmd {
	return W.WClientKill(ctx, ipPort)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientKillByFilter(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WClientKillByFilter(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientList(ctx context.Context) *redis.StringCmd {
	return W.WClientList(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientPause(ctx context.Context, dur time.Duration) *redis.BoolCmd {
	return W.WClientPause(ctx, dur)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientSetInfo(ctx context.Context, info redis.LibraryInfo) *redis.StatusCmd {
	return W.WClientSetInfo(ctx, info)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientSetName(ctx context.Context, name string) *redis.BoolCmd {
	return W.WClientSetName(ctx, name)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientUnblock(ctx context.Context, id int64) *redis.IntCmd {
	return W.WClientUnblock(ctx, id)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientUnblockWithError(ctx context.Context, id int64) *redis.IntCmd {
	return W.WClientUnblockWithError(ctx, id)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClientUnpause(ctx context.Context) *redis.BoolCmd {
	return W.WClientUnpause(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterAddSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterAddSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterAddSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterAddSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterCountFailureReports(ctx context.Context, nodeID string) *redis.IntCmd {
	return W.WClusterCountFailureReports(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterCountKeysInSlot(ctx context.Context, slot int) *redis.IntCmd {
	return W.WClusterCountKeysInSlot(ctx, slot)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterDelSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterDelSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterDelSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterDelSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterFailover(ctx context.Context) *redis.StatusCmd {
	return W.WClusterFailover(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterForget(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterForget(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) *redis.StringSliceCmd {
	return W.WClusterGetKeysInSlot(ctx, slot, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterInfo(ctx context.Context) *redis.StringCmd {
	return W.WClusterInfo(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterKeySlot(ctx context.Context, key string) *redis.IntCmd {
	return W.WClusterKeySlot(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterLinks(ctx context.Context) *redis.ClusterLinksCmd {
	return W.WClusterLinks(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterMeet(ctx context.Context, host string, port string) *redis.StatusCmd {
	return W.WClusterMeet(ctx, host, port)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterMyShardID(ctx context.Context) *redis.StringCmd {
	return W.WClusterMyShardID(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterNodes(ctx context.Context) *redis.StringCmd {
	return W.WClusterNodes(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterReplicate(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterReplicate(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterResetHard(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetHard(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterResetSoft(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetSoft(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterSaveConfig(ctx context.Context) *redis.StatusCmd {
	return W.WClusterSaveConfig(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterShards(ctx context.Context) *redis.ClusterShardsCmd {
	return W.WClusterShards(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterSlaves(ctx context.Context, nodeID string) *redis.StringSliceCmd {
	return W.WClusterSlaves(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ClusterSlots(ctx context.Context) *redis.ClusterSlotsCmd {
	return W.WClusterSlots(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Command(ctx context.Context) *redis.CommandsInfoCmd {
	return W.WCommand(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CommandGetKeys(ctx context.Context, commands ...interface{}) *redis.StringSliceCmd {
	return W.WCommandGetKeys(ctx, commands...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CommandGetKeysAndFlags(ctx context.Context, commands ...interface{}) *redis.KeyFlagsCmd {
	return W.WCommandGetKeysAndFlags(ctx, commands...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) CommandList(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd {
	return W.WCommandList(ctx, filter)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ConfigGet(ctx context.Context, parameter string) *redis.MapStringStringCmd {
	return W.WConfigGet(ctx, parameter)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ConfigResetStat(ctx context.Context) *redis.StatusCmd {
	return W.WConfigResetStat(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ConfigRewrite(ctx context.Context) *redis.StatusCmd {
	return W.WConfigRewrite(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ConfigSet(ctx context.Context, parameter string, value string) *redis.StatusCmd {
	return W.WConfigSet(ctx, parameter, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd {
	return W.WCopy(ctx, sourceKey, destKey, db, replace)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) DBSize(ctx context.Context) *redis.IntCmd {
	return W.WDBSize(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) DebugObject(ctx context.Context, key string) *redis.StringCmd {
	return W.WDebugObject(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Decr(ctx context.Context, key string) *redis.IntCmd {
	return W.WDecr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) DecrBy(ctx context.Context, key string, decrement int64) *redis.IntCmd {
	return W.WDecrBy(ctx, key, decrement)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WDel(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Discard() {
	W.WDiscard()
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Do(ctx context.Context, args ...interface{}) *redis.Cmd {
	return W.WDo(ctx, args...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Dump(ctx context.Context, key string) *redis.StringCmd {
	return W.WDump(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Echo(ctx context.Context, message interface{}) *redis.StringCmd {
	return W.WEcho(ctx, message)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEval(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalRO(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalSha(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalShaRO(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Exec(ctx context.Context) ([]redis.Cmder, error) {
	return W.WExec(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Exists(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WExists(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Expire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ExpireGT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireGT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ExpireLT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireLT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ExpireNX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireNX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ExpireXX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireXX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FCall(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCall(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FCallRO(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRO(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FCallRo(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRo(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTAggregate(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd {
	return W.WFTAggregate(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTAggregateWithArgs(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd {
	return W.WFTAggregateWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTAliasAdd(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasAdd(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTAliasDel(ctx context.Context, alias string) *redis.StatusCmd {
	return W.WFTAliasDel(ctx, alias)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTAliasUpdate(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasUpdate(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd {
	return W.WFTAlter(ctx, index, skipInitialScan, definition)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTConfigGet(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd {
	return W.WFTConfigGet(ctx, option)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTConfigSet(ctx context.Context, option string, value interface{}) *redis.StatusCmd {
	return W.WFTConfigSet(ctx, option, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTCreate(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd {
	return W.WFTCreate(ctx, index, options, schema...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTCursorDel(ctx context.Context, index string, cursorId int) *redis.StatusCmd {
	return W.WFTCursorDel(ctx, index, cursorId)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTCursorRead(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd {
	return W.WFTCursorRead(ctx, index, cursorId, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTDictAdd(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictAdd(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTDictDel(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictDel(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTDictDump(ctx context.Context, dict string) *redis.StringSliceCmd {
	return W.WFTDictDump(ctx, dict)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTDropIndex(ctx context.Context, index string) *redis.StatusCmd {
	return W.WFTDropIndex(ctx, index)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTDropIndexWithArgs(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd {
	return W.WFTDropIndexWithArgs(ctx, index, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTExplain(ctx context.Context, index string, query string) *redis.StringCmd {
	return W.WFTExplain(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTExplainWithArgs(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd {
	return W.WFTExplainWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTInfo(ctx context.Context, index string) *redis.FTInfoCmd {
	return W.WFTInfo(ctx, index)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTSearch(ctx context.Context, index string, query string) *redis.FTSearchCmd {
	return W.WFTSearch(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTSearchWithArgs(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd {
	return W.WFTSearchWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTSpellCheck(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheck(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTSpellCheckWithArgs(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheckWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTSynDump(ctx context.Context, index string) *redis.FTSynDumpCmd {
	return W.WFTSynDump(ctx, index)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTSynUpdate(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdate(ctx, index, synGroupId, terms)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdateWithArgs(ctx, index, synGroupId, options, terms)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FTTagVals(ctx context.Context, index string, field string) *redis.StringSliceCmd {
	return W.WFTTagVals(ctx, index, field)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FT_List(ctx context.Context) *redis.StringSliceCmd {
	return W.WFT_List(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FlushAll(ctx context.Context) *redis.StatusCmd {
	return W.WFlushAll(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FlushAllAsync(ctx context.Context) *redis.StatusCmd {
	return W.WFlushAllAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FlushDB(ctx context.Context) *redis.StatusCmd {
	return W.WFlushDB(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FlushDBAsync(ctx context.Context) *redis.StatusCmd {
	return W.WFlushDBAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionDelete(ctx context.Context, libName string) *redis.StringCmd {
	return W.WFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionDump(ctx context.Context) *redis.StringCmd {
	return W.WFunctionDump(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionFlush(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionFlushAsync(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlushAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionKill(ctx context.Context) *redis.StringCmd {
	return W.WFunctionKill(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionList(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd {
	return W.WFunctionList(ctx, q)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionLoad(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoad(ctx, code)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionLoadReplace(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoadReplace(ctx, code)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionRestore(ctx context.Context, libDump string) *redis.StringCmd {
	return W.WFunctionRestore(ctx, libDump)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) FunctionStats(ctx context.Context) *redis.FunctionStatsCmd {
	return W.WFunctionStats(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd {
	return W.WGeoAdd(ctx, key, geoLocation...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	return W.WGeoDist(ctx, key, member1, member2, unit)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoHash(ctx context.Context, key string, members ...string) *redis.StringSliceCmd {
	return W.WGeoHash(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoPos(ctx context.Context, key string, members ...string) *redis.GeoPosCmd {
	return W.WGeoPos(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadius(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoRadiusByMember(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadiusByMember(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusByMemberStore(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusStore(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd {
	return W.WGeoSearch(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd {
	return W.WGeoSearchLocation(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GeoSearchStore(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd {
	return W.WGeoSearchStore(ctx, key, store, q)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Get(ctx context.Context, key string) *redis.StringCmd {
	return W.WGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GetBit(ctx context.Context, key string, offset int64) *redis.IntCmd {
	return W.WGetBit(ctx, key, offset)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GetDel(ctx context.Context, key string) *redis.StringCmd {
	return W.WGetDel(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GetEx(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd {
	return W.WGetEx(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GetRange(ctx context.Context, key string, start int64, end int64) *redis.StringCmd {
	return W.WGetRange(ctx, key, start, end)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) GetSet(ctx context.Context, key string, value interface{}) *redis.StringCmd {
	return W.WGetSet(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HDel(ctx context.Context, key string, fields ...string) *redis.IntCmd {
	return W.WHDel(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HExists(ctx context.Context, key string, field string) *redis.BoolCmd {
	return W.WHExists(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HGet(ctx context.Context, key string, field string) *redis.StringCmd {
	return W.WHGet(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HGetAll(ctx context.Context, key string) *redis.MapStringStringCmd {
	return W.WHGetAll(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HIncrBy(ctx context.Context, key string, field string, incr int64) *redis.IntCmd {
	return W.WHIncrBy(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HIncrByFloat(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd {
	return W.WHIncrByFloat(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HKeys(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHKeys(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WHLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HMGet(ctx context.Context, key string, fields ...string) *redis.SliceCmd {
	return W.WHMGet(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HMSet(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd {
	return W.WHMSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HPExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HPTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HPersist(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPersist(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HRandField(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WHRandField(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HRandFieldWithValues(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd {
	return W.WHRandFieldWithValues(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScanNoValues(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HSet(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WHSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HSetNX(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSetNX(ctx, key, field, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) HVals(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHVals(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Hello(ctx context.Context, ver int, username string, password string, clientName string) *redis.MapStringInterfaceCmd {
	return W.WHello(ctx, ver, username, password, clientName)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Incr(ctx context.Context, key string) *redis.IntCmd {
	return W.WIncr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) IncrBy(ctx context.Context, key string, value int64) *redis.IntCmd {
	return W.WIncrBy(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) IncrByFloat(ctx context.Context, key string, value float64) *redis.FloatCmd {
	return W.WIncrByFloat(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Info(ctx context.Context, section ...string) *redis.StringCmd {
	return W.WInfo(ctx, section...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONArrAppend(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrAppend(ctx, key, path, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONArrIndex(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndex(ctx, key, path, value...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONArrIndexWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndexWithArgs(ctx, key, path, options, value...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONArrInsert(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrInsert(ctx, key, path, index, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONArrLen(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONArrPop(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd {
	return W.WJSONArrPop(ctx, key, path, index)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONArrTrim(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrTrim(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONArrTrimWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd {
	return W.WJSONArrTrimWithArgs(ctx, key, path, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONClear(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONClear(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONDebugMemory(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDebugMemory(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONDel(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDel(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONForget(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONForget(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONGet(ctx context.Context, key string, paths ...string) *redis.JSONCmd {
	return W.WJSONGet(ctx, key, paths...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONGetWithArgs(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd {
	return W.WJSONGetWithArgs(ctx, key, options, paths...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONMGet(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd {
	return W.WJSONMGet(ctx, path, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONMSet(ctx context.Context, params ...interface{}) *redis.StatusCmd {
	return W.WJSONMSet(ctx, params...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONMSetArgs(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd {
	return W.WJSONMSetArgs(ctx, docs)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONMerge(ctx context.Context, key string, path string, value string) *redis.StatusCmd {
	return W.WJSONMerge(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONNumIncrBy(ctx context.Context, key string, path string, value float64) *redis.JSONCmd {
	return W.WJSONNumIncrBy(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONObjKeys(ctx context.Context, key string, path string) *redis.SliceCmd {
	return W.WJSONObjKeys(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONObjLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONObjLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONSet(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd {
	return W.WJSONSet(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONSetMode(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd {
	return W.WJSONSetMode(ctx, key, path, value, mode)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONStrAppend(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd {
	return W.WJSONStrAppend(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONStrLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONStrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONToggle(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONToggle(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) JSONType(ctx context.Context, key string, path string) *redis.JSONSliceCmd {
	return W.WJSONType(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Keys(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WKeys(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LCS(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd {
	return W.WLCS(ctx, q)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LIndex(ctx context.Context, key string, index int64) *redis.StringCmd {
	return W.WLIndex(ctx, key, index)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsert(ctx, key, op, pivot, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertAfter(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertBefore(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WLLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LMPop(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WLMPop(ctx, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd {
	return W.WLMove(ctx, source, destination, srcpos, destpos)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WLPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WLPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LPos(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd {
	return W.WLPos(ctx, key, value, args)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LPosCount(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd {
	return W.WLPosCount(ctx, key, value, count, args)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPushX(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WLRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LRem(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd {
	return W.WLRem(ctx, key, count, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LSet(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd {
	return W.WLSet(ctx, key, index, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LTrim(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd {
	return W.WLTrim(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) LastSave(ctx context.Context) *redis.IntCmd {
	return W.WLastSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Len() int {
	return W.WLen()
}
func (W _github_com_redis_go_redis_v9_Pipeliner) MGet(ctx context.Context, keys ...string) *redis.SliceCmd {
	return W.WMGet(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) MSet(ctx context.Context, values ...interface{}) *redis.StatusCmd {
	return W.WMSet(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) MSetNX(ctx context.Context, values ...interface{}) *redis.BoolCmd {
	return W.WMSetNX(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) MemoryUsage(ctx context.Context, key string, samples ...int) *redis.IntCmd {
	return W.WMemoryUsage(ctx, key, samples...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	return W.WMigrate(ctx, host, port, key, db, timeout)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ModuleLoadex(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd {
	return W.WModuleLoadex(ctx, conf)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Move(ctx context.Context, key string, db int) *redis.BoolCmd {
	return W.WMove(ctx, key, db)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ObjectEncoding(ctx context.Context, key string) *redis.StringCmd {
	return W.WObjectEncoding(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ObjectFreq(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectFreq(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ObjectIdleTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WObjectIdleTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ObjectRefCount(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectRefCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PExpire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WPExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WPExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PFAdd(ctx context.Context, key string, els ...interface{}) *redis.IntCmd {
	return W.WPFAdd(ctx, key, els...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PFCount(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WPFCount(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PFMerge(ctx context.Context, dest string, keys ...string) *redis.StatusCmd {
	return W.WPFMerge(ctx, dest, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PTTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Persist(ctx context.Context, key string) *redis.BoolCmd {
	return W.WPersist(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Ping(ctx context.Context) *redis.StatusCmd {
	return W.WPing(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Pipeline() redis.Pipeliner {
	return W.WPipeline()
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Pipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WPipelined(ctx, fn)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Process(ctx context.Context, cmd redis.Cmder) error {
	return W.WProcess(ctx, cmd)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PubSubChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PubSubNumPat(ctx context.Context) *redis.IntCmd {
	return W.WPubSubNumPat(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PubSubNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PubSubShardChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubShardChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) PubSubShardNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubShardNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Publish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WPublish(ctx, channel, message)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Quit(ctx context.Context) *redis.StatusCmd {
	return W.WQuit(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) RPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WRPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) RPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WRPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) RPopLPush(ctx context.Context, source string, destination string) *redis.StringCmd {
	return W.WRPopLPush(ctx, source, destination)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) RPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) RPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPushX(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) RandomKey(ctx context.Context) *redis.StringCmd {
	return W.WRandomKey(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ReadOnly(ctx context.Context) *redis.StatusCmd {
	return W.WReadOnly(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ReadWrite(ctx context.Context) *redis.StatusCmd {
	return W.WReadWrite(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Rename(ctx context.Context, key string, newkey string) *redis.StatusCmd {
	return W.WRename(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) RenameNX(ctx context.Context, key string, newkey string) *redis.BoolCmd {
	return W.WRenameNX(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Restore(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestore(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestoreReplace(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SAdd(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WSCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SInter(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSInter(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WSInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SInterStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSInterStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SIsMember(ctx context.Context, key string, member interface{}) *redis.BoolCmd {
	return W.WSIsMember(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SMIsMember(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd {
	return W.WSMIsMember(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SMembers(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WSMembers(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SMembersMap(ctx context.Context, key string) *redis.StringStructMapCmd {
	return W.WSMembersMap(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SMove(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd {
	return W.WSMove(ctx, source, destination, member)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WSPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SPopN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSPopN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SPublish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WSPublish(ctx, channel, message)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SRandMember(ctx context.Context, key string) *redis.StringCmd {
	return W.WSRandMember(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SRandMemberN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSRandMemberN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WSScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SUnion(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSUnion(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SUnionStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSUnionStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Save(ctx context.Context) *redis.StatusCmd {
	return W.WSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Scan(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WScan(ctx, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd {
	return W.WScanType(ctx, cursor, match, count, keyType)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ScriptExists(ctx context.Context, hashes ...string) *redis.BoolSliceCmd {
	return W.WScriptExists(ctx, hashes...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ScriptFlush(ctx context.Context) *redis.StatusCmd {
	return W.WScriptFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ScriptKill(ctx context.Context) *redis.StatusCmd {
	return W.WScriptKill(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	return W.WScriptLoad(ctx, script)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Select(ctx context.Context, index int) *redis.StatusCmd {
	return W.WSelect(ctx, index)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSet(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SetArgs(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd {
	return W.WSetArgs(ctx, key, value, a)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SetBit(ctx context.Context, key string, offset int64, value int) *redis.IntCmd {
	return W.WSetBit(ctx, key, offset, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SetEx(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSetEx(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetNX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SetRange(ctx context.Context, key string, offset int64, value string) *redis.IntCmd {
	return W.WSetRange(ctx, key, offset, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetXX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Shutdown(ctx context.Context) *redis.StatusCmd {
	return W.WShutdown(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ShutdownNoSave(ctx context.Context) *redis.StatusCmd {
	return W.WShutdownNoSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ShutdownSave(ctx context.Context) *redis.StatusCmd {
	return W.WShutdownSave(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SlaveOf(ctx context.Context, host string, port string) *redis.StatusCmd {
	return W.WSlaveOf(ctx, host, port)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SlowLogGet(ctx context.Context, num int64) *redis.SlowLogCmd {
	return W.WSlowLogGet(ctx, num)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Sort(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSort(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd {
	return W.WSortInterfaces(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SortRO(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSortRO(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SortStore(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd {
	return W.WSortStore(ctx, key, store, sort)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) StrLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WStrLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) SwapDB(ctx context.Context, index1 int, index2 int) *redis.StatusCmd {
	return W.WSwapDB(ctx, index1, index2)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestAdd(ctx context.Context, key string, elements ...float64) *redis.StatusCmd {
	return W.WTDigestAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestByRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRevRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestCDF(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestCDF(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *redis.StatusCmd {
	return W.WTDigestCreateWithCompression(ctx, key, compression)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestInfo(ctx context.Context, key string) *redis.TDigestInfoCmd {
	return W.WTDigestInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestMax(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMax(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestMerge(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd {
	return W.WTDigestMerge(ctx, destKey, options, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestMin(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMin(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestQuantile(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestQuantile(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestReset(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestReset(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestRevRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRevRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd {
	return W.WTDigestTrimmedMean(ctx, key, lowCutQuantile, highCutQuantile)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TFCall(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCall(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TFCallASYNC(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCallASYNC(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TFCallASYNCArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallASYNCArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TFCallArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TFunctionDelete(ctx context.Context, libName string) *redis.StatusCmd {
	return W.WTFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TFunctionList(ctx context.Context) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionList(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TFunctionListArgs(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionListArgs(ctx, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TFunctionLoad(ctx context.Context, lib string) *redis.StatusCmd {
	return W.WTFunctionLoad(ctx, lib)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TFunctionLoadArgs(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd {
	return W.WTFunctionLoadArgs(ctx, lib, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSAdd(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd {
	return W.WTSAdd(ctx, key, timestamp, value)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSAddWithArgs(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd {
	return W.WTSAddWithArgs(ctx, key, timestamp, value, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSAlter(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd {
	return W.WTSAlter(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTSCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSCreateRule(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd {
	return W.WTSCreateRule(ctx, sourceKey, destKey, aggregator, bucketDuration)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSCreateRuleWithArgs(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd {
	return W.WTSCreateRuleWithArgs(ctx, sourceKey, destKey, aggregator, bucketDuration, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSCreateWithArgs(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd {
	return W.WTSCreateWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSDecrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSDecrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSDecrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSDecrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSDel(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd {
	return W.WTSDel(ctx, Key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSDeleteRule(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd {
	return W.WTSDeleteRule(ctx, sourceKey, destKey)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSGet(ctx context.Context, key string) *redis.TSTimestampValueCmd {
	return W.WTSGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSGetWithArgs(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd {
	return W.WTSGetWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSIncrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSIncrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSIncrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSIncrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSInfo(ctx context.Context, key string) *redis.MapStringInterfaceCmd {
	return W.WTSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSInfoWithArgs(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd {
	return W.WTSInfoWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSMAdd(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd {
	return W.WTSMAdd(ctx, ktvSlices)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSMGet(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGet(ctx, filters)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSMGetWithArgs(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGetWithArgs(ctx, filters, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSMRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSMRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSMRevRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSMRevRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSQueryIndex(ctx context.Context, filterExpr []string) *redis.StringSliceCmd {
	return W.WTSQueryIndex(ctx, filterExpr)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSRevRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TSRevRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Time(ctx context.Context) *redis.TimeCmd {
	return W.WTime(ctx)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TopKAdd(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TopKCount(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WTopKCount(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TopKIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TopKInfo(ctx context.Context, key string) *redis.TopKInfoCmd {
	return W.WTopKInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TopKList(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WTopKList(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TopKListWithCount(ctx context.Context, key string) *redis.MapStringIntCmd {
	return W.WTopKListWithCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TopKQuery(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WTopKQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TopKReserve(ctx context.Context, key string, k int64) *redis.StatusCmd {
	return W.WTopKReserve(ctx, key, k)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TopKReserveWithOptions(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd {
	return W.WTopKReserveWithOptions(ctx, key, k, width, depth, decay)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Touch(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WTouch(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TxPipeline() redis.Pipeliner {
	return W.WTxPipeline()
}
func (W _github_com_redis_go_redis_v9_Pipeliner) TxPipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WTxPipelined(ctx, fn)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Type(ctx context.Context, key string) *redis.StatusCmd {
	return W.WType(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) Unlink(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WUnlink(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XAck(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd {
	return W.WXAck(ctx, stream, group, ids...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XAdd(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd {
	return W.WXAdd(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd {
	return W.WXAutoClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd {
	return W.WXAutoClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XClaim(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	return W.WXClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd {
	return W.WXClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XDel(ctx context.Context, stream string, ids ...string) *redis.IntCmd {
	return W.WXDel(ctx, stream, ids...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XGroupCreate(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreate(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupCreateConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreateMkStream(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupDelConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XGroupDestroy(ctx context.Context, stream string, group string) *redis.IntCmd {
	return W.WXGroupDestroy(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XGroupSetID(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupSetID(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XInfoConsumers(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd {
	return W.WXInfoConsumers(ctx, key, group)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XInfoGroups(ctx context.Context, key string) *redis.XInfoGroupsCmd {
	return W.WXInfoGroups(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XInfoStream(ctx context.Context, key string) *redis.XInfoStreamCmd {
	return W.WXInfoStream(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XInfoStreamFull(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd {
	return W.WXInfoStreamFull(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XLen(ctx context.Context, stream string) *redis.IntCmd {
	return W.WXLen(ctx, stream)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XPending(ctx context.Context, stream string, group string) *redis.XPendingCmd {
	return W.WXPending(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	return W.WXPendingExt(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XRead(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd {
	return W.WXRead(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	return W.WXReadGroup(ctx, a)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XReadStreams(ctx context.Context, streams ...string) *redis.XStreamSliceCmd {
	return W.WXReadStreams(ctx, streams...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XRevRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRevRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRevRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *redis.IntCmd {
	return W.WXTrimMaxLen(ctx, key, maxLen)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd {
	return W.WXTrimMaxLenApprox(ctx, key, maxLen, limit)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XTrimMinID(ctx context.Context, key string, minID string) *redis.IntCmd {
	return W.WXTrimMinID(ctx, key, minID)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd {
	return W.WXTrimMinIDApprox(ctx, key, minID, limit)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZAdd(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd {
	return W.WZAddArgs(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd {
	return W.WZAddArgsIncr(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZAddGT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddGT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZAddLT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddLT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZAddNX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddNX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZAddXX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddXX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WZCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WZDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WZDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZDiffWithScores(ctx context.Context, keys ...string) *redis.ZSliceCmd {
	return W.WZDiffWithScores(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZIncrBy(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd {
	return W.WZIncrBy(ctx, key, increment, member)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZInter(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd {
	return W.WZInter(ctx, store)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WZInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd {
	return W.WZInterStore(ctx, destination, store)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZInterWithScores(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd {
	return W.WZInterWithScores(ctx, store)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZLexCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZLexCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZMPop(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WZMPop(ctx, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZMScore(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd {
	return W.WZMScore(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZPopMax(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMax(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZPopMin(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMin(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRandMember(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WZRandMember(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRandMemberWithScores(ctx context.Context, key string, count int) *redis.ZSliceCmd {
	return W.WZRandMemberWithScores(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd {
	return W.WZRangeArgs(ctx, z)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd {
	return W.WZRangeArgsWithScores(ctx, z)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd {
	return W.WZRangeStore(ctx, dst, z)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WZRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRemRangeByLex(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByLex(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd {
	return W.WZRemRangeByRank(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRemRangeByScore(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByScore(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRevRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRevRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRevRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRevRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRevRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRevRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZRevRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRevRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WZScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZScore(ctx context.Context, key string, member string) *redis.FloatCmd {
	return W.WZScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZUnion(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd {
	return W.WZUnion(ctx, store)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd {
	return W.WZUnionStore(ctx, dest, store)
}
func (W _github_com_redis_go_redis_v9_Pipeliner) ZUnionWithScores(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd {
	return W.WZUnionWithScores(ctx, store)
}

// _github_com_redis_go_redis_v9_ProbabilisticCmdable is an interface wrapper for ProbabilisticCmdable type
type _github_com_redis_go_redis_v9_ProbabilisticCmdable struct {
	IValue                        interface{}
	WBFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFCard                       func(ctx context.Context, key string) *redis.IntCmd
	WBFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFInfo                       func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoArg                    func(ctx context.Context, key string, option string) *redis.BFInfoCmd
	WBFInfoCapacity               func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoExpansion              func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoFilters                func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoItems                  func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoSize                   func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInsert                     func(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WBFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WBFMAdd                       func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFReserve                    func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveExpansion           func(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd
	WBFReserveNonScaling          func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveWithArgs            func(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd
	WBFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WCFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFAddNX                      func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFCount                      func(ctx context.Context, key string, element interface{}) *redis.IntCmd
	WCFDel                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFInfo                       func(ctx context.Context, key string) *redis.CFInfoCmd
	WCFInsert                     func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WCFInsertNX                   func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd
	WCFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WCFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WCFReserve                    func(ctx context.Context, key string, capacity int64) *redis.StatusCmd
	WCFReserveBucketSize          func(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd
	WCFReserveExpansion           func(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd
	WCFReserveMaxIterations       func(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd
	WCFReserveWithArgs            func(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd
	WCFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WCMSIncrBy                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WCMSInfo                      func(ctx context.Context, key string) *redis.CMSInfoCmd
	WCMSInitByDim                 func(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd
	WCMSInitByProb                func(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd
	WCMSMerge                     func(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd
	WCMSMergeWithWeight           func(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd
	WCMSQuery                     func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WTDigestAdd                   func(ctx context.Context, key string, elements ...float64) *redis.StatusCmd
	WTDigestByRank                func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestByRevRank             func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestCDF                   func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestCreate                func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestCreateWithCompression func(ctx context.Context, key string, compression int64) *redis.StatusCmd
	WTDigestInfo                  func(ctx context.Context, key string) *redis.TDigestInfoCmd
	WTDigestMax                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestMerge                 func(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd
	WTDigestMin                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestQuantile              func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestRank                  func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestReset                 func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestRevRank               func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestTrimmedMean           func(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd
	WTopKAdd                      func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKCount                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WTopKIncrBy                   func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKInfo                     func(ctx context.Context, key string) *redis.TopKInfoCmd
	WTopKList                     func(ctx context.Context, key string) *redis.StringSliceCmd
	WTopKListWithCount            func(ctx context.Context, key string) *redis.MapStringIntCmd
	WTopKQuery                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WTopKReserve                  func(ctx context.Context, key string, k int64) *redis.StatusCmd
	WTopKReserveWithOptions       func(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd
}

func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WBFCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFInfo(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFInfoArg(ctx context.Context, key string, option string) *redis.BFInfoCmd {
	return W.WBFInfoArg(ctx, key, option)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFInfoCapacity(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoCapacity(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFInfoExpansion(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoExpansion(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFInfoFilters(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoFilters(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFInfoItems(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoItems(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFInfoSize(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoSize(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFInsert(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WBFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFMAdd(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserve(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WBFReserveExpansion(ctx, key, errorRate, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserveNonScaling(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFReserveWithArgs(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd {
	return W.WBFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) BFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WBFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFAddNX(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAddNX(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFCount(ctx context.Context, key string, element interface{}) *redis.IntCmd {
	return W.WCFCount(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFDel(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFDel(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFInfo(ctx context.Context, key string) *redis.CFInfoCmd {
	return W.WCFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFInsert(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFInsertNX(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCFInsertNX(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WCFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFReserve(ctx context.Context, key string, capacity int64) *redis.StatusCmd {
	return W.WCFReserve(ctx, key, capacity)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFReserveBucketSize(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd {
	return W.WCFReserveBucketSize(ctx, key, capacity, bucketsize)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFReserveExpansion(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WCFReserveExpansion(ctx, key, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFReserveMaxIterations(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd {
	return W.WCFReserveMaxIterations(ctx, key, capacity, maxiterations)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFReserveWithArgs(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd {
	return W.WCFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WCFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CMSIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CMSInfo(ctx context.Context, key string) *redis.CMSInfoCmd {
	return W.WCMSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CMSInitByDim(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd {
	return W.WCMSInitByDim(ctx, key, width, height)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CMSInitByProb(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd {
	return W.WCMSInitByProb(ctx, key, errorRate, probability)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd {
	return W.WCMSMerge(ctx, destKey, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd {
	return W.WCMSMergeWithWeight(ctx, destKey, sourceKeys)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) CMSQuery(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestAdd(ctx context.Context, key string, elements ...float64) *redis.StatusCmd {
	return W.WTDigestAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestByRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRevRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestCDF(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestCDF(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *redis.StatusCmd {
	return W.WTDigestCreateWithCompression(ctx, key, compression)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestInfo(ctx context.Context, key string) *redis.TDigestInfoCmd {
	return W.WTDigestInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestMax(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMax(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestMerge(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd {
	return W.WTDigestMerge(ctx, destKey, options, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestMin(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMin(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestQuantile(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestQuantile(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestReset(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestReset(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestRevRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRevRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd {
	return W.WTDigestTrimmedMean(ctx, key, lowCutQuantile, highCutQuantile)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TopKAdd(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TopKCount(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WTopKCount(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TopKIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TopKInfo(ctx context.Context, key string) *redis.TopKInfoCmd {
	return W.WTopKInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TopKList(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WTopKList(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TopKListWithCount(ctx context.Context, key string) *redis.MapStringIntCmd {
	return W.WTopKListWithCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TopKQuery(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WTopKQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TopKReserve(ctx context.Context, key string, k int64) *redis.StatusCmd {
	return W.WTopKReserve(ctx, key, k)
}
func (W _github_com_redis_go_redis_v9_ProbabilisticCmdable) TopKReserveWithOptions(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd {
	return W.WTopKReserveWithOptions(ctx, key, k, width, depth, decay)
}

// _github_com_redis_go_redis_v9_PubSubCmdable is an interface wrapper for PubSubCmdable type
type _github_com_redis_go_redis_v9_PubSubCmdable struct {
	IValue               interface{}
	WPubSubChannels      func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubNumPat        func(ctx context.Context) *redis.IntCmd
	WPubSubNumSub        func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPubSubShardChannels func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubShardNumSub   func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPublish             func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
	WSPublish            func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
}

func (W _github_com_redis_go_redis_v9_PubSubCmdable) PubSubChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_PubSubCmdable) PubSubNumPat(ctx context.Context) *redis.IntCmd {
	return W.WPubSubNumPat(ctx)
}
func (W _github_com_redis_go_redis_v9_PubSubCmdable) PubSubNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_PubSubCmdable) PubSubShardChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubShardChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_PubSubCmdable) PubSubShardNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubShardNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_PubSubCmdable) Publish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WPublish(ctx, channel, message)
}
func (W _github_com_redis_go_redis_v9_PubSubCmdable) SPublish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WSPublish(ctx, channel, message)
}

// _github_com_redis_go_redis_v9_Scanner is an interface wrapper for Scanner type
type _github_com_redis_go_redis_v9_Scanner struct {
	IValue     interface{}
	WScanRedis func(s string) error
}

func (W _github_com_redis_go_redis_v9_Scanner) ScanRedis(s string) error {
	return W.WScanRedis(s)
}

// _github_com_redis_go_redis_v9_Scripter is an interface wrapper for Scripter type
type _github_com_redis_go_redis_v9_Scripter struct {
	IValue        interface{}
	WEval         func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalRO       func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalSha      func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WEvalShaRO    func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WScriptExists func(ctx context.Context, hashes ...string) *redis.BoolSliceCmd
	WScriptLoad   func(ctx context.Context, script string) *redis.StringCmd
}

func (W _github_com_redis_go_redis_v9_Scripter) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEval(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Scripter) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalRO(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Scripter) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalSha(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Scripter) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalShaRO(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_Scripter) ScriptExists(ctx context.Context, hashes ...string) *redis.BoolSliceCmd {
	return W.WScriptExists(ctx, hashes...)
}
func (W _github_com_redis_go_redis_v9_Scripter) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	return W.WScriptLoad(ctx, script)
}

// _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable is an interface wrapper for ScriptingFunctionsCmdable type
type _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable struct {
	IValue               interface{}
	WEval                func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalRO              func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalSha             func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WEvalShaRO           func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WFCall               func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRO             func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRo             func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFunctionDelete      func(ctx context.Context, libName string) *redis.StringCmd
	WFunctionDump        func(ctx context.Context) *redis.StringCmd
	WFunctionFlush       func(ctx context.Context) *redis.StringCmd
	WFunctionFlushAsync  func(ctx context.Context) *redis.StringCmd
	WFunctionKill        func(ctx context.Context) *redis.StringCmd
	WFunctionList        func(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd
	WFunctionLoad        func(ctx context.Context, code string) *redis.StringCmd
	WFunctionLoadReplace func(ctx context.Context, code string) *redis.StringCmd
	WFunctionRestore     func(ctx context.Context, libDump string) *redis.StringCmd
	WFunctionStats       func(ctx context.Context) *redis.FunctionStatsCmd
	WScriptExists        func(ctx context.Context, hashes ...string) *redis.BoolSliceCmd
	WScriptFlush         func(ctx context.Context) *redis.StatusCmd
	WScriptKill          func(ctx context.Context) *redis.StatusCmd
	WScriptLoad          func(ctx context.Context, script string) *redis.StringCmd
}

func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEval(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalRO(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalSha(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalShaRO(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FCall(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCall(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FCallRO(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRO(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FCallRo(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRo(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionDelete(ctx context.Context, libName string) *redis.StringCmd {
	return W.WFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionDump(ctx context.Context) *redis.StringCmd {
	return W.WFunctionDump(ctx)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionFlush(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionFlushAsync(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlushAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionKill(ctx context.Context) *redis.StringCmd {
	return W.WFunctionKill(ctx)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionList(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd {
	return W.WFunctionList(ctx, q)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionLoad(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoad(ctx, code)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionLoadReplace(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoadReplace(ctx, code)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionRestore(ctx context.Context, libDump string) *redis.StringCmd {
	return W.WFunctionRestore(ctx, libDump)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) FunctionStats(ctx context.Context) *redis.FunctionStatsCmd {
	return W.WFunctionStats(ctx)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) ScriptExists(ctx context.Context, hashes ...string) *redis.BoolSliceCmd {
	return W.WScriptExists(ctx, hashes...)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) ScriptFlush(ctx context.Context) *redis.StatusCmd {
	return W.WScriptFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) ScriptKill(ctx context.Context) *redis.StatusCmd {
	return W.WScriptKill(ctx)
}
func (W _github_com_redis_go_redis_v9_ScriptingFunctionsCmdable) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	return W.WScriptLoad(ctx, script)
}

// _github_com_redis_go_redis_v9_SearchCmdable is an interface wrapper for SearchCmdable type
type _github_com_redis_go_redis_v9_SearchCmdable struct {
	IValue                interface{}
	WFTAggregate          func(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd
	WFTAggregateWithArgs  func(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd
	WFTAliasAdd           func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAliasDel           func(ctx context.Context, alias string) *redis.StatusCmd
	WFTAliasUpdate        func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAlter              func(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd
	WFTConfigGet          func(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd
	WFTConfigSet          func(ctx context.Context, option string, value interface{}) *redis.StatusCmd
	WFTCreate             func(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd
	WFTCursorDel          func(ctx context.Context, index string, cursorId int) *redis.StatusCmd
	WFTCursorRead         func(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd
	WFTDictAdd            func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDel            func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDump           func(ctx context.Context, dict string) *redis.StringSliceCmd
	WFTDropIndex          func(ctx context.Context, index string) *redis.StatusCmd
	WFTDropIndexWithArgs  func(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd
	WFTExplain            func(ctx context.Context, index string, query string) *redis.StringCmd
	WFTExplainWithArgs    func(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd
	WFTInfo               func(ctx context.Context, index string) *redis.FTInfoCmd
	WFTSearch             func(ctx context.Context, index string, query string) *redis.FTSearchCmd
	WFTSearchWithArgs     func(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd
	WFTSpellCheck         func(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd
	WFTSpellCheckWithArgs func(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd
	WFTSynDump            func(ctx context.Context, index string) *redis.FTSynDumpCmd
	WFTSynUpdate          func(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd
	WFTSynUpdateWithArgs  func(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd
	WFTTagVals            func(ctx context.Context, index string, field string) *redis.StringSliceCmd
	WFT_List              func(ctx context.Context) *redis.StringSliceCmd
}

func (W _github_com_redis_go_redis_v9_SearchCmdable) FTAggregate(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd {
	return W.WFTAggregate(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTAggregateWithArgs(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd {
	return W.WFTAggregateWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTAliasAdd(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasAdd(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTAliasDel(ctx context.Context, alias string) *redis.StatusCmd {
	return W.WFTAliasDel(ctx, alias)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTAliasUpdate(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasUpdate(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd {
	return W.WFTAlter(ctx, index, skipInitialScan, definition)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTConfigGet(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd {
	return W.WFTConfigGet(ctx, option)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTConfigSet(ctx context.Context, option string, value interface{}) *redis.StatusCmd {
	return W.WFTConfigSet(ctx, option, value)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTCreate(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd {
	return W.WFTCreate(ctx, index, options, schema...)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTCursorDel(ctx context.Context, index string, cursorId int) *redis.StatusCmd {
	return W.WFTCursorDel(ctx, index, cursorId)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTCursorRead(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd {
	return W.WFTCursorRead(ctx, index, cursorId, count)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTDictAdd(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictAdd(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTDictDel(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictDel(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTDictDump(ctx context.Context, dict string) *redis.StringSliceCmd {
	return W.WFTDictDump(ctx, dict)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTDropIndex(ctx context.Context, index string) *redis.StatusCmd {
	return W.WFTDropIndex(ctx, index)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTDropIndexWithArgs(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd {
	return W.WFTDropIndexWithArgs(ctx, index, options)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTExplain(ctx context.Context, index string, query string) *redis.StringCmd {
	return W.WFTExplain(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTExplainWithArgs(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd {
	return W.WFTExplainWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTInfo(ctx context.Context, index string) *redis.FTInfoCmd {
	return W.WFTInfo(ctx, index)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTSearch(ctx context.Context, index string, query string) *redis.FTSearchCmd {
	return W.WFTSearch(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTSearchWithArgs(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd {
	return W.WFTSearchWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTSpellCheck(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheck(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTSpellCheckWithArgs(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheckWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTSynDump(ctx context.Context, index string) *redis.FTSynDumpCmd {
	return W.WFTSynDump(ctx, index)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTSynUpdate(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdate(ctx, index, synGroupId, terms)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdateWithArgs(ctx, index, synGroupId, options, terms)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FTTagVals(ctx context.Context, index string, field string) *redis.StringSliceCmd {
	return W.WFTTagVals(ctx, index, field)
}
func (W _github_com_redis_go_redis_v9_SearchCmdable) FT_List(ctx context.Context) *redis.StringSliceCmd {
	return W.WFT_List(ctx)
}

// _github_com_redis_go_redis_v9_SetCmdable is an interface wrapper for SetCmdable type
type _github_com_redis_go_redis_v9_SetCmdable struct {
	IValue        interface{}
	WSAdd         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSCard        func(ctx context.Context, key string) *redis.IntCmd
	WSDiff        func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSDiffStore   func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSInter       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSInterCard   func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WSInterStore  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSIsMember    func(ctx context.Context, key string, member interface{}) *redis.BoolCmd
	WSMIsMember   func(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd
	WSMembers     func(ctx context.Context, key string) *redis.StringSliceCmd
	WSMembersMap  func(ctx context.Context, key string) *redis.StringStructMapCmd
	WSMove        func(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd
	WSPop         func(ctx context.Context, key string) *redis.StringCmd
	WSPopN        func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSRandMember  func(ctx context.Context, key string) *redis.StringCmd
	WSRandMemberN func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSRem         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSScan        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WSUnion       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSUnionStore  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
}

func (W _github_com_redis_go_redis_v9_SetCmdable) SAdd(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WSCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SInter(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSInter(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WSInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SInterStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSInterStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SIsMember(ctx context.Context, key string, member interface{}) *redis.BoolCmd {
	return W.WSIsMember(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SMIsMember(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd {
	return W.WSMIsMember(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SMembers(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WSMembers(ctx, key)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SMembersMap(ctx context.Context, key string) *redis.StringStructMapCmd {
	return W.WSMembersMap(ctx, key)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SMove(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd {
	return W.WSMove(ctx, source, destination, member)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WSPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SPopN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSPopN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SRandMember(ctx context.Context, key string) *redis.StringCmd {
	return W.WSRandMember(ctx, key)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SRandMemberN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSRandMemberN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WSScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SUnion(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSUnion(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_SetCmdable) SUnionStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSUnionStore(ctx, destination, keys...)
}

// _github_com_redis_go_redis_v9_SortedSetCmdable is an interface wrapper for SortedSetCmdable type
type _github_com_redis_go_redis_v9_SortedSetCmdable struct {
	IValue                      interface{}
	WBZMPop                     func(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WBZPopMax                   func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WBZPopMin                   func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WZAdd                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddArgs                   func(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd
	WZAddArgsIncr               func(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd
	WZAddGT                     func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddLT                     func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddNX                     func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddXX                     func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZCard                      func(ctx context.Context, key string) *redis.IntCmd
	WZCount                     func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZDiff                      func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WZDiffStore                 func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WZDiffWithScores            func(ctx context.Context, keys ...string) *redis.ZSliceCmd
	WZIncrBy                    func(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd
	WZInter                     func(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd
	WZInterCard                 func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WZInterStore                func(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd
	WZInterWithScores           func(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd
	WZLexCount                  func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZMPop                      func(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WZMScore                    func(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd
	WZPopMax                    func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZPopMin                    func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZRandMember                func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WZRandMemberWithScores      func(ctx context.Context, key string, count int) *redis.ZSliceCmd
	WZRange                     func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRangeArgs                 func(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd
	WZRangeArgsWithScores       func(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd
	WZRangeByLex                func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScore              func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScoreWithScores    func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRangeStore                func(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd
	WZRangeWithScores           func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRank                      func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRankWithScore             func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZRem                       func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WZRemRangeByLex             func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRemRangeByRank            func(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd
	WZRemRangeByScore           func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRevRange                  func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRevRangeByLex             func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScore           func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScoreWithScores func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRevRangeWithScores        func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRevRank                   func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRevRankWithScore          func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZScan                      func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WZScore                     func(ctx context.Context, key string, member string) *redis.FloatCmd
	WZUnion                     func(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd
	WZUnionStore                func(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd
	WZUnionWithScores           func(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd
}

func (W _github_com_redis_go_redis_v9_SortedSetCmdable) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WBZMPop(ctx, timeout, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMax(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMin(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZAdd(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd {
	return W.WZAddArgs(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd {
	return W.WZAddArgsIncr(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZAddGT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddGT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZAddLT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddLT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZAddNX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddNX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZAddXX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddXX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WZCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WZDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WZDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZDiffWithScores(ctx context.Context, keys ...string) *redis.ZSliceCmd {
	return W.WZDiffWithScores(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZIncrBy(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd {
	return W.WZIncrBy(ctx, key, increment, member)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZInter(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd {
	return W.WZInter(ctx, store)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WZInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd {
	return W.WZInterStore(ctx, destination, store)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZInterWithScores(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd {
	return W.WZInterWithScores(ctx, store)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZLexCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZLexCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZMPop(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WZMPop(ctx, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZMScore(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd {
	return W.WZMScore(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZPopMax(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMax(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZPopMin(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMin(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRandMember(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WZRandMember(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRandMemberWithScores(ctx context.Context, key string, count int) *redis.ZSliceCmd {
	return W.WZRandMemberWithScores(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd {
	return W.WZRangeArgs(ctx, z)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd {
	return W.WZRangeArgsWithScores(ctx, z)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd {
	return W.WZRangeStore(ctx, dst, z)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WZRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRemRangeByLex(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByLex(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd {
	return W.WZRemRangeByRank(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRemRangeByScore(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByScore(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRevRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRevRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRevRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRevRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRevRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRevRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZRevRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRevRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WZScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZScore(ctx context.Context, key string, member string) *redis.FloatCmd {
	return W.WZScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZUnion(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd {
	return W.WZUnion(ctx, store)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd {
	return W.WZUnionStore(ctx, dest, store)
}
func (W _github_com_redis_go_redis_v9_SortedSetCmdable) ZUnionWithScores(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd {
	return W.WZUnionWithScores(ctx, store)
}

// _github_com_redis_go_redis_v9_StatefulCmdable is an interface wrapper for StatefulCmdable type
type _github_com_redis_go_redis_v9_StatefulCmdable struct {
	IValue                        interface{}
	WACLDryRun                    func(ctx context.Context, username string, command ...interface{}) *redis.StringCmd
	WACLLog                       func(ctx context.Context, count int64) *redis.ACLLogCmd
	WACLLogReset                  func(ctx context.Context) *redis.StatusCmd
	WAppend                       func(ctx context.Context, key string, value string) *redis.IntCmd
	WAuth                         func(ctx context.Context, password string) *redis.StatusCmd
	WAuthACL                      func(ctx context.Context, username string, password string) *redis.StatusCmd
	WBFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFCard                       func(ctx context.Context, key string) *redis.IntCmd
	WBFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFInfo                       func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoArg                    func(ctx context.Context, key string, option string) *redis.BFInfoCmd
	WBFInfoCapacity               func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoExpansion              func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoFilters                func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoItems                  func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoSize                   func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInsert                     func(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WBFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WBFMAdd                       func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFReserve                    func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveExpansion           func(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd
	WBFReserveNonScaling          func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveWithArgs            func(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd
	WBFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WBLMPop                       func(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WBLMove                       func(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd
	WBLPop                        func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPop                        func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPopLPush                   func(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd
	WBZMPop                       func(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WBZPopMax                     func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WBZPopMin                     func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WBgRewriteAOF                 func(ctx context.Context) *redis.StatusCmd
	WBgSave                       func(ctx context.Context) *redis.StatusCmd
	WBitCount                     func(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd
	WBitField                     func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitFieldRO                   func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitOpAnd                     func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpNot                     func(ctx context.Context, destKey string, key string) *redis.IntCmd
	WBitOpOr                      func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpXor                     func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitPos                       func(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd
	WBitPosSpan                   func(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd
	WCFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFAddNX                      func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFCount                      func(ctx context.Context, key string, element interface{}) *redis.IntCmd
	WCFDel                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFInfo                       func(ctx context.Context, key string) *redis.CFInfoCmd
	WCFInsert                     func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WCFInsertNX                   func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd
	WCFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WCFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WCFReserve                    func(ctx context.Context, key string, capacity int64) *redis.StatusCmd
	WCFReserveBucketSize          func(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd
	WCFReserveExpansion           func(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd
	WCFReserveMaxIterations       func(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd
	WCFReserveWithArgs            func(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd
	WCFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WCMSIncrBy                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WCMSInfo                      func(ctx context.Context, key string) *redis.CMSInfoCmd
	WCMSInitByDim                 func(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd
	WCMSInitByProb                func(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd
	WCMSMerge                     func(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd
	WCMSMergeWithWeight           func(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd
	WCMSQuery                     func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WClientGetName                func(ctx context.Context) *redis.StringCmd
	WClientID                     func(ctx context.Context) *redis.IntCmd
	WClientInfo                   func(ctx context.Context) *redis.ClientInfoCmd
	WClientKill                   func(ctx context.Context, ipPort string) *redis.StatusCmd
	WClientKillByFilter           func(ctx context.Context, keys ...string) *redis.IntCmd
	WClientList                   func(ctx context.Context) *redis.StringCmd
	WClientPause                  func(ctx context.Context, dur time.Duration) *redis.BoolCmd
	WClientSetInfo                func(ctx context.Context, info redis.LibraryInfo) *redis.StatusCmd
	WClientSetName                func(ctx context.Context, name string) *redis.BoolCmd
	WClientUnblock                func(ctx context.Context, id int64) *redis.IntCmd
	WClientUnblockWithError       func(ctx context.Context, id int64) *redis.IntCmd
	WClientUnpause                func(ctx context.Context) *redis.BoolCmd
	WClusterAddSlots              func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterAddSlotsRange         func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterCountFailureReports   func(ctx context.Context, nodeID string) *redis.IntCmd
	WClusterCountKeysInSlot       func(ctx context.Context, slot int) *redis.IntCmd
	WClusterDelSlots              func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterDelSlotsRange         func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterFailover              func(ctx context.Context) *redis.StatusCmd
	WClusterForget                func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterGetKeysInSlot         func(ctx context.Context, slot int, count int) *redis.StringSliceCmd
	WClusterInfo                  func(ctx context.Context) *redis.StringCmd
	WClusterKeySlot               func(ctx context.Context, key string) *redis.IntCmd
	WClusterLinks                 func(ctx context.Context) *redis.ClusterLinksCmd
	WClusterMeet                  func(ctx context.Context, host string, port string) *redis.StatusCmd
	WClusterMyShardID             func(ctx context.Context) *redis.StringCmd
	WClusterNodes                 func(ctx context.Context) *redis.StringCmd
	WClusterReplicate             func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterResetHard             func(ctx context.Context) *redis.StatusCmd
	WClusterResetSoft             func(ctx context.Context) *redis.StatusCmd
	WClusterSaveConfig            func(ctx context.Context) *redis.StatusCmd
	WClusterShards                func(ctx context.Context) *redis.ClusterShardsCmd
	WClusterSlaves                func(ctx context.Context, nodeID string) *redis.StringSliceCmd
	WClusterSlots                 func(ctx context.Context) *redis.ClusterSlotsCmd
	WCommand                      func(ctx context.Context) *redis.CommandsInfoCmd
	WCommandGetKeys               func(ctx context.Context, commands ...interface{}) *redis.StringSliceCmd
	WCommandGetKeysAndFlags       func(ctx context.Context, commands ...interface{}) *redis.KeyFlagsCmd
	WCommandList                  func(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd
	WConfigGet                    func(ctx context.Context, parameter string) *redis.MapStringStringCmd
	WConfigResetStat              func(ctx context.Context) *redis.StatusCmd
	WConfigRewrite                func(ctx context.Context) *redis.StatusCmd
	WConfigSet                    func(ctx context.Context, parameter string, value string) *redis.StatusCmd
	WCopy                         func(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd
	WDBSize                       func(ctx context.Context) *redis.IntCmd
	WDebugObject                  func(ctx context.Context, key string) *redis.StringCmd
	WDecr                         func(ctx context.Context, key string) *redis.IntCmd
	WDecrBy                       func(ctx context.Context, key string, decrement int64) *redis.IntCmd
	WDel                          func(ctx context.Context, keys ...string) *redis.IntCmd
	WDump                         func(ctx context.Context, key string) *redis.StringCmd
	WEcho                         func(ctx context.Context, message interface{}) *redis.StringCmd
	WEval                         func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalRO                       func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalSha                      func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WEvalShaRO                    func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WExists                       func(ctx context.Context, keys ...string) *redis.IntCmd
	WExpire                       func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireAt                     func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WExpireGT                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireLT                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireNX                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireTime                   func(ctx context.Context, key string) *redis.DurationCmd
	WExpireXX                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WFCall                        func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRO                      func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRo                      func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFTAggregate                  func(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd
	WFTAggregateWithArgs          func(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd
	WFTAliasAdd                   func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAliasDel                   func(ctx context.Context, alias string) *redis.StatusCmd
	WFTAliasUpdate                func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAlter                      func(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd
	WFTConfigGet                  func(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd
	WFTConfigSet                  func(ctx context.Context, option string, value interface{}) *redis.StatusCmd
	WFTCreate                     func(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd
	WFTCursorDel                  func(ctx context.Context, index string, cursorId int) *redis.StatusCmd
	WFTCursorRead                 func(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd
	WFTDictAdd                    func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDel                    func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDump                   func(ctx context.Context, dict string) *redis.StringSliceCmd
	WFTDropIndex                  func(ctx context.Context, index string) *redis.StatusCmd
	WFTDropIndexWithArgs          func(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd
	WFTExplain                    func(ctx context.Context, index string, query string) *redis.StringCmd
	WFTExplainWithArgs            func(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd
	WFTInfo                       func(ctx context.Context, index string) *redis.FTInfoCmd
	WFTSearch                     func(ctx context.Context, index string, query string) *redis.FTSearchCmd
	WFTSearchWithArgs             func(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd
	WFTSpellCheck                 func(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd
	WFTSpellCheckWithArgs         func(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd
	WFTSynDump                    func(ctx context.Context, index string) *redis.FTSynDumpCmd
	WFTSynUpdate                  func(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd
	WFTSynUpdateWithArgs          func(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd
	WFTTagVals                    func(ctx context.Context, index string, field string) *redis.StringSliceCmd
	WFT_List                      func(ctx context.Context) *redis.StringSliceCmd
	WFlushAll                     func(ctx context.Context) *redis.StatusCmd
	WFlushAllAsync                func(ctx context.Context) *redis.StatusCmd
	WFlushDB                      func(ctx context.Context) *redis.StatusCmd
	WFlushDBAsync                 func(ctx context.Context) *redis.StatusCmd
	WFunctionDelete               func(ctx context.Context, libName string) *redis.StringCmd
	WFunctionDump                 func(ctx context.Context) *redis.StringCmd
	WFunctionFlush                func(ctx context.Context) *redis.StringCmd
	WFunctionFlushAsync           func(ctx context.Context) *redis.StringCmd
	WFunctionKill                 func(ctx context.Context) *redis.StringCmd
	WFunctionList                 func(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd
	WFunctionLoad                 func(ctx context.Context, code string) *redis.StringCmd
	WFunctionLoadReplace          func(ctx context.Context, code string) *redis.StringCmd
	WFunctionRestore              func(ctx context.Context, libDump string) *redis.StringCmd
	WFunctionStats                func(ctx context.Context) *redis.FunctionStatsCmd
	WGeoAdd                       func(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd
	WGeoDist                      func(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd
	WGeoHash                      func(ctx context.Context, key string, members ...string) *redis.StringSliceCmd
	WGeoPos                       func(ctx context.Context, key string, members ...string) *redis.GeoPosCmd
	WGeoRadius                    func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMember            func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMemberStore       func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoRadiusStore               func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoSearch                    func(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd
	WGeoSearchLocation            func(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd
	WGeoSearchStore               func(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd
	WGet                          func(ctx context.Context, key string) *redis.StringCmd
	WGetBit                       func(ctx context.Context, key string, offset int64) *redis.IntCmd
	WGetDel                       func(ctx context.Context, key string) *redis.StringCmd
	WGetEx                        func(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd
	WGetRange                     func(ctx context.Context, key string, start int64, end int64) *redis.StringCmd
	WGetSet                       func(ctx context.Context, key string, value interface{}) *redis.StringCmd
	WHDel                         func(ctx context.Context, key string, fields ...string) *redis.IntCmd
	WHExists                      func(ctx context.Context, key string, field string) *redis.BoolCmd
	WHExpire                      func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHExpireAt                    func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHExpireAtWithArgs            func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHExpireTime                  func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHExpireWithArgs              func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHGet                         func(ctx context.Context, key string, field string) *redis.StringCmd
	WHGetAll                      func(ctx context.Context, key string) *redis.MapStringStringCmd
	WHIncrBy                      func(ctx context.Context, key string, field string, incr int64) *redis.IntCmd
	WHIncrByFloat                 func(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd
	WHKeys                        func(ctx context.Context, key string) *redis.StringSliceCmd
	WHLen                         func(ctx context.Context, key string) *redis.IntCmd
	WHMGet                        func(ctx context.Context, key string, fields ...string) *redis.SliceCmd
	WHMSet                        func(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd
	WHPExpire                     func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHPExpireAt                   func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHPExpireAtWithArgs           func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPExpireTime                 func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPExpireWithArgs             func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPTTL                        func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPersist                     func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHRandField                   func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WHRandFieldWithValues         func(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd
	WHScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHScanNoValues                func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHSet                         func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WHSetNX                       func(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd
	WHTTL                         func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHVals                        func(ctx context.Context, key string) *redis.StringSliceCmd
	WHello                        func(ctx context.Context, ver int, username string, password string, clientName string) *redis.MapStringInterfaceCmd
	WIncr                         func(ctx context.Context, key string) *redis.IntCmd
	WIncrBy                       func(ctx context.Context, key string, value int64) *redis.IntCmd
	WIncrByFloat                  func(ctx context.Context, key string, value float64) *redis.FloatCmd
	WInfo                         func(ctx context.Context, section ...string) *redis.StringCmd
	WJSONArrAppend                func(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd
	WJSONArrIndex                 func(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd
	WJSONArrIndexWithArgs         func(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd
	WJSONArrInsert                func(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd
	WJSONArrLen                   func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrPop                   func(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd
	WJSONArrTrim                  func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrTrimWithArgs          func(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd
	WJSONClear                    func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDebugMemory              func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDel                      func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONForget                   func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONGet                      func(ctx context.Context, key string, paths ...string) *redis.JSONCmd
	WJSONGetWithArgs              func(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd
	WJSONMGet                     func(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd
	WJSONMSet                     func(ctx context.Context, params ...interface{}) *redis.StatusCmd
	WJSONMSetArgs                 func(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd
	WJSONMerge                    func(ctx context.Context, key string, path string, value string) *redis.StatusCmd
	WJSONNumIncrBy                func(ctx context.Context, key string, path string, value float64) *redis.JSONCmd
	WJSONObjKeys                  func(ctx context.Context, key string, path string) *redis.SliceCmd
	WJSONObjLen                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONSet                      func(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd
	WJSONSetMode                  func(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd
	WJSONStrAppend                func(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd
	WJSONStrLen                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONToggle                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONType                     func(ctx context.Context, key string, path string) *redis.JSONSliceCmd
	WKeys                         func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WLCS                          func(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd
	WLIndex                       func(ctx context.Context, key string, index int64) *redis.StringCmd
	WLInsert                      func(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertAfter                 func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertBefore                func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLLen                         func(ctx context.Context, key string) *redis.IntCmd
	WLMPop                        func(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WLMove                        func(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd
	WLPop                         func(ctx context.Context, key string) *redis.StringCmd
	WLPopCount                    func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WLPos                         func(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd
	WLPosCount                    func(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd
	WLPush                        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLPushX                       func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLRange                       func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WLRem                         func(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd
	WLSet                         func(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd
	WLTrim                        func(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd
	WLastSave                     func(ctx context.Context) *redis.IntCmd
	WMGet                         func(ctx context.Context, keys ...string) *redis.SliceCmd
	WMSet                         func(ctx context.Context, values ...interface{}) *redis.StatusCmd
	WMSetNX                       func(ctx context.Context, values ...interface{}) *redis.BoolCmd
	WMemoryUsage                  func(ctx context.Context, key string, samples ...int) *redis.IntCmd
	WMigrate                      func(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd
	WModuleLoadex                 func(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd
	WMove                         func(ctx context.Context, key string, db int) *redis.BoolCmd
	WObjectEncoding               func(ctx context.Context, key string) *redis.StringCmd
	WObjectFreq                   func(ctx context.Context, key string) *redis.IntCmd
	WObjectIdleTime               func(ctx context.Context, key string) *redis.DurationCmd
	WObjectRefCount               func(ctx context.Context, key string) *redis.IntCmd
	WPExpire                      func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WPExpireAt                    func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WPExpireTime                  func(ctx context.Context, key string) *redis.DurationCmd
	WPFAdd                        func(ctx context.Context, key string, els ...interface{}) *redis.IntCmd
	WPFCount                      func(ctx context.Context, keys ...string) *redis.IntCmd
	WPFMerge                      func(ctx context.Context, dest string, keys ...string) *redis.StatusCmd
	WPTTL                         func(ctx context.Context, key string) *redis.DurationCmd
	WPersist                      func(ctx context.Context, key string) *redis.BoolCmd
	WPing                         func(ctx context.Context) *redis.StatusCmd
	WPipeline                     func() redis.Pipeliner
	WPipelined                    func(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WPubSubChannels               func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubNumPat                 func(ctx context.Context) *redis.IntCmd
	WPubSubNumSub                 func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPubSubShardChannels          func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubShardNumSub            func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPublish                      func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
	WQuit                         func(ctx context.Context) *redis.StatusCmd
	WRPop                         func(ctx context.Context, key string) *redis.StringCmd
	WRPopCount                    func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WRPopLPush                    func(ctx context.Context, source string, destination string) *redis.StringCmd
	WRPush                        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WRPushX                       func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WRandomKey                    func(ctx context.Context) *redis.StringCmd
	WReadOnly                     func(ctx context.Context) *redis.StatusCmd
	WReadWrite                    func(ctx context.Context) *redis.StatusCmd
	WRename                       func(ctx context.Context, key string, newkey string) *redis.StatusCmd
	WRenameNX                     func(ctx context.Context, key string, newkey string) *redis.BoolCmd
	WRestore                      func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WRestoreReplace               func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WSAdd                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSCard                        func(ctx context.Context, key string) *redis.IntCmd
	WSDiff                        func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSDiffStore                   func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSInter                       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSInterCard                   func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WSInterStore                  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSIsMember                    func(ctx context.Context, key string, member interface{}) *redis.BoolCmd
	WSMIsMember                   func(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd
	WSMembers                     func(ctx context.Context, key string) *redis.StringSliceCmd
	WSMembersMap                  func(ctx context.Context, key string) *redis.StringStructMapCmd
	WSMove                        func(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd
	WSPop                         func(ctx context.Context, key string) *redis.StringCmd
	WSPopN                        func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSPublish                     func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
	WSRandMember                  func(ctx context.Context, key string) *redis.StringCmd
	WSRandMemberN                 func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSRem                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WSUnion                       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSUnionStore                  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSave                         func(ctx context.Context) *redis.StatusCmd
	WScan                         func(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd
	WScanType                     func(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd
	WScriptExists                 func(ctx context.Context, hashes ...string) *redis.BoolSliceCmd
	WScriptFlush                  func(ctx context.Context) *redis.StatusCmd
	WScriptKill                   func(ctx context.Context) *redis.StatusCmd
	WScriptLoad                   func(ctx context.Context, script string) *redis.StringCmd
	WSelect                       func(ctx context.Context, index int) *redis.StatusCmd
	WSet                          func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetArgs                      func(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd
	WSetBit                       func(ctx context.Context, key string, offset int64, value int) *redis.IntCmd
	WSetEx                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetNX                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WSetRange                     func(ctx context.Context, key string, offset int64, value string) *redis.IntCmd
	WSetXX                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WShutdown                     func(ctx context.Context) *redis.StatusCmd
	WShutdownNoSave               func(ctx context.Context) *redis.StatusCmd
	WShutdownSave                 func(ctx context.Context) *redis.StatusCmd
	WSlaveOf                      func(ctx context.Context, host string, port string) *redis.StatusCmd
	WSlowLogGet                   func(ctx context.Context, num int64) *redis.SlowLogCmd
	WSort                         func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortInterfaces               func(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd
	WSortRO                       func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortStore                    func(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd
	WStrLen                       func(ctx context.Context, key string) *redis.IntCmd
	WSwapDB                       func(ctx context.Context, index1 int, index2 int) *redis.StatusCmd
	WTDigestAdd                   func(ctx context.Context, key string, elements ...float64) *redis.StatusCmd
	WTDigestByRank                func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestByRevRank             func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestCDF                   func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestCreate                func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestCreateWithCompression func(ctx context.Context, key string, compression int64) *redis.StatusCmd
	WTDigestInfo                  func(ctx context.Context, key string) *redis.TDigestInfoCmd
	WTDigestMax                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestMerge                 func(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd
	WTDigestMin                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestQuantile              func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestRank                  func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestReset                 func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestRevRank               func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestTrimmedMean           func(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd
	WTFCall                       func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNC                  func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNCArgs              func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFCallArgs                   func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFunctionDelete              func(ctx context.Context, libName string) *redis.StatusCmd
	WTFunctionList                func(ctx context.Context) *redis.MapStringInterfaceSliceCmd
	WTFunctionListArgs            func(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd
	WTFunctionLoad                func(ctx context.Context, lib string) *redis.StatusCmd
	WTFunctionLoadArgs            func(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd
	WTSAdd                        func(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd
	WTSAddWithArgs                func(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd
	WTSAlter                      func(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd
	WTSCreate                     func(ctx context.Context, key string) *redis.StatusCmd
	WTSCreateRule                 func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd
	WTSCreateRuleWithArgs         func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd
	WTSCreateWithArgs             func(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd
	WTSDecrBy                     func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSDecrByWithArgs             func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSDel                        func(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd
	WTSDeleteRule                 func(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd
	WTSGet                        func(ctx context.Context, key string) *redis.TSTimestampValueCmd
	WTSGetWithArgs                func(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd
	WTSIncrBy                     func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSIncrByWithArgs             func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSInfo                       func(ctx context.Context, key string) *redis.MapStringInterfaceCmd
	WTSInfoWithArgs               func(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd
	WTSMAdd                       func(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd
	WTSMGet                       func(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd
	WTSMGetWithArgs               func(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRange                     func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRangeWithArgs             func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRevRange                  func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRevRangeWithArgs          func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSQueryIndex                 func(ctx context.Context, filterExpr []string) *redis.StringSliceCmd
	WTSRange                      func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRangeWithArgs              func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd
	WTSRevRange                   func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRevRangeWithArgs           func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd
	WTTL                          func(ctx context.Context, key string) *redis.DurationCmd
	WTime                         func(ctx context.Context) *redis.TimeCmd
	WTopKAdd                      func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKCount                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WTopKIncrBy                   func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKInfo                     func(ctx context.Context, key string) *redis.TopKInfoCmd
	WTopKList                     func(ctx context.Context, key string) *redis.StringSliceCmd
	WTopKListWithCount            func(ctx context.Context, key string) *redis.MapStringIntCmd
	WTopKQuery                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WTopKReserve                  func(ctx context.Context, key string, k int64) *redis.StatusCmd
	WTopKReserveWithOptions       func(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd
	WTouch                        func(ctx context.Context, keys ...string) *redis.IntCmd
	WTxPipeline                   func() redis.Pipeliner
	WTxPipelined                  func(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WType                         func(ctx context.Context, key string) *redis.StatusCmd
	WUnlink                       func(ctx context.Context, keys ...string) *redis.IntCmd
	WXAck                         func(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd
	WXAdd                         func(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd
	WXAutoClaim                   func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd
	WXAutoClaimJustID             func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd
	WXClaim                       func(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd
	WXClaimJustID                 func(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd
	WXDel                         func(ctx context.Context, stream string, ids ...string) *redis.IntCmd
	WXGroupCreate                 func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupCreateConsumer         func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupCreateMkStream         func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupDelConsumer            func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupDestroy                func(ctx context.Context, stream string, group string) *redis.IntCmd
	WXGroupSetID                  func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXInfoConsumers               func(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd
	WXInfoGroups                  func(ctx context.Context, key string) *redis.XInfoGroupsCmd
	WXInfoStream                  func(ctx context.Context, key string) *redis.XInfoStreamCmd
	WXInfoStreamFull              func(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd
	WXLen                         func(ctx context.Context, stream string) *redis.IntCmd
	WXPending                     func(ctx context.Context, stream string, group string) *redis.XPendingCmd
	WXPendingExt                  func(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd
	WXRange                       func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRangeN                      func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXRead                        func(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd
	WXReadGroup                   func(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd
	WXReadStreams                 func(ctx context.Context, streams ...string) *redis.XStreamSliceCmd
	WXRevRange                    func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRevRangeN                   func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXTrimMaxLen                  func(ctx context.Context, key string, maxLen int64) *redis.IntCmd
	WXTrimMaxLenApprox            func(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd
	WXTrimMinID                   func(ctx context.Context, key string, minID string) *redis.IntCmd
	WXTrimMinIDApprox             func(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd
	WZAdd                         func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddArgs                     func(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd
	WZAddArgsIncr                 func(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd
	WZAddGT                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddLT                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddNX                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddXX                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZCard                        func(ctx context.Context, key string) *redis.IntCmd
	WZCount                       func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZDiff                        func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WZDiffStore                   func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WZDiffWithScores              func(ctx context.Context, keys ...string) *redis.ZSliceCmd
	WZIncrBy                      func(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd
	WZInter                       func(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd
	WZInterCard                   func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WZInterStore                  func(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd
	WZInterWithScores             func(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd
	WZLexCount                    func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZMPop                        func(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WZMScore                      func(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd
	WZPopMax                      func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZPopMin                      func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZRandMember                  func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WZRandMemberWithScores        func(ctx context.Context, key string, count int) *redis.ZSliceCmd
	WZRange                       func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRangeArgs                   func(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd
	WZRangeArgsWithScores         func(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd
	WZRangeByLex                  func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScore                func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScoreWithScores      func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRangeStore                  func(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd
	WZRangeWithScores             func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRank                        func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRankWithScore               func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZRem                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WZRemRangeByLex               func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRemRangeByRank              func(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd
	WZRemRangeByScore             func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRevRange                    func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRevRangeByLex               func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScore             func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScoreWithScores   func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRevRangeWithScores          func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRevRank                     func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRevRankWithScore            func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WZScore                       func(ctx context.Context, key string, member string) *redis.FloatCmd
	WZUnion                       func(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd
	WZUnionStore                  func(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd
	WZUnionWithScores             func(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd
}

func (W _github_com_redis_go_redis_v9_StatefulCmdable) ACLDryRun(ctx context.Context, username string, command ...interface{}) *redis.StringCmd {
	return W.WACLDryRun(ctx, username, command...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ACLLog(ctx context.Context, count int64) *redis.ACLLogCmd {
	return W.WACLLog(ctx, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ACLLogReset(ctx context.Context) *redis.StatusCmd {
	return W.WACLLogReset(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Append(ctx context.Context, key string, value string) *redis.IntCmd {
	return W.WAppend(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Auth(ctx context.Context, password string) *redis.StatusCmd {
	return W.WAuth(ctx, password)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) AuthACL(ctx context.Context, username string, password string) *redis.StatusCmd {
	return W.WAuthACL(ctx, username, password)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WBFCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFInfo(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFInfoArg(ctx context.Context, key string, option string) *redis.BFInfoCmd {
	return W.WBFInfoArg(ctx, key, option)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFInfoCapacity(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoCapacity(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFInfoExpansion(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoExpansion(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFInfoFilters(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoFilters(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFInfoItems(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoItems(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFInfoSize(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoSize(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFInsert(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WBFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFMAdd(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserve(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WBFReserveExpansion(ctx, key, errorRate, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserveNonScaling(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFReserveWithArgs(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd {
	return W.WBFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WBFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WBLMPop(ctx, timeout, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BLMove(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd {
	return W.WBLMove(ctx, source, destination, srcpos, destpos, timeout)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBLPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBRPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd {
	return W.WBRPopLPush(ctx, source, destination, timeout)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WBZMPop(ctx, timeout, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMax(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMin(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BgRewriteAOF(ctx context.Context) *redis.StatusCmd {
	return W.WBgRewriteAOF(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BgSave(ctx context.Context) *redis.StatusCmd {
	return W.WBgSave(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd {
	return W.WBitCount(ctx, key, bitCount)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BitField(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitField(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BitFieldRO(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitFieldRO(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BitOpAnd(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpAnd(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BitOpNot(ctx context.Context, destKey string, key string) *redis.IntCmd {
	return W.WBitOpNot(ctx, destKey, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BitOpOr(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpOr(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BitOpXor(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpXor(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd {
	return W.WBitPos(ctx, key, bit, pos...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) BitPosSpan(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd {
	return W.WBitPosSpan(ctx, key, bit, start, end, span)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFAddNX(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAddNX(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFCount(ctx context.Context, key string, element interface{}) *redis.IntCmd {
	return W.WCFCount(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFDel(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFDel(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFInfo(ctx context.Context, key string) *redis.CFInfoCmd {
	return W.WCFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFInsert(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFInsertNX(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCFInsertNX(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WCFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFReserve(ctx context.Context, key string, capacity int64) *redis.StatusCmd {
	return W.WCFReserve(ctx, key, capacity)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFReserveBucketSize(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd {
	return W.WCFReserveBucketSize(ctx, key, capacity, bucketsize)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFReserveExpansion(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WCFReserveExpansion(ctx, key, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFReserveMaxIterations(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd {
	return W.WCFReserveMaxIterations(ctx, key, capacity, maxiterations)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFReserveWithArgs(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd {
	return W.WCFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WCFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CMSIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CMSInfo(ctx context.Context, key string) *redis.CMSInfoCmd {
	return W.WCMSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CMSInitByDim(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd {
	return W.WCMSInitByDim(ctx, key, width, height)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CMSInitByProb(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd {
	return W.WCMSInitByProb(ctx, key, errorRate, probability)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd {
	return W.WCMSMerge(ctx, destKey, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd {
	return W.WCMSMergeWithWeight(ctx, destKey, sourceKeys)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CMSQuery(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientGetName(ctx context.Context) *redis.StringCmd {
	return W.WClientGetName(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientID(ctx context.Context) *redis.IntCmd {
	return W.WClientID(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientInfo(ctx context.Context) *redis.ClientInfoCmd {
	return W.WClientInfo(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientKill(ctx context.Context, ipPort string) *redis.StatusCmd {
	return W.WClientKill(ctx, ipPort)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientKillByFilter(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WClientKillByFilter(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientList(ctx context.Context) *redis.StringCmd {
	return W.WClientList(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientPause(ctx context.Context, dur time.Duration) *redis.BoolCmd {
	return W.WClientPause(ctx, dur)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientSetInfo(ctx context.Context, info redis.LibraryInfo) *redis.StatusCmd {
	return W.WClientSetInfo(ctx, info)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientSetName(ctx context.Context, name string) *redis.BoolCmd {
	return W.WClientSetName(ctx, name)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientUnblock(ctx context.Context, id int64) *redis.IntCmd {
	return W.WClientUnblock(ctx, id)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientUnblockWithError(ctx context.Context, id int64) *redis.IntCmd {
	return W.WClientUnblockWithError(ctx, id)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClientUnpause(ctx context.Context) *redis.BoolCmd {
	return W.WClientUnpause(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterAddSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterAddSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterAddSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterAddSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterCountFailureReports(ctx context.Context, nodeID string) *redis.IntCmd {
	return W.WClusterCountFailureReports(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterCountKeysInSlot(ctx context.Context, slot int) *redis.IntCmd {
	return W.WClusterCountKeysInSlot(ctx, slot)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterDelSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterDelSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterDelSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterDelSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterFailover(ctx context.Context) *redis.StatusCmd {
	return W.WClusterFailover(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterForget(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterForget(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) *redis.StringSliceCmd {
	return W.WClusterGetKeysInSlot(ctx, slot, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterInfo(ctx context.Context) *redis.StringCmd {
	return W.WClusterInfo(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterKeySlot(ctx context.Context, key string) *redis.IntCmd {
	return W.WClusterKeySlot(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterLinks(ctx context.Context) *redis.ClusterLinksCmd {
	return W.WClusterLinks(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterMeet(ctx context.Context, host string, port string) *redis.StatusCmd {
	return W.WClusterMeet(ctx, host, port)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterMyShardID(ctx context.Context) *redis.StringCmd {
	return W.WClusterMyShardID(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterNodes(ctx context.Context) *redis.StringCmd {
	return W.WClusterNodes(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterReplicate(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterReplicate(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterResetHard(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetHard(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterResetSoft(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetSoft(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterSaveConfig(ctx context.Context) *redis.StatusCmd {
	return W.WClusterSaveConfig(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterShards(ctx context.Context) *redis.ClusterShardsCmd {
	return W.WClusterShards(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterSlaves(ctx context.Context, nodeID string) *redis.StringSliceCmd {
	return W.WClusterSlaves(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ClusterSlots(ctx context.Context) *redis.ClusterSlotsCmd {
	return W.WClusterSlots(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Command(ctx context.Context) *redis.CommandsInfoCmd {
	return W.WCommand(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CommandGetKeys(ctx context.Context, commands ...interface{}) *redis.StringSliceCmd {
	return W.WCommandGetKeys(ctx, commands...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CommandGetKeysAndFlags(ctx context.Context, commands ...interface{}) *redis.KeyFlagsCmd {
	return W.WCommandGetKeysAndFlags(ctx, commands...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) CommandList(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd {
	return W.WCommandList(ctx, filter)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ConfigGet(ctx context.Context, parameter string) *redis.MapStringStringCmd {
	return W.WConfigGet(ctx, parameter)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ConfigResetStat(ctx context.Context) *redis.StatusCmd {
	return W.WConfigResetStat(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ConfigRewrite(ctx context.Context) *redis.StatusCmd {
	return W.WConfigRewrite(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ConfigSet(ctx context.Context, parameter string, value string) *redis.StatusCmd {
	return W.WConfigSet(ctx, parameter, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd {
	return W.WCopy(ctx, sourceKey, destKey, db, replace)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) DBSize(ctx context.Context) *redis.IntCmd {
	return W.WDBSize(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) DebugObject(ctx context.Context, key string) *redis.StringCmd {
	return W.WDebugObject(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Decr(ctx context.Context, key string) *redis.IntCmd {
	return W.WDecr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) DecrBy(ctx context.Context, key string, decrement int64) *redis.IntCmd {
	return W.WDecrBy(ctx, key, decrement)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WDel(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Dump(ctx context.Context, key string) *redis.StringCmd {
	return W.WDump(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Echo(ctx context.Context, message interface{}) *redis.StringCmd {
	return W.WEcho(ctx, message)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEval(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalRO(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalSha(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalShaRO(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Exists(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WExists(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Expire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ExpireGT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireGT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ExpireLT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireLT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ExpireNX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireNX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ExpireXX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireXX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FCall(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCall(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FCallRO(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRO(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FCallRo(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRo(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTAggregate(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd {
	return W.WFTAggregate(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTAggregateWithArgs(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd {
	return W.WFTAggregateWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTAliasAdd(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasAdd(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTAliasDel(ctx context.Context, alias string) *redis.StatusCmd {
	return W.WFTAliasDel(ctx, alias)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTAliasUpdate(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasUpdate(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd {
	return W.WFTAlter(ctx, index, skipInitialScan, definition)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTConfigGet(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd {
	return W.WFTConfigGet(ctx, option)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTConfigSet(ctx context.Context, option string, value interface{}) *redis.StatusCmd {
	return W.WFTConfigSet(ctx, option, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTCreate(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd {
	return W.WFTCreate(ctx, index, options, schema...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTCursorDel(ctx context.Context, index string, cursorId int) *redis.StatusCmd {
	return W.WFTCursorDel(ctx, index, cursorId)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTCursorRead(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd {
	return W.WFTCursorRead(ctx, index, cursorId, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTDictAdd(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictAdd(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTDictDel(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictDel(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTDictDump(ctx context.Context, dict string) *redis.StringSliceCmd {
	return W.WFTDictDump(ctx, dict)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTDropIndex(ctx context.Context, index string) *redis.StatusCmd {
	return W.WFTDropIndex(ctx, index)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTDropIndexWithArgs(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd {
	return W.WFTDropIndexWithArgs(ctx, index, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTExplain(ctx context.Context, index string, query string) *redis.StringCmd {
	return W.WFTExplain(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTExplainWithArgs(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd {
	return W.WFTExplainWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTInfo(ctx context.Context, index string) *redis.FTInfoCmd {
	return W.WFTInfo(ctx, index)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTSearch(ctx context.Context, index string, query string) *redis.FTSearchCmd {
	return W.WFTSearch(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTSearchWithArgs(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd {
	return W.WFTSearchWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTSpellCheck(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheck(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTSpellCheckWithArgs(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheckWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTSynDump(ctx context.Context, index string) *redis.FTSynDumpCmd {
	return W.WFTSynDump(ctx, index)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTSynUpdate(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdate(ctx, index, synGroupId, terms)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdateWithArgs(ctx, index, synGroupId, options, terms)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FTTagVals(ctx context.Context, index string, field string) *redis.StringSliceCmd {
	return W.WFTTagVals(ctx, index, field)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FT_List(ctx context.Context) *redis.StringSliceCmd {
	return W.WFT_List(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FlushAll(ctx context.Context) *redis.StatusCmd {
	return W.WFlushAll(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FlushAllAsync(ctx context.Context) *redis.StatusCmd {
	return W.WFlushAllAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FlushDB(ctx context.Context) *redis.StatusCmd {
	return W.WFlushDB(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FlushDBAsync(ctx context.Context) *redis.StatusCmd {
	return W.WFlushDBAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionDelete(ctx context.Context, libName string) *redis.StringCmd {
	return W.WFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionDump(ctx context.Context) *redis.StringCmd {
	return W.WFunctionDump(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionFlush(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionFlushAsync(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlushAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionKill(ctx context.Context) *redis.StringCmd {
	return W.WFunctionKill(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionList(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd {
	return W.WFunctionList(ctx, q)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionLoad(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoad(ctx, code)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionLoadReplace(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoadReplace(ctx, code)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionRestore(ctx context.Context, libDump string) *redis.StringCmd {
	return W.WFunctionRestore(ctx, libDump)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) FunctionStats(ctx context.Context) *redis.FunctionStatsCmd {
	return W.WFunctionStats(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd {
	return W.WGeoAdd(ctx, key, geoLocation...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	return W.WGeoDist(ctx, key, member1, member2, unit)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoHash(ctx context.Context, key string, members ...string) *redis.StringSliceCmd {
	return W.WGeoHash(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoPos(ctx context.Context, key string, members ...string) *redis.GeoPosCmd {
	return W.WGeoPos(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadius(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoRadiusByMember(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadiusByMember(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusByMemberStore(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusStore(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd {
	return W.WGeoSearch(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd {
	return W.WGeoSearchLocation(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GeoSearchStore(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd {
	return W.WGeoSearchStore(ctx, key, store, q)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Get(ctx context.Context, key string) *redis.StringCmd {
	return W.WGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GetBit(ctx context.Context, key string, offset int64) *redis.IntCmd {
	return W.WGetBit(ctx, key, offset)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GetDel(ctx context.Context, key string) *redis.StringCmd {
	return W.WGetDel(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GetEx(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd {
	return W.WGetEx(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GetRange(ctx context.Context, key string, start int64, end int64) *redis.StringCmd {
	return W.WGetRange(ctx, key, start, end)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) GetSet(ctx context.Context, key string, value interface{}) *redis.StringCmd {
	return W.WGetSet(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HDel(ctx context.Context, key string, fields ...string) *redis.IntCmd {
	return W.WHDel(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HExists(ctx context.Context, key string, field string) *redis.BoolCmd {
	return W.WHExists(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HGet(ctx context.Context, key string, field string) *redis.StringCmd {
	return W.WHGet(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HGetAll(ctx context.Context, key string) *redis.MapStringStringCmd {
	return W.WHGetAll(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HIncrBy(ctx context.Context, key string, field string, incr int64) *redis.IntCmd {
	return W.WHIncrBy(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HIncrByFloat(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd {
	return W.WHIncrByFloat(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HKeys(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHKeys(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WHLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HMGet(ctx context.Context, key string, fields ...string) *redis.SliceCmd {
	return W.WHMGet(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HMSet(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd {
	return W.WHMSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HPExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HPTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HPersist(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPersist(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HRandField(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WHRandField(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HRandFieldWithValues(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd {
	return W.WHRandFieldWithValues(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScanNoValues(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HSet(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WHSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HSetNX(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSetNX(ctx, key, field, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) HVals(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHVals(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Hello(ctx context.Context, ver int, username string, password string, clientName string) *redis.MapStringInterfaceCmd {
	return W.WHello(ctx, ver, username, password, clientName)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Incr(ctx context.Context, key string) *redis.IntCmd {
	return W.WIncr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) IncrBy(ctx context.Context, key string, value int64) *redis.IntCmd {
	return W.WIncrBy(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) IncrByFloat(ctx context.Context, key string, value float64) *redis.FloatCmd {
	return W.WIncrByFloat(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Info(ctx context.Context, section ...string) *redis.StringCmd {
	return W.WInfo(ctx, section...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONArrAppend(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrAppend(ctx, key, path, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONArrIndex(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndex(ctx, key, path, value...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONArrIndexWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndexWithArgs(ctx, key, path, options, value...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONArrInsert(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrInsert(ctx, key, path, index, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONArrLen(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONArrPop(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd {
	return W.WJSONArrPop(ctx, key, path, index)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONArrTrim(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrTrim(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONArrTrimWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd {
	return W.WJSONArrTrimWithArgs(ctx, key, path, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONClear(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONClear(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONDebugMemory(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDebugMemory(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONDel(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDel(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONForget(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONForget(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONGet(ctx context.Context, key string, paths ...string) *redis.JSONCmd {
	return W.WJSONGet(ctx, key, paths...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONGetWithArgs(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd {
	return W.WJSONGetWithArgs(ctx, key, options, paths...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONMGet(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd {
	return W.WJSONMGet(ctx, path, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONMSet(ctx context.Context, params ...interface{}) *redis.StatusCmd {
	return W.WJSONMSet(ctx, params...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONMSetArgs(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd {
	return W.WJSONMSetArgs(ctx, docs)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONMerge(ctx context.Context, key string, path string, value string) *redis.StatusCmd {
	return W.WJSONMerge(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONNumIncrBy(ctx context.Context, key string, path string, value float64) *redis.JSONCmd {
	return W.WJSONNumIncrBy(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONObjKeys(ctx context.Context, key string, path string) *redis.SliceCmd {
	return W.WJSONObjKeys(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONObjLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONObjLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONSet(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd {
	return W.WJSONSet(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONSetMode(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd {
	return W.WJSONSetMode(ctx, key, path, value, mode)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONStrAppend(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd {
	return W.WJSONStrAppend(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONStrLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONStrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONToggle(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONToggle(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) JSONType(ctx context.Context, key string, path string) *redis.JSONSliceCmd {
	return W.WJSONType(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Keys(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WKeys(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LCS(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd {
	return W.WLCS(ctx, q)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LIndex(ctx context.Context, key string, index int64) *redis.StringCmd {
	return W.WLIndex(ctx, key, index)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsert(ctx, key, op, pivot, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertAfter(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertBefore(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WLLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LMPop(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WLMPop(ctx, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd {
	return W.WLMove(ctx, source, destination, srcpos, destpos)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WLPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WLPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LPos(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd {
	return W.WLPos(ctx, key, value, args)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LPosCount(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd {
	return W.WLPosCount(ctx, key, value, count, args)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPushX(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WLRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LRem(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd {
	return W.WLRem(ctx, key, count, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LSet(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd {
	return W.WLSet(ctx, key, index, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LTrim(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd {
	return W.WLTrim(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) LastSave(ctx context.Context) *redis.IntCmd {
	return W.WLastSave(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) MGet(ctx context.Context, keys ...string) *redis.SliceCmd {
	return W.WMGet(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) MSet(ctx context.Context, values ...interface{}) *redis.StatusCmd {
	return W.WMSet(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) MSetNX(ctx context.Context, values ...interface{}) *redis.BoolCmd {
	return W.WMSetNX(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) MemoryUsage(ctx context.Context, key string, samples ...int) *redis.IntCmd {
	return W.WMemoryUsage(ctx, key, samples...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	return W.WMigrate(ctx, host, port, key, db, timeout)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ModuleLoadex(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd {
	return W.WModuleLoadex(ctx, conf)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Move(ctx context.Context, key string, db int) *redis.BoolCmd {
	return W.WMove(ctx, key, db)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ObjectEncoding(ctx context.Context, key string) *redis.StringCmd {
	return W.WObjectEncoding(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ObjectFreq(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectFreq(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ObjectIdleTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WObjectIdleTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ObjectRefCount(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectRefCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PExpire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WPExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WPExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PFAdd(ctx context.Context, key string, els ...interface{}) *redis.IntCmd {
	return W.WPFAdd(ctx, key, els...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PFCount(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WPFCount(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PFMerge(ctx context.Context, dest string, keys ...string) *redis.StatusCmd {
	return W.WPFMerge(ctx, dest, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PTTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Persist(ctx context.Context, key string) *redis.BoolCmd {
	return W.WPersist(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Ping(ctx context.Context) *redis.StatusCmd {
	return W.WPing(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Pipeline() redis.Pipeliner {
	return W.WPipeline()
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Pipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WPipelined(ctx, fn)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PubSubChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PubSubNumPat(ctx context.Context) *redis.IntCmd {
	return W.WPubSubNumPat(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PubSubNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PubSubShardChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubShardChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) PubSubShardNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubShardNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Publish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WPublish(ctx, channel, message)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Quit(ctx context.Context) *redis.StatusCmd {
	return W.WQuit(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) RPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WRPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) RPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WRPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) RPopLPush(ctx context.Context, source string, destination string) *redis.StringCmd {
	return W.WRPopLPush(ctx, source, destination)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) RPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) RPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPushX(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) RandomKey(ctx context.Context) *redis.StringCmd {
	return W.WRandomKey(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ReadOnly(ctx context.Context) *redis.StatusCmd {
	return W.WReadOnly(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ReadWrite(ctx context.Context) *redis.StatusCmd {
	return W.WReadWrite(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Rename(ctx context.Context, key string, newkey string) *redis.StatusCmd {
	return W.WRename(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) RenameNX(ctx context.Context, key string, newkey string) *redis.BoolCmd {
	return W.WRenameNX(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Restore(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestore(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestoreReplace(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SAdd(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WSCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SInter(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSInter(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WSInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SInterStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSInterStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SIsMember(ctx context.Context, key string, member interface{}) *redis.BoolCmd {
	return W.WSIsMember(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SMIsMember(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd {
	return W.WSMIsMember(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SMembers(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WSMembers(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SMembersMap(ctx context.Context, key string) *redis.StringStructMapCmd {
	return W.WSMembersMap(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SMove(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd {
	return W.WSMove(ctx, source, destination, member)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WSPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SPopN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSPopN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SPublish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WSPublish(ctx, channel, message)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SRandMember(ctx context.Context, key string) *redis.StringCmd {
	return W.WSRandMember(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SRandMemberN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSRandMemberN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WSScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SUnion(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSUnion(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SUnionStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSUnionStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Save(ctx context.Context) *redis.StatusCmd {
	return W.WSave(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Scan(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WScan(ctx, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd {
	return W.WScanType(ctx, cursor, match, count, keyType)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ScriptExists(ctx context.Context, hashes ...string) *redis.BoolSliceCmd {
	return W.WScriptExists(ctx, hashes...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ScriptFlush(ctx context.Context) *redis.StatusCmd {
	return W.WScriptFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ScriptKill(ctx context.Context) *redis.StatusCmd {
	return W.WScriptKill(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	return W.WScriptLoad(ctx, script)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Select(ctx context.Context, index int) *redis.StatusCmd {
	return W.WSelect(ctx, index)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSet(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SetArgs(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd {
	return W.WSetArgs(ctx, key, value, a)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SetBit(ctx context.Context, key string, offset int64, value int) *redis.IntCmd {
	return W.WSetBit(ctx, key, offset, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SetEx(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSetEx(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetNX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SetRange(ctx context.Context, key string, offset int64, value string) *redis.IntCmd {
	return W.WSetRange(ctx, key, offset, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetXX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Shutdown(ctx context.Context) *redis.StatusCmd {
	return W.WShutdown(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ShutdownNoSave(ctx context.Context) *redis.StatusCmd {
	return W.WShutdownNoSave(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ShutdownSave(ctx context.Context) *redis.StatusCmd {
	return W.WShutdownSave(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SlaveOf(ctx context.Context, host string, port string) *redis.StatusCmd {
	return W.WSlaveOf(ctx, host, port)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SlowLogGet(ctx context.Context, num int64) *redis.SlowLogCmd {
	return W.WSlowLogGet(ctx, num)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Sort(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSort(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd {
	return W.WSortInterfaces(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SortRO(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSortRO(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SortStore(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd {
	return W.WSortStore(ctx, key, store, sort)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) StrLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WStrLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) SwapDB(ctx context.Context, index1 int, index2 int) *redis.StatusCmd {
	return W.WSwapDB(ctx, index1, index2)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestAdd(ctx context.Context, key string, elements ...float64) *redis.StatusCmd {
	return W.WTDigestAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestByRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRevRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestCDF(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestCDF(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *redis.StatusCmd {
	return W.WTDigestCreateWithCompression(ctx, key, compression)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestInfo(ctx context.Context, key string) *redis.TDigestInfoCmd {
	return W.WTDigestInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestMax(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMax(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestMerge(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd {
	return W.WTDigestMerge(ctx, destKey, options, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestMin(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMin(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestQuantile(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestQuantile(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestReset(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestReset(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestRevRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRevRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd {
	return W.WTDigestTrimmedMean(ctx, key, lowCutQuantile, highCutQuantile)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TFCall(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCall(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TFCallASYNC(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCallASYNC(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TFCallASYNCArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallASYNCArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TFCallArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TFunctionDelete(ctx context.Context, libName string) *redis.StatusCmd {
	return W.WTFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TFunctionList(ctx context.Context) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionList(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TFunctionListArgs(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionListArgs(ctx, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TFunctionLoad(ctx context.Context, lib string) *redis.StatusCmd {
	return W.WTFunctionLoad(ctx, lib)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TFunctionLoadArgs(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd {
	return W.WTFunctionLoadArgs(ctx, lib, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSAdd(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd {
	return W.WTSAdd(ctx, key, timestamp, value)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSAddWithArgs(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd {
	return W.WTSAddWithArgs(ctx, key, timestamp, value, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSAlter(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd {
	return W.WTSAlter(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTSCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSCreateRule(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd {
	return W.WTSCreateRule(ctx, sourceKey, destKey, aggregator, bucketDuration)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSCreateRuleWithArgs(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd {
	return W.WTSCreateRuleWithArgs(ctx, sourceKey, destKey, aggregator, bucketDuration, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSCreateWithArgs(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd {
	return W.WTSCreateWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSDecrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSDecrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSDecrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSDecrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSDel(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd {
	return W.WTSDel(ctx, Key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSDeleteRule(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd {
	return W.WTSDeleteRule(ctx, sourceKey, destKey)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSGet(ctx context.Context, key string) *redis.TSTimestampValueCmd {
	return W.WTSGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSGetWithArgs(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd {
	return W.WTSGetWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSIncrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSIncrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSIncrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSIncrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSInfo(ctx context.Context, key string) *redis.MapStringInterfaceCmd {
	return W.WTSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSInfoWithArgs(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd {
	return W.WTSInfoWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSMAdd(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd {
	return W.WTSMAdd(ctx, ktvSlices)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSMGet(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGet(ctx, filters)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSMGetWithArgs(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGetWithArgs(ctx, filters, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSMRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSMRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSMRevRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSMRevRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSQueryIndex(ctx context.Context, filterExpr []string) *redis.StringSliceCmd {
	return W.WTSQueryIndex(ctx, filterExpr)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSRevRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TSRevRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Time(ctx context.Context) *redis.TimeCmd {
	return W.WTime(ctx)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TopKAdd(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TopKCount(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WTopKCount(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TopKIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TopKInfo(ctx context.Context, key string) *redis.TopKInfoCmd {
	return W.WTopKInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TopKList(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WTopKList(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TopKListWithCount(ctx context.Context, key string) *redis.MapStringIntCmd {
	return W.WTopKListWithCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TopKQuery(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WTopKQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TopKReserve(ctx context.Context, key string, k int64) *redis.StatusCmd {
	return W.WTopKReserve(ctx, key, k)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TopKReserveWithOptions(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd {
	return W.WTopKReserveWithOptions(ctx, key, k, width, depth, decay)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Touch(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WTouch(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TxPipeline() redis.Pipeliner {
	return W.WTxPipeline()
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) TxPipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WTxPipelined(ctx, fn)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Type(ctx context.Context, key string) *redis.StatusCmd {
	return W.WType(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) Unlink(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WUnlink(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XAck(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd {
	return W.WXAck(ctx, stream, group, ids...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XAdd(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd {
	return W.WXAdd(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd {
	return W.WXAutoClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd {
	return W.WXAutoClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XClaim(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	return W.WXClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd {
	return W.WXClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XDel(ctx context.Context, stream string, ids ...string) *redis.IntCmd {
	return W.WXDel(ctx, stream, ids...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XGroupCreate(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreate(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupCreateConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreateMkStream(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupDelConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XGroupDestroy(ctx context.Context, stream string, group string) *redis.IntCmd {
	return W.WXGroupDestroy(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XGroupSetID(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupSetID(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XInfoConsumers(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd {
	return W.WXInfoConsumers(ctx, key, group)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XInfoGroups(ctx context.Context, key string) *redis.XInfoGroupsCmd {
	return W.WXInfoGroups(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XInfoStream(ctx context.Context, key string) *redis.XInfoStreamCmd {
	return W.WXInfoStream(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XInfoStreamFull(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd {
	return W.WXInfoStreamFull(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XLen(ctx context.Context, stream string) *redis.IntCmd {
	return W.WXLen(ctx, stream)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XPending(ctx context.Context, stream string, group string) *redis.XPendingCmd {
	return W.WXPending(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	return W.WXPendingExt(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XRead(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd {
	return W.WXRead(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	return W.WXReadGroup(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XReadStreams(ctx context.Context, streams ...string) *redis.XStreamSliceCmd {
	return W.WXReadStreams(ctx, streams...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XRevRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRevRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRevRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *redis.IntCmd {
	return W.WXTrimMaxLen(ctx, key, maxLen)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd {
	return W.WXTrimMaxLenApprox(ctx, key, maxLen, limit)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XTrimMinID(ctx context.Context, key string, minID string) *redis.IntCmd {
	return W.WXTrimMinID(ctx, key, minID)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd {
	return W.WXTrimMinIDApprox(ctx, key, minID, limit)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZAdd(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd {
	return W.WZAddArgs(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd {
	return W.WZAddArgsIncr(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZAddGT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddGT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZAddLT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddLT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZAddNX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddNX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZAddXX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddXX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WZCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WZDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WZDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZDiffWithScores(ctx context.Context, keys ...string) *redis.ZSliceCmd {
	return W.WZDiffWithScores(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZIncrBy(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd {
	return W.WZIncrBy(ctx, key, increment, member)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZInter(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd {
	return W.WZInter(ctx, store)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WZInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd {
	return W.WZInterStore(ctx, destination, store)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZInterWithScores(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd {
	return W.WZInterWithScores(ctx, store)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZLexCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZLexCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZMPop(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WZMPop(ctx, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZMScore(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd {
	return W.WZMScore(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZPopMax(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMax(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZPopMin(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMin(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRandMember(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WZRandMember(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRandMemberWithScores(ctx context.Context, key string, count int) *redis.ZSliceCmd {
	return W.WZRandMemberWithScores(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd {
	return W.WZRangeArgs(ctx, z)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd {
	return W.WZRangeArgsWithScores(ctx, z)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd {
	return W.WZRangeStore(ctx, dst, z)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WZRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRemRangeByLex(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByLex(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd {
	return W.WZRemRangeByRank(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRemRangeByScore(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByScore(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRevRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRevRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRevRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRevRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRevRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRevRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZRevRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRevRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WZScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZScore(ctx context.Context, key string, member string) *redis.FloatCmd {
	return W.WZScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZUnion(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd {
	return W.WZUnion(ctx, store)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd {
	return W.WZUnionStore(ctx, dest, store)
}
func (W _github_com_redis_go_redis_v9_StatefulCmdable) ZUnionWithScores(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd {
	return W.WZUnionWithScores(ctx, store)
}

// _github_com_redis_go_redis_v9_StreamCmdable is an interface wrapper for StreamCmdable type
type _github_com_redis_go_redis_v9_StreamCmdable struct {
	IValue                interface{}
	WXAck                 func(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd
	WXAdd                 func(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd
	WXAutoClaim           func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd
	WXAutoClaimJustID     func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd
	WXClaim               func(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd
	WXClaimJustID         func(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd
	WXDel                 func(ctx context.Context, stream string, ids ...string) *redis.IntCmd
	WXGroupCreate         func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupCreateConsumer func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupCreateMkStream func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupDelConsumer    func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupDestroy        func(ctx context.Context, stream string, group string) *redis.IntCmd
	WXGroupSetID          func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXInfoConsumers       func(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd
	WXInfoGroups          func(ctx context.Context, key string) *redis.XInfoGroupsCmd
	WXInfoStream          func(ctx context.Context, key string) *redis.XInfoStreamCmd
	WXInfoStreamFull      func(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd
	WXLen                 func(ctx context.Context, stream string) *redis.IntCmd
	WXPending             func(ctx context.Context, stream string, group string) *redis.XPendingCmd
	WXPendingExt          func(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd
	WXRange               func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRangeN              func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXRead                func(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd
	WXReadGroup           func(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd
	WXReadStreams         func(ctx context.Context, streams ...string) *redis.XStreamSliceCmd
	WXRevRange            func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRevRangeN           func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXTrimMaxLen          func(ctx context.Context, key string, maxLen int64) *redis.IntCmd
	WXTrimMaxLenApprox    func(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd
	WXTrimMinID           func(ctx context.Context, key string, minID string) *redis.IntCmd
	WXTrimMinIDApprox     func(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd
}

func (W _github_com_redis_go_redis_v9_StreamCmdable) XAck(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd {
	return W.WXAck(ctx, stream, group, ids...)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XAdd(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd {
	return W.WXAdd(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd {
	return W.WXAutoClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd {
	return W.WXAutoClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XClaim(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	return W.WXClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd {
	return W.WXClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XDel(ctx context.Context, stream string, ids ...string) *redis.IntCmd {
	return W.WXDel(ctx, stream, ids...)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XGroupCreate(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreate(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupCreateConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreateMkStream(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupDelConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XGroupDestroy(ctx context.Context, stream string, group string) *redis.IntCmd {
	return W.WXGroupDestroy(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XGroupSetID(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupSetID(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XInfoConsumers(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd {
	return W.WXInfoConsumers(ctx, key, group)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XInfoGroups(ctx context.Context, key string) *redis.XInfoGroupsCmd {
	return W.WXInfoGroups(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XInfoStream(ctx context.Context, key string) *redis.XInfoStreamCmd {
	return W.WXInfoStream(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XInfoStreamFull(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd {
	return W.WXInfoStreamFull(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XLen(ctx context.Context, stream string) *redis.IntCmd {
	return W.WXLen(ctx, stream)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XPending(ctx context.Context, stream string, group string) *redis.XPendingCmd {
	return W.WXPending(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	return W.WXPendingExt(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XRead(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd {
	return W.WXRead(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	return W.WXReadGroup(ctx, a)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XReadStreams(ctx context.Context, streams ...string) *redis.XStreamSliceCmd {
	return W.WXReadStreams(ctx, streams...)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XRevRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRevRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRevRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *redis.IntCmd {
	return W.WXTrimMaxLen(ctx, key, maxLen)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd {
	return W.WXTrimMaxLenApprox(ctx, key, maxLen, limit)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XTrimMinID(ctx context.Context, key string, minID string) *redis.IntCmd {
	return W.WXTrimMinID(ctx, key, minID)
}
func (W _github_com_redis_go_redis_v9_StreamCmdable) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd {
	return W.WXTrimMinIDApprox(ctx, key, minID, limit)
}

// _github_com_redis_go_redis_v9_StringCmdable is an interface wrapper for StringCmdable type
type _github_com_redis_go_redis_v9_StringCmdable struct {
	IValue       interface{}
	WAppend      func(ctx context.Context, key string, value string) *redis.IntCmd
	WDecr        func(ctx context.Context, key string) *redis.IntCmd
	WDecrBy      func(ctx context.Context, key string, decrement int64) *redis.IntCmd
	WGet         func(ctx context.Context, key string) *redis.StringCmd
	WGetDel      func(ctx context.Context, key string) *redis.StringCmd
	WGetEx       func(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd
	WGetRange    func(ctx context.Context, key string, start int64, end int64) *redis.StringCmd
	WGetSet      func(ctx context.Context, key string, value interface{}) *redis.StringCmd
	WIncr        func(ctx context.Context, key string) *redis.IntCmd
	WIncrBy      func(ctx context.Context, key string, value int64) *redis.IntCmd
	WIncrByFloat func(ctx context.Context, key string, value float64) *redis.FloatCmd
	WLCS         func(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd
	WMGet        func(ctx context.Context, keys ...string) *redis.SliceCmd
	WMSet        func(ctx context.Context, values ...interface{}) *redis.StatusCmd
	WMSetNX      func(ctx context.Context, values ...interface{}) *redis.BoolCmd
	WSet         func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetArgs     func(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd
	WSetEx       func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetNX       func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WSetRange    func(ctx context.Context, key string, offset int64, value string) *redis.IntCmd
	WSetXX       func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WStrLen      func(ctx context.Context, key string) *redis.IntCmd
}

func (W _github_com_redis_go_redis_v9_StringCmdable) Append(ctx context.Context, key string, value string) *redis.IntCmd {
	return W.WAppend(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) Decr(ctx context.Context, key string) *redis.IntCmd {
	return W.WDecr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) DecrBy(ctx context.Context, key string, decrement int64) *redis.IntCmd {
	return W.WDecrBy(ctx, key, decrement)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) Get(ctx context.Context, key string) *redis.StringCmd {
	return W.WGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) GetDel(ctx context.Context, key string) *redis.StringCmd {
	return W.WGetDel(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) GetEx(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd {
	return W.WGetEx(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) GetRange(ctx context.Context, key string, start int64, end int64) *redis.StringCmd {
	return W.WGetRange(ctx, key, start, end)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) GetSet(ctx context.Context, key string, value interface{}) *redis.StringCmd {
	return W.WGetSet(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) Incr(ctx context.Context, key string) *redis.IntCmd {
	return W.WIncr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) IncrBy(ctx context.Context, key string, value int64) *redis.IntCmd {
	return W.WIncrBy(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) IncrByFloat(ctx context.Context, key string, value float64) *redis.FloatCmd {
	return W.WIncrByFloat(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) LCS(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd {
	return W.WLCS(ctx, q)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) MGet(ctx context.Context, keys ...string) *redis.SliceCmd {
	return W.WMGet(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) MSet(ctx context.Context, values ...interface{}) *redis.StatusCmd {
	return W.WMSet(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) MSetNX(ctx context.Context, values ...interface{}) *redis.BoolCmd {
	return W.WMSetNX(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSet(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) SetArgs(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd {
	return W.WSetArgs(ctx, key, value, a)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) SetEx(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSetEx(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetNX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) SetRange(ctx context.Context, key string, offset int64, value string) *redis.IntCmd {
	return W.WSetRange(ctx, key, offset, value)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetXX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_StringCmdable) StrLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WStrLen(ctx, key)
}

// _github_com_redis_go_redis_v9_TimeseriesCmdable is an interface wrapper for TimeseriesCmdable type
type _github_com_redis_go_redis_v9_TimeseriesCmdable struct {
	IValue                interface{}
	WTSAdd                func(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd
	WTSAddWithArgs        func(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd
	WTSAlter              func(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd
	WTSCreate             func(ctx context.Context, key string) *redis.StatusCmd
	WTSCreateRule         func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd
	WTSCreateRuleWithArgs func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd
	WTSCreateWithArgs     func(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd
	WTSDecrBy             func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSDecrByWithArgs     func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSDel                func(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd
	WTSDeleteRule         func(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd
	WTSGet                func(ctx context.Context, key string) *redis.TSTimestampValueCmd
	WTSGetWithArgs        func(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd
	WTSIncrBy             func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSIncrByWithArgs     func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSInfo               func(ctx context.Context, key string) *redis.MapStringInterfaceCmd
	WTSInfoWithArgs       func(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd
	WTSMAdd               func(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd
	WTSMGet               func(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd
	WTSMGetWithArgs       func(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRange             func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRangeWithArgs     func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRevRange          func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRevRangeWithArgs  func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSQueryIndex         func(ctx context.Context, filterExpr []string) *redis.StringSliceCmd
	WTSRange              func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRangeWithArgs      func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd
	WTSRevRange           func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRevRangeWithArgs   func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd
}

func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSAdd(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd {
	return W.WTSAdd(ctx, key, timestamp, value)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSAddWithArgs(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd {
	return W.WTSAddWithArgs(ctx, key, timestamp, value, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSAlter(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd {
	return W.WTSAlter(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTSCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSCreateRule(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd {
	return W.WTSCreateRule(ctx, sourceKey, destKey, aggregator, bucketDuration)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSCreateRuleWithArgs(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd {
	return W.WTSCreateRuleWithArgs(ctx, sourceKey, destKey, aggregator, bucketDuration, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSCreateWithArgs(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd {
	return W.WTSCreateWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSDecrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSDecrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSDecrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSDecrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSDel(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd {
	return W.WTSDel(ctx, Key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSDeleteRule(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd {
	return W.WTSDeleteRule(ctx, sourceKey, destKey)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSGet(ctx context.Context, key string) *redis.TSTimestampValueCmd {
	return W.WTSGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSGetWithArgs(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd {
	return W.WTSGetWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSIncrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSIncrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSIncrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSIncrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSInfo(ctx context.Context, key string) *redis.MapStringInterfaceCmd {
	return W.WTSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSInfoWithArgs(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd {
	return W.WTSInfoWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSMAdd(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd {
	return W.WTSMAdd(ctx, ktvSlices)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSMGet(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGet(ctx, filters)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSMGetWithArgs(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGetWithArgs(ctx, filters, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSMRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSMRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSMRevRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSMRevRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSQueryIndex(ctx context.Context, filterExpr []string) *redis.StringSliceCmd {
	return W.WTSQueryIndex(ctx, filterExpr)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSRevRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_TimeseriesCmdable) TSRevRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}

// _github_com_redis_go_redis_v9_UniversalClient is an interface wrapper for UniversalClient type
type _github_com_redis_go_redis_v9_UniversalClient struct {
	IValue                        interface{}
	WACLDryRun                    func(ctx context.Context, username string, command ...interface{}) *redis.StringCmd
	WACLLog                       func(ctx context.Context, count int64) *redis.ACLLogCmd
	WACLLogReset                  func(ctx context.Context) *redis.StatusCmd
	WAddHook                      func(a0 redis.Hook)
	WAppend                       func(ctx context.Context, key string, value string) *redis.IntCmd
	WBFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFCard                       func(ctx context.Context, key string) *redis.IntCmd
	WBFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WBFInfo                       func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoArg                    func(ctx context.Context, key string, option string) *redis.BFInfoCmd
	WBFInfoCapacity               func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoExpansion              func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoFilters                func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoItems                  func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInfoSize                   func(ctx context.Context, key string) *redis.BFInfoCmd
	WBFInsert                     func(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WBFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WBFMAdd                       func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WBFReserve                    func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveExpansion           func(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd
	WBFReserveNonScaling          func(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd
	WBFReserveWithArgs            func(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd
	WBFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WBLMPop                       func(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WBLMove                       func(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd
	WBLPop                        func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPop                        func(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd
	WBRPopLPush                   func(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd
	WBZMPop                       func(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WBZPopMax                     func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WBZPopMin                     func(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd
	WBgRewriteAOF                 func(ctx context.Context) *redis.StatusCmd
	WBgSave                       func(ctx context.Context) *redis.StatusCmd
	WBitCount                     func(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd
	WBitField                     func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitFieldRO                   func(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd
	WBitOpAnd                     func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpNot                     func(ctx context.Context, destKey string, key string) *redis.IntCmd
	WBitOpOr                      func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitOpXor                     func(ctx context.Context, destKey string, keys ...string) *redis.IntCmd
	WBitPos                       func(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd
	WBitPosSpan                   func(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd
	WCFAdd                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFAddNX                      func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFCount                      func(ctx context.Context, key string, element interface{}) *redis.IntCmd
	WCFDel                        func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFExists                     func(ctx context.Context, key string, element interface{}) *redis.BoolCmd
	WCFInfo                       func(ctx context.Context, key string) *redis.CFInfoCmd
	WCFInsert                     func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd
	WCFInsertNX                   func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd
	WCFLoadChunk                  func(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd
	WCFMExists                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WCFReserve                    func(ctx context.Context, key string, capacity int64) *redis.StatusCmd
	WCFReserveBucketSize          func(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd
	WCFReserveExpansion           func(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd
	WCFReserveMaxIterations       func(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd
	WCFReserveWithArgs            func(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd
	WCFScanDump                   func(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd
	WCMSIncrBy                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WCMSInfo                      func(ctx context.Context, key string) *redis.CMSInfoCmd
	WCMSInitByDim                 func(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd
	WCMSInitByProb                func(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd
	WCMSMerge                     func(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd
	WCMSMergeWithWeight           func(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd
	WCMSQuery                     func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WClientGetName                func(ctx context.Context) *redis.StringCmd
	WClientID                     func(ctx context.Context) *redis.IntCmd
	WClientInfo                   func(ctx context.Context) *redis.ClientInfoCmd
	WClientKill                   func(ctx context.Context, ipPort string) *redis.StatusCmd
	WClientKillByFilter           func(ctx context.Context, keys ...string) *redis.IntCmd
	WClientList                   func(ctx context.Context) *redis.StringCmd
	WClientPause                  func(ctx context.Context, dur time.Duration) *redis.BoolCmd
	WClientUnblock                func(ctx context.Context, id int64) *redis.IntCmd
	WClientUnblockWithError       func(ctx context.Context, id int64) *redis.IntCmd
	WClientUnpause                func(ctx context.Context) *redis.BoolCmd
	WClose                        func() error
	WClusterAddSlots              func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterAddSlotsRange         func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterCountFailureReports   func(ctx context.Context, nodeID string) *redis.IntCmd
	WClusterCountKeysInSlot       func(ctx context.Context, slot int) *redis.IntCmd
	WClusterDelSlots              func(ctx context.Context, slots ...int) *redis.StatusCmd
	WClusterDelSlotsRange         func(ctx context.Context, min int, max int) *redis.StatusCmd
	WClusterFailover              func(ctx context.Context) *redis.StatusCmd
	WClusterForget                func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterGetKeysInSlot         func(ctx context.Context, slot int, count int) *redis.StringSliceCmd
	WClusterInfo                  func(ctx context.Context) *redis.StringCmd
	WClusterKeySlot               func(ctx context.Context, key string) *redis.IntCmd
	WClusterLinks                 func(ctx context.Context) *redis.ClusterLinksCmd
	WClusterMeet                  func(ctx context.Context, host string, port string) *redis.StatusCmd
	WClusterMyShardID             func(ctx context.Context) *redis.StringCmd
	WClusterNodes                 func(ctx context.Context) *redis.StringCmd
	WClusterReplicate             func(ctx context.Context, nodeID string) *redis.StatusCmd
	WClusterResetHard             func(ctx context.Context) *redis.StatusCmd
	WClusterResetSoft             func(ctx context.Context) *redis.StatusCmd
	WClusterSaveConfig            func(ctx context.Context) *redis.StatusCmd
	WClusterShards                func(ctx context.Context) *redis.ClusterShardsCmd
	WClusterSlaves                func(ctx context.Context, nodeID string) *redis.StringSliceCmd
	WClusterSlots                 func(ctx context.Context) *redis.ClusterSlotsCmd
	WCommand                      func(ctx context.Context) *redis.CommandsInfoCmd
	WCommandGetKeys               func(ctx context.Context, commands ...interface{}) *redis.StringSliceCmd
	WCommandGetKeysAndFlags       func(ctx context.Context, commands ...interface{}) *redis.KeyFlagsCmd
	WCommandList                  func(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd
	WConfigGet                    func(ctx context.Context, parameter string) *redis.MapStringStringCmd
	WConfigResetStat              func(ctx context.Context) *redis.StatusCmd
	WConfigRewrite                func(ctx context.Context) *redis.StatusCmd
	WConfigSet                    func(ctx context.Context, parameter string, value string) *redis.StatusCmd
	WCopy                         func(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd
	WDBSize                       func(ctx context.Context) *redis.IntCmd
	WDebugObject                  func(ctx context.Context, key string) *redis.StringCmd
	WDecr                         func(ctx context.Context, key string) *redis.IntCmd
	WDecrBy                       func(ctx context.Context, key string, decrement int64) *redis.IntCmd
	WDel                          func(ctx context.Context, keys ...string) *redis.IntCmd
	WDo                           func(ctx context.Context, args ...interface{}) *redis.Cmd
	WDump                         func(ctx context.Context, key string) *redis.StringCmd
	WEcho                         func(ctx context.Context, message interface{}) *redis.StringCmd
	WEval                         func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalRO                       func(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd
	WEvalSha                      func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WEvalShaRO                    func(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd
	WExists                       func(ctx context.Context, keys ...string) *redis.IntCmd
	WExpire                       func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireAt                     func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WExpireGT                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireLT                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireNX                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WExpireTime                   func(ctx context.Context, key string) *redis.DurationCmd
	WExpireXX                     func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WFCall                        func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRO                      func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFCallRo                      func(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd
	WFTAggregate                  func(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd
	WFTAggregateWithArgs          func(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd
	WFTAliasAdd                   func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAliasDel                   func(ctx context.Context, alias string) *redis.StatusCmd
	WFTAliasUpdate                func(ctx context.Context, index string, alias string) *redis.StatusCmd
	WFTAlter                      func(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd
	WFTConfigGet                  func(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd
	WFTConfigSet                  func(ctx context.Context, option string, value interface{}) *redis.StatusCmd
	WFTCreate                     func(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd
	WFTCursorDel                  func(ctx context.Context, index string, cursorId int) *redis.StatusCmd
	WFTCursorRead                 func(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd
	WFTDictAdd                    func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDel                    func(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd
	WFTDictDump                   func(ctx context.Context, dict string) *redis.StringSliceCmd
	WFTDropIndex                  func(ctx context.Context, index string) *redis.StatusCmd
	WFTDropIndexWithArgs          func(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd
	WFTExplain                    func(ctx context.Context, index string, query string) *redis.StringCmd
	WFTExplainWithArgs            func(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd
	WFTInfo                       func(ctx context.Context, index string) *redis.FTInfoCmd
	WFTSearch                     func(ctx context.Context, index string, query string) *redis.FTSearchCmd
	WFTSearchWithArgs             func(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd
	WFTSpellCheck                 func(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd
	WFTSpellCheckWithArgs         func(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd
	WFTSynDump                    func(ctx context.Context, index string) *redis.FTSynDumpCmd
	WFTSynUpdate                  func(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd
	WFTSynUpdateWithArgs          func(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd
	WFTTagVals                    func(ctx context.Context, index string, field string) *redis.StringSliceCmd
	WFT_List                      func(ctx context.Context) *redis.StringSliceCmd
	WFlushAll                     func(ctx context.Context) *redis.StatusCmd
	WFlushAllAsync                func(ctx context.Context) *redis.StatusCmd
	WFlushDB                      func(ctx context.Context) *redis.StatusCmd
	WFlushDBAsync                 func(ctx context.Context) *redis.StatusCmd
	WFunctionDelete               func(ctx context.Context, libName string) *redis.StringCmd
	WFunctionDump                 func(ctx context.Context) *redis.StringCmd
	WFunctionFlush                func(ctx context.Context) *redis.StringCmd
	WFunctionFlushAsync           func(ctx context.Context) *redis.StringCmd
	WFunctionKill                 func(ctx context.Context) *redis.StringCmd
	WFunctionList                 func(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd
	WFunctionLoad                 func(ctx context.Context, code string) *redis.StringCmd
	WFunctionLoadReplace          func(ctx context.Context, code string) *redis.StringCmd
	WFunctionRestore              func(ctx context.Context, libDump string) *redis.StringCmd
	WFunctionStats                func(ctx context.Context) *redis.FunctionStatsCmd
	WGeoAdd                       func(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd
	WGeoDist                      func(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd
	WGeoHash                      func(ctx context.Context, key string, members ...string) *redis.StringSliceCmd
	WGeoPos                       func(ctx context.Context, key string, members ...string) *redis.GeoPosCmd
	WGeoRadius                    func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMember            func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd
	WGeoRadiusByMemberStore       func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoRadiusStore               func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd
	WGeoSearch                    func(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd
	WGeoSearchLocation            func(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd
	WGeoSearchStore               func(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd
	WGet                          func(ctx context.Context, key string) *redis.StringCmd
	WGetBit                       func(ctx context.Context, key string, offset int64) *redis.IntCmd
	WGetDel                       func(ctx context.Context, key string) *redis.StringCmd
	WGetEx                        func(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd
	WGetRange                     func(ctx context.Context, key string, start int64, end int64) *redis.StringCmd
	WGetSet                       func(ctx context.Context, key string, value interface{}) *redis.StringCmd
	WHDel                         func(ctx context.Context, key string, fields ...string) *redis.IntCmd
	WHExists                      func(ctx context.Context, key string, field string) *redis.BoolCmd
	WHExpire                      func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHExpireAt                    func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHExpireAtWithArgs            func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHExpireTime                  func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHExpireWithArgs              func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHGet                         func(ctx context.Context, key string, field string) *redis.StringCmd
	WHGetAll                      func(ctx context.Context, key string) *redis.MapStringStringCmd
	WHIncrBy                      func(ctx context.Context, key string, field string, incr int64) *redis.IntCmd
	WHIncrByFloat                 func(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd
	WHKeys                        func(ctx context.Context, key string) *redis.StringSliceCmd
	WHLen                         func(ctx context.Context, key string) *redis.IntCmd
	WHMGet                        func(ctx context.Context, key string, fields ...string) *redis.SliceCmd
	WHMSet                        func(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd
	WHPExpire                     func(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd
	WHPExpireAt                   func(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd
	WHPExpireAtWithArgs           func(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPExpireTime                 func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPExpireWithArgs             func(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd
	WHPTTL                        func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHPersist                     func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHRandField                   func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WHRandFieldWithValues         func(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd
	WHScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHScanNoValues                func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WHSet                         func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WHSetNX                       func(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd
	WHTTL                         func(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd
	WHVals                        func(ctx context.Context, key string) *redis.StringSliceCmd
	WIncr                         func(ctx context.Context, key string) *redis.IntCmd
	WIncrBy                       func(ctx context.Context, key string, value int64) *redis.IntCmd
	WIncrByFloat                  func(ctx context.Context, key string, value float64) *redis.FloatCmd
	WInfo                         func(ctx context.Context, section ...string) *redis.StringCmd
	WJSONArrAppend                func(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd
	WJSONArrIndex                 func(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd
	WJSONArrIndexWithArgs         func(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd
	WJSONArrInsert                func(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd
	WJSONArrLen                   func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrPop                   func(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd
	WJSONArrTrim                  func(ctx context.Context, key string, path string) *redis.IntSliceCmd
	WJSONArrTrimWithArgs          func(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd
	WJSONClear                    func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDebugMemory              func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONDel                      func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONForget                   func(ctx context.Context, key string, path string) *redis.IntCmd
	WJSONGet                      func(ctx context.Context, key string, paths ...string) *redis.JSONCmd
	WJSONGetWithArgs              func(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd
	WJSONMGet                     func(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd
	WJSONMSet                     func(ctx context.Context, params ...interface{}) *redis.StatusCmd
	WJSONMSetArgs                 func(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd
	WJSONMerge                    func(ctx context.Context, key string, path string, value string) *redis.StatusCmd
	WJSONNumIncrBy                func(ctx context.Context, key string, path string, value float64) *redis.JSONCmd
	WJSONObjKeys                  func(ctx context.Context, key string, path string) *redis.SliceCmd
	WJSONObjLen                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONSet                      func(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd
	WJSONSetMode                  func(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd
	WJSONStrAppend                func(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd
	WJSONStrLen                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONToggle                   func(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd
	WJSONType                     func(ctx context.Context, key string, path string) *redis.JSONSliceCmd
	WKeys                         func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WLCS                          func(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd
	WLIndex                       func(ctx context.Context, key string, index int64) *redis.StringCmd
	WLInsert                      func(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertAfter                 func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLInsertBefore                func(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd
	WLLen                         func(ctx context.Context, key string) *redis.IntCmd
	WLMPop                        func(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd
	WLMove                        func(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd
	WLPop                         func(ctx context.Context, key string) *redis.StringCmd
	WLPopCount                    func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WLPos                         func(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd
	WLPosCount                    func(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd
	WLPush                        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLPushX                       func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WLRange                       func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WLRem                         func(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd
	WLSet                         func(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd
	WLTrim                        func(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd
	WLastSave                     func(ctx context.Context) *redis.IntCmd
	WMGet                         func(ctx context.Context, keys ...string) *redis.SliceCmd
	WMSet                         func(ctx context.Context, values ...interface{}) *redis.StatusCmd
	WMSetNX                       func(ctx context.Context, values ...interface{}) *redis.BoolCmd
	WMemoryUsage                  func(ctx context.Context, key string, samples ...int) *redis.IntCmd
	WMigrate                      func(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd
	WModuleLoadex                 func(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd
	WMove                         func(ctx context.Context, key string, db int) *redis.BoolCmd
	WObjectEncoding               func(ctx context.Context, key string) *redis.StringCmd
	WObjectFreq                   func(ctx context.Context, key string) *redis.IntCmd
	WObjectIdleTime               func(ctx context.Context, key string) *redis.DurationCmd
	WObjectRefCount               func(ctx context.Context, key string) *redis.IntCmd
	WPExpire                      func(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd
	WPExpireAt                    func(ctx context.Context, key string, tm time.Time) *redis.BoolCmd
	WPExpireTime                  func(ctx context.Context, key string) *redis.DurationCmd
	WPFAdd                        func(ctx context.Context, key string, els ...interface{}) *redis.IntCmd
	WPFCount                      func(ctx context.Context, keys ...string) *redis.IntCmd
	WPFMerge                      func(ctx context.Context, dest string, keys ...string) *redis.StatusCmd
	WPSubscribe                   func(ctx context.Context, channels ...string) *redis.PubSub
	WPTTL                         func(ctx context.Context, key string) *redis.DurationCmd
	WPersist                      func(ctx context.Context, key string) *redis.BoolCmd
	WPing                         func(ctx context.Context) *redis.StatusCmd
	WPipeline                     func() redis.Pipeliner
	WPipelined                    func(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WPoolStats                    func() *redis.PoolStats
	WProcess                      func(ctx context.Context, cmd redis.Cmder) error
	WPubSubChannels               func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubNumPat                 func(ctx context.Context) *redis.IntCmd
	WPubSubNumSub                 func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPubSubShardChannels          func(ctx context.Context, pattern string) *redis.StringSliceCmd
	WPubSubShardNumSub            func(ctx context.Context, channels ...string) *redis.MapStringIntCmd
	WPublish                      func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
	WQuit                         func(ctx context.Context) *redis.StatusCmd
	WRPop                         func(ctx context.Context, key string) *redis.StringCmd
	WRPopCount                    func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WRPopLPush                    func(ctx context.Context, source string, destination string) *redis.StringCmd
	WRPush                        func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WRPushX                       func(ctx context.Context, key string, values ...interface{}) *redis.IntCmd
	WRandomKey                    func(ctx context.Context) *redis.StringCmd
	WReadOnly                     func(ctx context.Context) *redis.StatusCmd
	WReadWrite                    func(ctx context.Context) *redis.StatusCmd
	WRename                       func(ctx context.Context, key string, newkey string) *redis.StatusCmd
	WRenameNX                     func(ctx context.Context, key string, newkey string) *redis.BoolCmd
	WRestore                      func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WRestoreReplace               func(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd
	WSAdd                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSCard                        func(ctx context.Context, key string) *redis.IntCmd
	WSDiff                        func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSDiffStore                   func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSInter                       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSInterCard                   func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WSInterStore                  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSIsMember                    func(ctx context.Context, key string, member interface{}) *redis.BoolCmd
	WSMIsMember                   func(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd
	WSMembers                     func(ctx context.Context, key string) *redis.StringSliceCmd
	WSMembersMap                  func(ctx context.Context, key string) *redis.StringStructMapCmd
	WSMove                        func(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd
	WSPop                         func(ctx context.Context, key string) *redis.StringCmd
	WSPopN                        func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSPublish                     func(ctx context.Context, channel string, message interface{}) *redis.IntCmd
	WSRandMember                  func(ctx context.Context, key string) *redis.StringCmd
	WSRandMemberN                 func(ctx context.Context, key string, count int64) *redis.StringSliceCmd
	WSRem                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WSScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WSSubscribe                   func(ctx context.Context, channels ...string) *redis.PubSub
	WSUnion                       func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WSUnionStore                  func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WSave                         func(ctx context.Context) *redis.StatusCmd
	WScan                         func(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd
	WScanType                     func(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd
	WScriptExists                 func(ctx context.Context, hashes ...string) *redis.BoolSliceCmd
	WScriptFlush                  func(ctx context.Context) *redis.StatusCmd
	WScriptKill                   func(ctx context.Context) *redis.StatusCmd
	WScriptLoad                   func(ctx context.Context, script string) *redis.StringCmd
	WSet                          func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetArgs                      func(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd
	WSetBit                       func(ctx context.Context, key string, offset int64, value int) *redis.IntCmd
	WSetEx                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd
	WSetNX                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WSetRange                     func(ctx context.Context, key string, offset int64, value string) *redis.IntCmd
	WSetXX                        func(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd
	WShutdown                     func(ctx context.Context) *redis.StatusCmd
	WShutdownNoSave               func(ctx context.Context) *redis.StatusCmd
	WShutdownSave                 func(ctx context.Context) *redis.StatusCmd
	WSlaveOf                      func(ctx context.Context, host string, port string) *redis.StatusCmd
	WSlowLogGet                   func(ctx context.Context, num int64) *redis.SlowLogCmd
	WSort                         func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortInterfaces               func(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd
	WSortRO                       func(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd
	WSortStore                    func(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd
	WStrLen                       func(ctx context.Context, key string) *redis.IntCmd
	WSubscribe                    func(ctx context.Context, channels ...string) *redis.PubSub
	WTDigestAdd                   func(ctx context.Context, key string, elements ...float64) *redis.StatusCmd
	WTDigestByRank                func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestByRevRank             func(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd
	WTDigestCDF                   func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestCreate                func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestCreateWithCompression func(ctx context.Context, key string, compression int64) *redis.StatusCmd
	WTDigestInfo                  func(ctx context.Context, key string) *redis.TDigestInfoCmd
	WTDigestMax                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestMerge                 func(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd
	WTDigestMin                   func(ctx context.Context, key string) *redis.FloatCmd
	WTDigestQuantile              func(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd
	WTDigestRank                  func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestReset                 func(ctx context.Context, key string) *redis.StatusCmd
	WTDigestRevRank               func(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd
	WTDigestTrimmedMean           func(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd
	WTFCall                       func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNC                  func(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd
	WTFCallASYNCArgs              func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFCallArgs                   func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd
	WTFunctionDelete              func(ctx context.Context, libName string) *redis.StatusCmd
	WTFunctionList                func(ctx context.Context) *redis.MapStringInterfaceSliceCmd
	WTFunctionListArgs            func(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd
	WTFunctionLoad                func(ctx context.Context, lib string) *redis.StatusCmd
	WTFunctionLoadArgs            func(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd
	WTSAdd                        func(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd
	WTSAddWithArgs                func(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd
	WTSAlter                      func(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd
	WTSCreate                     func(ctx context.Context, key string) *redis.StatusCmd
	WTSCreateRule                 func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd
	WTSCreateRuleWithArgs         func(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd
	WTSCreateWithArgs             func(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd
	WTSDecrBy                     func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSDecrByWithArgs             func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSDel                        func(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd
	WTSDeleteRule                 func(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd
	WTSGet                        func(ctx context.Context, key string) *redis.TSTimestampValueCmd
	WTSGetWithArgs                func(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd
	WTSIncrBy                     func(ctx context.Context, Key string, timestamp float64) *redis.IntCmd
	WTSIncrByWithArgs             func(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd
	WTSInfo                       func(ctx context.Context, key string) *redis.MapStringInterfaceCmd
	WTSInfoWithArgs               func(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd
	WTSMAdd                       func(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd
	WTSMGet                       func(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd
	WTSMGetWithArgs               func(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRange                     func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRangeWithArgs             func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSMRevRange                  func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd
	WTSMRevRangeWithArgs          func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd
	WTSQueryIndex                 func(ctx context.Context, filterExpr []string) *redis.StringSliceCmd
	WTSRange                      func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRangeWithArgs              func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd
	WTSRevRange                   func(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd
	WTSRevRangeWithArgs           func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd
	WTTL                          func(ctx context.Context, key string) *redis.DurationCmd
	WTime                         func(ctx context.Context) *redis.TimeCmd
	WTopKAdd                      func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKCount                    func(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd
	WTopKIncrBy                   func(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd
	WTopKInfo                     func(ctx context.Context, key string) *redis.TopKInfoCmd
	WTopKList                     func(ctx context.Context, key string) *redis.StringSliceCmd
	WTopKListWithCount            func(ctx context.Context, key string) *redis.MapStringIntCmd
	WTopKQuery                    func(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd
	WTopKReserve                  func(ctx context.Context, key string, k int64) *redis.StatusCmd
	WTopKReserveWithOptions       func(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd
	WTouch                        func(ctx context.Context, keys ...string) *redis.IntCmd
	WTxPipeline                   func() redis.Pipeliner
	WTxPipelined                  func(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error)
	WType                         func(ctx context.Context, key string) *redis.StatusCmd
	WUnlink                       func(ctx context.Context, keys ...string) *redis.IntCmd
	WWatch                        func(ctx context.Context, fn func(*redis.Tx) error, keys ...string) error
	WXAck                         func(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd
	WXAdd                         func(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd
	WXAutoClaim                   func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd
	WXAutoClaimJustID             func(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd
	WXClaim                       func(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd
	WXClaimJustID                 func(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd
	WXDel                         func(ctx context.Context, stream string, ids ...string) *redis.IntCmd
	WXGroupCreate                 func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupCreateConsumer         func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupCreateMkStream         func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXGroupDelConsumer            func(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd
	WXGroupDestroy                func(ctx context.Context, stream string, group string) *redis.IntCmd
	WXGroupSetID                  func(ctx context.Context, stream string, group string, start string) *redis.StatusCmd
	WXInfoConsumers               func(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd
	WXInfoGroups                  func(ctx context.Context, key string) *redis.XInfoGroupsCmd
	WXInfoStream                  func(ctx context.Context, key string) *redis.XInfoStreamCmd
	WXInfoStreamFull              func(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd
	WXLen                         func(ctx context.Context, stream string) *redis.IntCmd
	WXPending                     func(ctx context.Context, stream string, group string) *redis.XPendingCmd
	WXPendingExt                  func(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd
	WXRange                       func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRangeN                      func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXRead                        func(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd
	WXReadGroup                   func(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd
	WXReadStreams                 func(ctx context.Context, streams ...string) *redis.XStreamSliceCmd
	WXRevRange                    func(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd
	WXRevRangeN                   func(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd
	WXTrimMaxLen                  func(ctx context.Context, key string, maxLen int64) *redis.IntCmd
	WXTrimMaxLenApprox            func(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd
	WXTrimMinID                   func(ctx context.Context, key string, minID string) *redis.IntCmd
	WXTrimMinIDApprox             func(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd
	WZAdd                         func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddArgs                     func(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd
	WZAddArgsIncr                 func(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd
	WZAddGT                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddLT                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddNX                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZAddXX                       func(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd
	WZCard                        func(ctx context.Context, key string) *redis.IntCmd
	WZCount                       func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZDiff                        func(ctx context.Context, keys ...string) *redis.StringSliceCmd
	WZDiffStore                   func(ctx context.Context, destination string, keys ...string) *redis.IntCmd
	WZDiffWithScores              func(ctx context.Context, keys ...string) *redis.ZSliceCmd
	WZIncrBy                      func(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd
	WZInter                       func(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd
	WZInterCard                   func(ctx context.Context, limit int64, keys ...string) *redis.IntCmd
	WZInterStore                  func(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd
	WZInterWithScores             func(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd
	WZLexCount                    func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZMPop                        func(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd
	WZMScore                      func(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd
	WZPopMax                      func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZPopMin                      func(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd
	WZRandMember                  func(ctx context.Context, key string, count int) *redis.StringSliceCmd
	WZRandMemberWithScores        func(ctx context.Context, key string, count int) *redis.ZSliceCmd
	WZRange                       func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRangeArgs                   func(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd
	WZRangeArgsWithScores         func(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd
	WZRangeByLex                  func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScore                func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRangeByScoreWithScores      func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRangeStore                  func(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd
	WZRangeWithScores             func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRank                        func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRankWithScore               func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZRem                         func(ctx context.Context, key string, members ...interface{}) *redis.IntCmd
	WZRemRangeByLex               func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRemRangeByRank              func(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd
	WZRemRangeByScore             func(ctx context.Context, key string, min string, max string) *redis.IntCmd
	WZRevRange                    func(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd
	WZRevRangeByLex               func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScore             func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd
	WZRevRangeByScoreWithScores   func(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd
	WZRevRangeWithScores          func(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd
	WZRevRank                     func(ctx context.Context, key string, member string) *redis.IntCmd
	WZRevRankWithScore            func(ctx context.Context, key string, member string) *redis.RankWithScoreCmd
	WZScan                        func(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd
	WZScore                       func(ctx context.Context, key string, member string) *redis.FloatCmd
	WZUnion                       func(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd
	WZUnionStore                  func(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd
	WZUnionWithScores             func(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd
}

func (W _github_com_redis_go_redis_v9_UniversalClient) ACLDryRun(ctx context.Context, username string, command ...interface{}) *redis.StringCmd {
	return W.WACLDryRun(ctx, username, command...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ACLLog(ctx context.Context, count int64) *redis.ACLLogCmd {
	return W.WACLLog(ctx, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ACLLogReset(ctx context.Context) *redis.StatusCmd {
	return W.WACLLogReset(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) AddHook(a0 redis.Hook) {
	W.WAddHook(a0)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Append(ctx context.Context, key string, value string) *redis.IntCmd {
	return W.WAppend(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WBFCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WBFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFInfo(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFInfoArg(ctx context.Context, key string, option string) *redis.BFInfoCmd {
	return W.WBFInfoArg(ctx, key, option)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFInfoCapacity(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoCapacity(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFInfoExpansion(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoExpansion(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFInfoFilters(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoFilters(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFInfoItems(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoItems(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFInfoSize(ctx context.Context, key string) *redis.BFInfoCmd {
	return W.WBFInfoSize(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFInsert(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WBFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFMAdd(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WBFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserve(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WBFReserveExpansion(ctx, key, errorRate, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	return W.WBFReserveNonScaling(ctx, key, errorRate, capacity)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFReserveWithArgs(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd {
	return W.WBFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WBFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WBLMPop(ctx, timeout, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BLMove(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd {
	return W.WBLMove(ctx, source, destination, srcpos, destpos, timeout)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBLPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	return W.WBRPop(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd {
	return W.WBRPopLPush(ctx, source, destination, timeout)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WBZMPop(ctx, timeout, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMax(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	return W.WBZPopMin(ctx, timeout, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BgRewriteAOF(ctx context.Context) *redis.StatusCmd {
	return W.WBgRewriteAOF(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BgSave(ctx context.Context) *redis.StatusCmd {
	return W.WBgSave(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd {
	return W.WBitCount(ctx, key, bitCount)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BitField(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitField(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BitFieldRO(ctx context.Context, key string, values ...interface{}) *redis.IntSliceCmd {
	return W.WBitFieldRO(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BitOpAnd(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpAnd(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BitOpNot(ctx context.Context, destKey string, key string) *redis.IntCmd {
	return W.WBitOpNot(ctx, destKey, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BitOpOr(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpOr(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BitOpXor(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	return W.WBitOpXor(ctx, destKey, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd {
	return W.WBitPos(ctx, key, bit, pos...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) BitPosSpan(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd {
	return W.WBitPosSpan(ctx, key, bit, start, end, span)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAdd(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFAddNX(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFAddNX(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFCount(ctx context.Context, key string, element interface{}) *redis.IntCmd {
	return W.WCFCount(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFDel(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFDel(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	return W.WCFExists(ctx, key, element)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFInfo(ctx context.Context, key string) *redis.CFInfoCmd {
	return W.WCFInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFInsert(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFInsert(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFInsertNX(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCFInsertNX(ctx, key, options, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	return W.WCFLoadChunk(ctx, key, iterator, data)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WCFMExists(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFReserve(ctx context.Context, key string, capacity int64) *redis.StatusCmd {
	return W.WCFReserve(ctx, key, capacity)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFReserveBucketSize(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd {
	return W.WCFReserveBucketSize(ctx, key, capacity, bucketsize)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFReserveExpansion(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd {
	return W.WCFReserveExpansion(ctx, key, capacity, expansion)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFReserveMaxIterations(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd {
	return W.WCFReserveMaxIterations(ctx, key, capacity, maxiterations)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFReserveWithArgs(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd {
	return W.WCFReserveWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	return W.WCFScanDump(ctx, key, iterator)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CMSIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CMSInfo(ctx context.Context, key string) *redis.CMSInfoCmd {
	return W.WCMSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CMSInitByDim(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd {
	return W.WCMSInitByDim(ctx, key, width, height)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CMSInitByProb(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd {
	return W.WCMSInitByProb(ctx, key, errorRate, probability)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd {
	return W.WCMSMerge(ctx, destKey, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd {
	return W.WCMSMergeWithWeight(ctx, destKey, sourceKeys)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CMSQuery(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WCMSQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientGetName(ctx context.Context) *redis.StringCmd {
	return W.WClientGetName(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientID(ctx context.Context) *redis.IntCmd {
	return W.WClientID(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientInfo(ctx context.Context) *redis.ClientInfoCmd {
	return W.WClientInfo(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientKill(ctx context.Context, ipPort string) *redis.StatusCmd {
	return W.WClientKill(ctx, ipPort)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientKillByFilter(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WClientKillByFilter(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientList(ctx context.Context) *redis.StringCmd {
	return W.WClientList(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientPause(ctx context.Context, dur time.Duration) *redis.BoolCmd {
	return W.WClientPause(ctx, dur)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientUnblock(ctx context.Context, id int64) *redis.IntCmd {
	return W.WClientUnblock(ctx, id)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientUnblockWithError(ctx context.Context, id int64) *redis.IntCmd {
	return W.WClientUnblockWithError(ctx, id)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClientUnpause(ctx context.Context) *redis.BoolCmd {
	return W.WClientUnpause(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Close() error {
	return W.WClose()
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterAddSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterAddSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterAddSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterAddSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterCountFailureReports(ctx context.Context, nodeID string) *redis.IntCmd {
	return W.WClusterCountFailureReports(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterCountKeysInSlot(ctx context.Context, slot int) *redis.IntCmd {
	return W.WClusterCountKeysInSlot(ctx, slot)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterDelSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	return W.WClusterDelSlots(ctx, slots...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterDelSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	return W.WClusterDelSlotsRange(ctx, min, max)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterFailover(ctx context.Context) *redis.StatusCmd {
	return W.WClusterFailover(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterForget(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterForget(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) *redis.StringSliceCmd {
	return W.WClusterGetKeysInSlot(ctx, slot, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterInfo(ctx context.Context) *redis.StringCmd {
	return W.WClusterInfo(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterKeySlot(ctx context.Context, key string) *redis.IntCmd {
	return W.WClusterKeySlot(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterLinks(ctx context.Context) *redis.ClusterLinksCmd {
	return W.WClusterLinks(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterMeet(ctx context.Context, host string, port string) *redis.StatusCmd {
	return W.WClusterMeet(ctx, host, port)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterMyShardID(ctx context.Context) *redis.StringCmd {
	return W.WClusterMyShardID(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterNodes(ctx context.Context) *redis.StringCmd {
	return W.WClusterNodes(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterReplicate(ctx context.Context, nodeID string) *redis.StatusCmd {
	return W.WClusterReplicate(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterResetHard(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetHard(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterResetSoft(ctx context.Context) *redis.StatusCmd {
	return W.WClusterResetSoft(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterSaveConfig(ctx context.Context) *redis.StatusCmd {
	return W.WClusterSaveConfig(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterShards(ctx context.Context) *redis.ClusterShardsCmd {
	return W.WClusterShards(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterSlaves(ctx context.Context, nodeID string) *redis.StringSliceCmd {
	return W.WClusterSlaves(ctx, nodeID)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ClusterSlots(ctx context.Context) *redis.ClusterSlotsCmd {
	return W.WClusterSlots(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Command(ctx context.Context) *redis.CommandsInfoCmd {
	return W.WCommand(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CommandGetKeys(ctx context.Context, commands ...interface{}) *redis.StringSliceCmd {
	return W.WCommandGetKeys(ctx, commands...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CommandGetKeysAndFlags(ctx context.Context, commands ...interface{}) *redis.KeyFlagsCmd {
	return W.WCommandGetKeysAndFlags(ctx, commands...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) CommandList(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd {
	return W.WCommandList(ctx, filter)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ConfigGet(ctx context.Context, parameter string) *redis.MapStringStringCmd {
	return W.WConfigGet(ctx, parameter)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ConfigResetStat(ctx context.Context) *redis.StatusCmd {
	return W.WConfigResetStat(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ConfigRewrite(ctx context.Context) *redis.StatusCmd {
	return W.WConfigRewrite(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ConfigSet(ctx context.Context, parameter string, value string) *redis.StatusCmd {
	return W.WConfigSet(ctx, parameter, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd {
	return W.WCopy(ctx, sourceKey, destKey, db, replace)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) DBSize(ctx context.Context) *redis.IntCmd {
	return W.WDBSize(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) DebugObject(ctx context.Context, key string) *redis.StringCmd {
	return W.WDebugObject(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Decr(ctx context.Context, key string) *redis.IntCmd {
	return W.WDecr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) DecrBy(ctx context.Context, key string, decrement int64) *redis.IntCmd {
	return W.WDecrBy(ctx, key, decrement)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WDel(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Do(ctx context.Context, args ...interface{}) *redis.Cmd {
	return W.WDo(ctx, args...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Dump(ctx context.Context, key string) *redis.StringCmd {
	return W.WDump(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Echo(ctx context.Context, message interface{}) *redis.StringCmd {
	return W.WEcho(ctx, message)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEval(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalRO(ctx, script, keys, args...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalSha(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WEvalShaRO(ctx, sha1, keys, args...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Exists(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WExists(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Expire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ExpireGT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireGT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ExpireLT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireLT(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ExpireNX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireNX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ExpireXX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WExpireXX(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FCall(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCall(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FCallRO(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRO(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FCallRo(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	return W.WFCallRo(ctx, function, keys, args...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTAggregate(ctx context.Context, index string, query string) *redis.MapStringInterfaceCmd {
	return W.WFTAggregate(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTAggregateWithArgs(ctx context.Context, index string, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd {
	return W.WFTAggregateWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTAliasAdd(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasAdd(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTAliasDel(ctx context.Context, alias string) *redis.StatusCmd {
	return W.WFTAliasDel(ctx, alias)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTAliasUpdate(ctx context.Context, index string, alias string) *redis.StatusCmd {
	return W.WFTAliasUpdate(ctx, index, alias)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *redis.StatusCmd {
	return W.WFTAlter(ctx, index, skipInitialScan, definition)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTConfigGet(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd {
	return W.WFTConfigGet(ctx, option)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTConfigSet(ctx context.Context, option string, value interface{}) *redis.StatusCmd {
	return W.WFTConfigSet(ctx, option, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTCreate(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd {
	return W.WFTCreate(ctx, index, options, schema...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTCursorDel(ctx context.Context, index string, cursorId int) *redis.StatusCmd {
	return W.WFTCursorDel(ctx, index, cursorId)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTCursorRead(ctx context.Context, index string, cursorId int, count int) *redis.MapStringInterfaceCmd {
	return W.WFTCursorRead(ctx, index, cursorId, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTDictAdd(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictAdd(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTDictDel(ctx context.Context, dict string, term ...interface{}) *redis.IntCmd {
	return W.WFTDictDel(ctx, dict, term...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTDictDump(ctx context.Context, dict string) *redis.StringSliceCmd {
	return W.WFTDictDump(ctx, dict)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTDropIndex(ctx context.Context, index string) *redis.StatusCmd {
	return W.WFTDropIndex(ctx, index)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTDropIndexWithArgs(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd {
	return W.WFTDropIndexWithArgs(ctx, index, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTExplain(ctx context.Context, index string, query string) *redis.StringCmd {
	return W.WFTExplain(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTExplainWithArgs(ctx context.Context, index string, query string, options *redis.FTExplainOptions) *redis.StringCmd {
	return W.WFTExplainWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTInfo(ctx context.Context, index string) *redis.FTInfoCmd {
	return W.WFTInfo(ctx, index)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTSearch(ctx context.Context, index string, query string) *redis.FTSearchCmd {
	return W.WFTSearch(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTSearchWithArgs(ctx context.Context, index string, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd {
	return W.WFTSearchWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTSpellCheck(ctx context.Context, index string, query string) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheck(ctx, index, query)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTSpellCheckWithArgs(ctx context.Context, index string, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd {
	return W.WFTSpellCheckWithArgs(ctx, index, query, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTSynDump(ctx context.Context, index string) *redis.FTSynDumpCmd {
	return W.WFTSynDump(ctx, index)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTSynUpdate(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdate(ctx, index, synGroupId, terms)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId interface{}, options *redis.FTSynUpdateOptions, terms []interface{}) *redis.StatusCmd {
	return W.WFTSynUpdateWithArgs(ctx, index, synGroupId, options, terms)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FTTagVals(ctx context.Context, index string, field string) *redis.StringSliceCmd {
	return W.WFTTagVals(ctx, index, field)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FT_List(ctx context.Context) *redis.StringSliceCmd {
	return W.WFT_List(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FlushAll(ctx context.Context) *redis.StatusCmd {
	return W.WFlushAll(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FlushAllAsync(ctx context.Context) *redis.StatusCmd {
	return W.WFlushAllAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FlushDB(ctx context.Context) *redis.StatusCmd {
	return W.WFlushDB(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FlushDBAsync(ctx context.Context) *redis.StatusCmd {
	return W.WFlushDBAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionDelete(ctx context.Context, libName string) *redis.StringCmd {
	return W.WFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionDump(ctx context.Context) *redis.StringCmd {
	return W.WFunctionDump(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionFlush(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionFlushAsync(ctx context.Context) *redis.StringCmd {
	return W.WFunctionFlushAsync(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionKill(ctx context.Context) *redis.StringCmd {
	return W.WFunctionKill(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionList(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd {
	return W.WFunctionList(ctx, q)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionLoad(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoad(ctx, code)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionLoadReplace(ctx context.Context, code string) *redis.StringCmd {
	return W.WFunctionLoadReplace(ctx, code)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionRestore(ctx context.Context, libDump string) *redis.StringCmd {
	return W.WFunctionRestore(ctx, libDump)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) FunctionStats(ctx context.Context) *redis.FunctionStatsCmd {
	return W.WFunctionStats(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd {
	return W.WGeoAdd(ctx, key, geoLocation...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	return W.WGeoDist(ctx, key, member1, member2, unit)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoHash(ctx context.Context, key string, members ...string) *redis.StringSliceCmd {
	return W.WGeoHash(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoPos(ctx context.Context, key string, members ...string) *redis.GeoPosCmd {
	return W.WGeoPos(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadius(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoRadiusByMember(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	return W.WGeoRadiusByMember(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusByMemberStore(ctx, key, member, query)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	return W.WGeoRadiusStore(ctx, key, longitude, latitude, query)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd {
	return W.WGeoSearch(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd {
	return W.WGeoSearchLocation(ctx, key, q)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GeoSearchStore(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd {
	return W.WGeoSearchStore(ctx, key, store, q)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Get(ctx context.Context, key string) *redis.StringCmd {
	return W.WGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GetBit(ctx context.Context, key string, offset int64) *redis.IntCmd {
	return W.WGetBit(ctx, key, offset)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GetDel(ctx context.Context, key string) *redis.StringCmd {
	return W.WGetDel(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GetEx(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd {
	return W.WGetEx(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GetRange(ctx context.Context, key string, start int64, end int64) *redis.StringCmd {
	return W.WGetRange(ctx, key, start, end)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) GetSet(ctx context.Context, key string, value interface{}) *redis.StringCmd {
	return W.WGetSet(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HDel(ctx context.Context, key string, fields ...string) *redis.IntCmd {
	return W.WHDel(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HExists(ctx context.Context, key string, field string) *redis.BoolCmd {
	return W.WHExists(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HGet(ctx context.Context, key string, field string) *redis.StringCmd {
	return W.WHGet(ctx, key, field)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HGetAll(ctx context.Context, key string) *redis.MapStringStringCmd {
	return W.WHGetAll(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HIncrBy(ctx context.Context, key string, field string, incr int64) *redis.IntCmd {
	return W.WHIncrBy(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HIncrByFloat(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd {
	return W.WHIncrByFloat(ctx, key, field, incr)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HKeys(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHKeys(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WHLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HMGet(ctx context.Context, key string, fields ...string) *redis.SliceCmd {
	return W.WHMGet(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HMSet(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd {
	return W.WHMSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpire(ctx, key, expiration, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAt(ctx, key, tm, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireAtWithArgs(ctx, key, tm, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HPExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireTime(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	return W.WHPExpireWithArgs(ctx, key, expiration, expirationArgs, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HPTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HPersist(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHPersist(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HRandField(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WHRandField(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HRandFieldWithValues(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd {
	return W.WHRandFieldWithValues(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WHScanNoValues(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HSet(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WHSet(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HSetNX(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd {
	return W.WHSetNX(ctx, key, field, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	return W.WHTTL(ctx, key, fields...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) HVals(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WHVals(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Incr(ctx context.Context, key string) *redis.IntCmd {
	return W.WIncr(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) IncrBy(ctx context.Context, key string, value int64) *redis.IntCmd {
	return W.WIncrBy(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) IncrByFloat(ctx context.Context, key string, value float64) *redis.FloatCmd {
	return W.WIncrByFloat(ctx, key, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Info(ctx context.Context, section ...string) *redis.StringCmd {
	return W.WInfo(ctx, section...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONArrAppend(ctx context.Context, key string, path string, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrAppend(ctx, key, path, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONArrIndex(ctx context.Context, key string, path string, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndex(ctx, key, path, value...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONArrIndexWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrIndexArgs, value ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrIndexWithArgs(ctx, key, path, options, value...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONArrInsert(ctx context.Context, key string, path string, index int64, values ...interface{}) *redis.IntSliceCmd {
	return W.WJSONArrInsert(ctx, key, path, index, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONArrLen(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONArrPop(ctx context.Context, key string, path string, index int) *redis.StringSliceCmd {
	return W.WJSONArrPop(ctx, key, path, index)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONArrTrim(ctx context.Context, key string, path string) *redis.IntSliceCmd {
	return W.WJSONArrTrim(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONArrTrimWithArgs(ctx context.Context, key string, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd {
	return W.WJSONArrTrimWithArgs(ctx, key, path, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONClear(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONClear(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONDebugMemory(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDebugMemory(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONDel(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONDel(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONForget(ctx context.Context, key string, path string) *redis.IntCmd {
	return W.WJSONForget(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONGet(ctx context.Context, key string, paths ...string) *redis.JSONCmd {
	return W.WJSONGet(ctx, key, paths...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONGetWithArgs(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd {
	return W.WJSONGetWithArgs(ctx, key, options, paths...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONMGet(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd {
	return W.WJSONMGet(ctx, path, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONMSet(ctx context.Context, params ...interface{}) *redis.StatusCmd {
	return W.WJSONMSet(ctx, params...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONMSetArgs(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd {
	return W.WJSONMSetArgs(ctx, docs)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONMerge(ctx context.Context, key string, path string, value string) *redis.StatusCmd {
	return W.WJSONMerge(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONNumIncrBy(ctx context.Context, key string, path string, value float64) *redis.JSONCmd {
	return W.WJSONNumIncrBy(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONObjKeys(ctx context.Context, key string, path string) *redis.SliceCmd {
	return W.WJSONObjKeys(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONObjLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONObjLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONSet(ctx context.Context, key string, path string, value interface{}) *redis.StatusCmd {
	return W.WJSONSet(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONSetMode(ctx context.Context, key string, path string, value interface{}, mode string) *redis.StatusCmd {
	return W.WJSONSetMode(ctx, key, path, value, mode)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONStrAppend(ctx context.Context, key string, path string, value string) *redis.IntPointerSliceCmd {
	return W.WJSONStrAppend(ctx, key, path, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONStrLen(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONStrLen(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONToggle(ctx context.Context, key string, path string) *redis.IntPointerSliceCmd {
	return W.WJSONToggle(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) JSONType(ctx context.Context, key string, path string) *redis.JSONSliceCmd {
	return W.WJSONType(ctx, key, path)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Keys(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WKeys(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LCS(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd {
	return W.WLCS(ctx, q)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LIndex(ctx context.Context, key string, index int64) *redis.StringCmd {
	return W.WLIndex(ctx, key, index)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsert(ctx, key, op, pivot, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertAfter(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	return W.WLInsertBefore(ctx, key, pivot, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WLLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LMPop(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	return W.WLMPop(ctx, direction, count, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd {
	return W.WLMove(ctx, source, destination, srcpos, destpos)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WLPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WLPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LPos(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd {
	return W.WLPos(ctx, key, value, args)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LPosCount(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd {
	return W.WLPosCount(ctx, key, value, count, args)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WLPushX(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WLRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LRem(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd {
	return W.WLRem(ctx, key, count, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LSet(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd {
	return W.WLSet(ctx, key, index, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LTrim(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd {
	return W.WLTrim(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) LastSave(ctx context.Context) *redis.IntCmd {
	return W.WLastSave(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) MGet(ctx context.Context, keys ...string) *redis.SliceCmd {
	return W.WMGet(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) MSet(ctx context.Context, values ...interface{}) *redis.StatusCmd {
	return W.WMSet(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) MSetNX(ctx context.Context, values ...interface{}) *redis.BoolCmd {
	return W.WMSetNX(ctx, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) MemoryUsage(ctx context.Context, key string, samples ...int) *redis.IntCmd {
	return W.WMemoryUsage(ctx, key, samples...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	return W.WMigrate(ctx, host, port, key, db, timeout)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ModuleLoadex(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd {
	return W.WModuleLoadex(ctx, conf)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Move(ctx context.Context, key string, db int) *redis.BoolCmd {
	return W.WMove(ctx, key, db)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ObjectEncoding(ctx context.Context, key string) *redis.StringCmd {
	return W.WObjectEncoding(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ObjectFreq(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectFreq(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ObjectIdleTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WObjectIdleTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ObjectRefCount(ctx context.Context, key string) *redis.IntCmd {
	return W.WObjectRefCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PExpire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	return W.WPExpire(ctx, key, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	return W.WPExpireAt(ctx, key, tm)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPExpireTime(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PFAdd(ctx context.Context, key string, els ...interface{}) *redis.IntCmd {
	return W.WPFAdd(ctx, key, els...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PFCount(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WPFCount(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PFMerge(ctx context.Context, dest string, keys ...string) *redis.StatusCmd {
	return W.WPFMerge(ctx, dest, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PSubscribe(ctx context.Context, channels ...string) *redis.PubSub {
	return W.WPSubscribe(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PTTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WPTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Persist(ctx context.Context, key string) *redis.BoolCmd {
	return W.WPersist(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Ping(ctx context.Context) *redis.StatusCmd {
	return W.WPing(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Pipeline() redis.Pipeliner {
	return W.WPipeline()
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Pipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WPipelined(ctx, fn)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PoolStats() *redis.PoolStats {
	return W.WPoolStats()
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Process(ctx context.Context, cmd redis.Cmder) error {
	return W.WProcess(ctx, cmd)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PubSubChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PubSubNumPat(ctx context.Context) *redis.IntCmd {
	return W.WPubSubNumPat(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PubSubNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PubSubShardChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	return W.WPubSubShardChannels(ctx, pattern)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) PubSubShardNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	return W.WPubSubShardNumSub(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Publish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WPublish(ctx, channel, message)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Quit(ctx context.Context) *redis.StatusCmd {
	return W.WQuit(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) RPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WRPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) RPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WRPopCount(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) RPopLPush(ctx context.Context, source string, destination string) *redis.StringCmd {
	return W.WRPopLPush(ctx, source, destination)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) RPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPush(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) RPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	return W.WRPushX(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) RandomKey(ctx context.Context) *redis.StringCmd {
	return W.WRandomKey(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ReadOnly(ctx context.Context) *redis.StatusCmd {
	return W.WReadOnly(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ReadWrite(ctx context.Context) *redis.StatusCmd {
	return W.WReadWrite(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Rename(ctx context.Context, key string, newkey string) *redis.StatusCmd {
	return W.WRename(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) RenameNX(ctx context.Context, key string, newkey string) *redis.BoolCmd {
	return W.WRenameNX(ctx, key, newkey)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Restore(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestore(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	return W.WRestoreReplace(ctx, key, ttl, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SAdd(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WSCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SInter(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSInter(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WSInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SInterStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSInterStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SIsMember(ctx context.Context, key string, member interface{}) *redis.BoolCmd {
	return W.WSIsMember(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SMIsMember(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd {
	return W.WSMIsMember(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SMembers(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WSMembers(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SMembersMap(ctx context.Context, key string) *redis.StringStructMapCmd {
	return W.WSMembersMap(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SMove(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd {
	return W.WSMove(ctx, source, destination, member)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SPop(ctx context.Context, key string) *redis.StringCmd {
	return W.WSPop(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SPopN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSPopN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SPublish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	return W.WSPublish(ctx, channel, message)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SRandMember(ctx context.Context, key string) *redis.StringCmd {
	return W.WSRandMember(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SRandMemberN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	return W.WSRandMemberN(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WSRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WSScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SSubscribe(ctx context.Context, channels ...string) *redis.PubSub {
	return W.WSSubscribe(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SUnion(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WSUnion(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SUnionStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WSUnionStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Save(ctx context.Context) *redis.StatusCmd {
	return W.WSave(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Scan(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WScan(ctx, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd {
	return W.WScanType(ctx, cursor, match, count, keyType)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ScriptExists(ctx context.Context, hashes ...string) *redis.BoolSliceCmd {
	return W.WScriptExists(ctx, hashes...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ScriptFlush(ctx context.Context) *redis.StatusCmd {
	return W.WScriptFlush(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ScriptKill(ctx context.Context) *redis.StatusCmd {
	return W.WScriptKill(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	return W.WScriptLoad(ctx, script)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSet(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SetArgs(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd {
	return W.WSetArgs(ctx, key, value, a)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SetBit(ctx context.Context, key string, offset int64, value int) *redis.IntCmd {
	return W.WSetBit(ctx, key, offset, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SetEx(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	return W.WSetEx(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetNX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SetRange(ctx context.Context, key string, offset int64, value string) *redis.IntCmd {
	return W.WSetRange(ctx, key, offset, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	return W.WSetXX(ctx, key, value, expiration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Shutdown(ctx context.Context) *redis.StatusCmd {
	return W.WShutdown(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ShutdownNoSave(ctx context.Context) *redis.StatusCmd {
	return W.WShutdownNoSave(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ShutdownSave(ctx context.Context) *redis.StatusCmd {
	return W.WShutdownSave(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SlaveOf(ctx context.Context, host string, port string) *redis.StatusCmd {
	return W.WSlaveOf(ctx, host, port)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SlowLogGet(ctx context.Context, num int64) *redis.SlowLogCmd {
	return W.WSlowLogGet(ctx, num)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Sort(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSort(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd {
	return W.WSortInterfaces(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SortRO(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	return W.WSortRO(ctx, key, sort)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) SortStore(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd {
	return W.WSortStore(ctx, key, store, sort)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) StrLen(ctx context.Context, key string) *redis.IntCmd {
	return W.WStrLen(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Subscribe(ctx context.Context, channels ...string) *redis.PubSub {
	return W.WSubscribe(ctx, channels...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestAdd(ctx context.Context, key string, elements ...float64) *redis.StatusCmd {
	return W.WTDigestAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestByRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	return W.WTDigestByRevRank(ctx, key, rank...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestCDF(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestCDF(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *redis.StatusCmd {
	return W.WTDigestCreateWithCompression(ctx, key, compression)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestInfo(ctx context.Context, key string) *redis.TDigestInfoCmd {
	return W.WTDigestInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestMax(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMax(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestMerge(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd {
	return W.WTDigestMerge(ctx, destKey, options, sourceKeys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestMin(ctx context.Context, key string) *redis.FloatCmd {
	return W.WTDigestMin(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestQuantile(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	return W.WTDigestQuantile(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestReset(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTDigestReset(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestRevRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	return W.WTDigestRevRank(ctx, key, values...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd {
	return W.WTDigestTrimmedMean(ctx, key, lowCutQuantile, highCutQuantile)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TFCall(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCall(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TFCallASYNC(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	return W.WTFCallASYNC(ctx, libName, funcName, numKeys)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TFCallASYNCArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallASYNCArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TFCallArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	return W.WTFCallArgs(ctx, libName, funcName, numKeys, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TFunctionDelete(ctx context.Context, libName string) *redis.StatusCmd {
	return W.WTFunctionDelete(ctx, libName)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TFunctionList(ctx context.Context) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionList(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TFunctionListArgs(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd {
	return W.WTFunctionListArgs(ctx, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TFunctionLoad(ctx context.Context, lib string) *redis.StatusCmd {
	return W.WTFunctionLoad(ctx, lib)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TFunctionLoadArgs(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd {
	return W.WTFunctionLoadArgs(ctx, lib, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSAdd(ctx context.Context, key string, timestamp interface{}, value float64) *redis.IntCmd {
	return W.WTSAdd(ctx, key, timestamp, value)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSAddWithArgs(ctx context.Context, key string, timestamp interface{}, value float64, options *redis.TSOptions) *redis.IntCmd {
	return W.WTSAddWithArgs(ctx, key, timestamp, value, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSAlter(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd {
	return W.WTSAlter(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSCreate(ctx context.Context, key string) *redis.StatusCmd {
	return W.WTSCreate(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSCreateRule(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd {
	return W.WTSCreateRule(ctx, sourceKey, destKey, aggregator, bucketDuration)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSCreateRuleWithArgs(ctx context.Context, sourceKey string, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd {
	return W.WTSCreateRuleWithArgs(ctx, sourceKey, destKey, aggregator, bucketDuration, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSCreateWithArgs(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd {
	return W.WTSCreateWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSDecrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSDecrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSDecrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSDecrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSDel(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *redis.IntCmd {
	return W.WTSDel(ctx, Key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSDeleteRule(ctx context.Context, sourceKey string, destKey string) *redis.StatusCmd {
	return W.WTSDeleteRule(ctx, sourceKey, destKey)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSGet(ctx context.Context, key string) *redis.TSTimestampValueCmd {
	return W.WTSGet(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSGetWithArgs(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd {
	return W.WTSGetWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSIncrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	return W.WTSIncrBy(ctx, Key, timestamp)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSIncrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	return W.WTSIncrByWithArgs(ctx, key, timestamp, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSInfo(ctx context.Context, key string) *redis.MapStringInterfaceCmd {
	return W.WTSInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSInfoWithArgs(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd {
	return W.WTSInfoWithArgs(ctx, key, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSMAdd(ctx context.Context, ktvSlices [][]interface{}) *redis.IntSliceCmd {
	return W.WTSMAdd(ctx, ktvSlices)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSMGet(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGet(ctx, filters)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSMGetWithArgs(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMGetWithArgs(ctx, filters, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSMRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSMRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSMRevRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRange(ctx, fromTimestamp, toTimestamp, filterExpr)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSMRevRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd {
	return W.WTSMRevRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSQueryIndex(ctx context.Context, filterExpr []string) *redis.StringSliceCmd {
	return W.WTSQueryIndex(ctx, filterExpr)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSRevRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRange(ctx, key, fromTimestamp, toTimestamp)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TSRevRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd {
	return W.WTSRevRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TTL(ctx context.Context, key string) *redis.DurationCmd {
	return W.WTTL(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Time(ctx context.Context) *redis.TimeCmd {
	return W.WTime(ctx)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TopKAdd(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKAdd(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TopKCount(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	return W.WTopKCount(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TopKIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	return W.WTopKIncrBy(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TopKInfo(ctx context.Context, key string) *redis.TopKInfoCmd {
	return W.WTopKInfo(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TopKList(ctx context.Context, key string) *redis.StringSliceCmd {
	return W.WTopKList(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TopKListWithCount(ctx context.Context, key string) *redis.MapStringIntCmd {
	return W.WTopKListWithCount(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TopKQuery(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	return W.WTopKQuery(ctx, key, elements...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TopKReserve(ctx context.Context, key string, k int64) *redis.StatusCmd {
	return W.WTopKReserve(ctx, key, k)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TopKReserveWithOptions(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd {
	return W.WTopKReserveWithOptions(ctx, key, k, width, depth, decay)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Touch(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WTouch(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TxPipeline() redis.Pipeliner {
	return W.WTxPipeline()
}
func (W _github_com_redis_go_redis_v9_UniversalClient) TxPipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	return W.WTxPipelined(ctx, fn)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Type(ctx context.Context, key string) *redis.StatusCmd {
	return W.WType(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Unlink(ctx context.Context, keys ...string) *redis.IntCmd {
	return W.WUnlink(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) Watch(ctx context.Context, fn func(*redis.Tx) error, keys ...string) error {
	return W.WWatch(ctx, fn, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XAck(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd {
	return W.WXAck(ctx, stream, group, ids...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XAdd(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd {
	return W.WXAdd(ctx, a)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd {
	return W.WXAutoClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd {
	return W.WXAutoClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XClaim(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	return W.WXClaim(ctx, a)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd {
	return W.WXClaimJustID(ctx, a)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XDel(ctx context.Context, stream string, ids ...string) *redis.IntCmd {
	return W.WXDel(ctx, stream, ids...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XGroupCreate(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreate(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupCreateConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupCreateMkStream(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	return W.WXGroupDelConsumer(ctx, stream, group, consumer)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XGroupDestroy(ctx context.Context, stream string, group string) *redis.IntCmd {
	return W.WXGroupDestroy(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XGroupSetID(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	return W.WXGroupSetID(ctx, stream, group, start)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XInfoConsumers(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd {
	return W.WXInfoConsumers(ctx, key, group)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XInfoGroups(ctx context.Context, key string) *redis.XInfoGroupsCmd {
	return W.WXInfoGroups(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XInfoStream(ctx context.Context, key string) *redis.XInfoStreamCmd {
	return W.WXInfoStream(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XInfoStreamFull(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd {
	return W.WXInfoStreamFull(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XLen(ctx context.Context, stream string) *redis.IntCmd {
	return W.WXLen(ctx, stream)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XPending(ctx context.Context, stream string, group string) *redis.XPendingCmd {
	return W.WXPending(ctx, stream, group)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	return W.WXPendingExt(ctx, a)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XRead(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd {
	return W.WXRead(ctx, a)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	return W.WXReadGroup(ctx, a)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XReadStreams(ctx context.Context, streams ...string) *redis.XStreamSliceCmd {
	return W.WXReadStreams(ctx, streams...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XRevRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	return W.WXRevRange(ctx, stream, start, stop)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	return W.WXRevRangeN(ctx, stream, start, stop, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *redis.IntCmd {
	return W.WXTrimMaxLen(ctx, key, maxLen)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd {
	return W.WXTrimMaxLenApprox(ctx, key, maxLen, limit)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XTrimMinID(ctx context.Context, key string, minID string) *redis.IntCmd {
	return W.WXTrimMinID(ctx, key, minID)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd {
	return W.WXTrimMinIDApprox(ctx, key, minID, limit)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZAdd(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAdd(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd {
	return W.WZAddArgs(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd {
	return W.WZAddArgsIncr(ctx, key, args)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZAddGT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddGT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZAddLT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddLT(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZAddNX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddNX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZAddXX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	return W.WZAddXX(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZCard(ctx context.Context, key string) *redis.IntCmd {
	return W.WZCard(ctx, key)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	return W.WZDiff(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	return W.WZDiffStore(ctx, destination, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZDiffWithScores(ctx context.Context, keys ...string) *redis.ZSliceCmd {
	return W.WZDiffWithScores(ctx, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZIncrBy(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd {
	return W.WZIncrBy(ctx, key, increment, member)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZInter(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd {
	return W.WZInter(ctx, store)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	return W.WZInterCard(ctx, limit, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd {
	return W.WZInterStore(ctx, destination, store)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZInterWithScores(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd {
	return W.WZInterWithScores(ctx, store)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZLexCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZLexCount(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZMPop(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	return W.WZMPop(ctx, order, count, keys...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZMScore(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd {
	return W.WZMScore(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZPopMax(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMax(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZPopMin(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	return W.WZPopMin(ctx, key, count...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRandMember(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	return W.WZRandMember(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRandMemberWithScores(ctx context.Context, key string, count int) *redis.ZSliceCmd {
	return W.WZRandMemberWithScores(ctx, key, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd {
	return W.WZRangeArgs(ctx, z)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd {
	return W.WZRangeArgsWithScores(ctx, z)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd {
	return W.WZRangeStore(ctx, dst, z)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	return W.WZRem(ctx, key, members...)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRemRangeByLex(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByLex(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd {
	return W.WZRemRangeByRank(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRemRangeByScore(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	return W.WZRemRangeByScore(ctx, key, min, max)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRevRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	return W.WZRevRange(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByLex(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	return W.WZRevRangeByScore(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	return W.WZRevRangeByScoreWithScores(ctx, key, opt)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	return W.WZRevRangeWithScores(ctx, key, start, stop)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRevRank(ctx context.Context, key string, member string) *redis.IntCmd {
	return W.WZRevRank(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZRevRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	return W.WZRevRankWithScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	return W.WZScan(ctx, key, cursor, match, count)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZScore(ctx context.Context, key string, member string) *redis.FloatCmd {
	return W.WZScore(ctx, key, member)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZUnion(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd {
	return W.WZUnion(ctx, store)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd {
	return W.WZUnionStore(ctx, dest, store)
}
func (W _github_com_redis_go_redis_v9_UniversalClient) ZUnionWithScores(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd {
	return W.WZUnionWithScores(ctx, store)
}
