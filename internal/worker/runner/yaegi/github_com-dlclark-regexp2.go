// Code generated by 'yaegi extract github.com/dlclark/regexp2'. DO NOT EDIT.

package yaegi

import (
	"github.com/dlclark/regexp2"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/dlclark/regexp2/regexp2"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Compile":                 reflect.ValueOf(regexp2.Compile),
		"Compiled":                reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"Debug":                   reflect.ValueOf(constant.MakeFromLiteral("128", token.INT, 0)),
		"DefaultClockPeriod":      reflect.ValueOf(regexp2.DefaultClockPeriod),
		"DefaultMatchTimeout":     reflect.ValueOf(&regexp2.DefaultMatchTimeout).Elem(),
		"DefaultUnmarshalOptions": reflect.ValueOf(&regexp2.DefaultUnmarshalOptions).Elem(),
		"ECMAScript":              reflect.ValueOf(constant.MakeFromLiteral("256", token.INT, 0)),
		"Escape":                  reflect.ValueOf(regexp2.Escape),
		"ExplicitCapture":         reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"IgnoreCase":              reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"IgnorePatternWhitespace": reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"Multiline":               reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"MustCompile":             reflect.ValueOf(regexp2.MustCompile),
		"None":                    reflect.ValueOf(regexp2.None),
		"RE2":                     reflect.ValueOf(constant.MakeFromLiteral("512", token.INT, 0)),
		"RightToLeft":             reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"SetTimeoutCheckPeriod":   reflect.ValueOf(regexp2.SetTimeoutCheckPeriod),
		"Singleline":              reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"StopTimeoutClock":        reflect.ValueOf(regexp2.StopTimeoutClock),
		"Unescape":                reflect.ValueOf(regexp2.Unescape),
		"Unicode":                 reflect.ValueOf(constant.MakeFromLiteral("1024", token.INT, 0)),

		// type definitions
		"Capture":        reflect.ValueOf((*regexp2.Capture)(nil)),
		"Group":          reflect.ValueOf((*regexp2.Group)(nil)),
		"Match":          reflect.ValueOf((*regexp2.Match)(nil)),
		"MatchEvaluator": reflect.ValueOf((*regexp2.MatchEvaluator)(nil)),
		"RegexOptions":   reflect.ValueOf((*regexp2.RegexOptions)(nil)),
		"Regexp":         reflect.ValueOf((*regexp2.Regexp)(nil)),
	}
}
