// Code generated by 'yaegi extract github.com/rabbitmq/amqp091-go'. DO NOT EDIT.

package yaegi

import (
	"github.com/rabbitmq/amqp091-go"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/rabbitmq/amqp091-go/amqp091"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AccessRefused":                 reflect.ValueOf(constant.MakeFromLiteral("403", token.INT, 0)),
		"ChannelError":                  reflect.ValueOf(constant.MakeFromLiteral("504", token.INT, 0)),
		"CommandInvalid":                reflect.ValueOf(constant.MakeFromLiteral("503", token.INT, 0)),
		"ConnectionForced":              reflect.ValueOf(constant.MakeFromLiteral("320", token.INT, 0)),
		"ConsumerTimeoutArg":            reflect.ValueOf(constant.MakeFromLiteral("\"x-consumer-timeout\"", token.STRING, 0)),
		"ContentTooLarge":               reflect.ValueOf(constant.MakeFromLiteral("311", token.INT, 0)),
		"DefaultDial":                   reflect.ValueOf(amqp091.DefaultDial),
		"DefaultExchange":               reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"Dial":                          reflect.ValueOf(amqp091.Dial),
		"DialConfig":                    reflect.ValueOf(amqp091.DialConfig),
		"DialTLS":                       reflect.ValueOf(amqp091.DialTLS),
		"DialTLS_ExternalAuth":          reflect.ValueOf(amqp091.DialTLS_ExternalAuth),
		"ErrChannelMax":                 reflect.ValueOf(&amqp091.ErrChannelMax).Elem(),
		"ErrClosed":                     reflect.ValueOf(&amqp091.ErrClosed).Elem(),
		"ErrCommandInvalid":             reflect.ValueOf(&amqp091.ErrCommandInvalid).Elem(),
		"ErrCredentials":                reflect.ValueOf(&amqp091.ErrCredentials).Elem(),
		"ErrFieldType":                  reflect.ValueOf(&amqp091.ErrFieldType).Elem(),
		"ErrFrame":                      reflect.ValueOf(&amqp091.ErrFrame).Elem(),
		"ErrSASL":                       reflect.ValueOf(&amqp091.ErrSASL).Elem(),
		"ErrSyntax":                     reflect.ValueOf(&amqp091.ErrSyntax).Elem(),
		"ErrUnexpectedFrame":            reflect.ValueOf(&amqp091.ErrUnexpectedFrame).Elem(),
		"ErrVhost":                      reflect.ValueOf(&amqp091.ErrVhost).Elem(),
		"ExchangeDirect":                reflect.ValueOf(constant.MakeFromLiteral("\"direct\"", token.STRING, 0)),
		"ExchangeFanout":                reflect.ValueOf(constant.MakeFromLiteral("\"fanout\"", token.STRING, 0)),
		"ExchangeHeaders":               reflect.ValueOf(constant.MakeFromLiteral("\"headers\"", token.STRING, 0)),
		"ExchangeTopic":                 reflect.ValueOf(constant.MakeFromLiteral("\"topic\"", token.STRING, 0)),
		"FrameError":                    reflect.ValueOf(constant.MakeFromLiteral("501", token.INT, 0)),
		"ImmediatelyExpire":             reflect.ValueOf(amqp091.ImmediatelyExpire),
		"InternalError":                 reflect.ValueOf(constant.MakeFromLiteral("541", token.INT, 0)),
		"InvalidPath":                   reflect.ValueOf(constant.MakeFromLiteral("402", token.INT, 0)),
		"Logger":                        reflect.ValueOf(&amqp091.Logger).Elem(),
		"NeverExpire":                   reflect.ValueOf(amqp091.NeverExpire),
		"NewConnectionProperties":       reflect.ValueOf(amqp091.NewConnectionProperties),
		"NoConsumers":                   reflect.ValueOf(constant.MakeFromLiteral("313", token.INT, 0)),
		"NoRoute":                       reflect.ValueOf(constant.MakeFromLiteral("312", token.INT, 0)),
		"NotAllowed":                    reflect.ValueOf(constant.MakeFromLiteral("530", token.INT, 0)),
		"NotFound":                      reflect.ValueOf(constant.MakeFromLiteral("404", token.INT, 0)),
		"NotImplemented":                reflect.ValueOf(constant.MakeFromLiteral("540", token.INT, 0)),
		"Open":                          reflect.ValueOf(amqp091.Open),
		"ParseURI":                      reflect.ValueOf(amqp091.ParseURI),
		"Persistent":                    reflect.ValueOf(amqp091.Persistent),
		"PreconditionFailed":            reflect.ValueOf(constant.MakeFromLiteral("406", token.INT, 0)),
		"QueueMaxLenArg":                reflect.ValueOf(constant.MakeFromLiteral("\"x-max-length\"", token.STRING, 0)),
		"QueueMaxLenBytesArg":           reflect.ValueOf(constant.MakeFromLiteral("\"x-max-length-bytes\"", token.STRING, 0)),
		"QueueMessageTTLArg":            reflect.ValueOf(constant.MakeFromLiteral("\"x-message-ttl\"", token.STRING, 0)),
		"QueueOverflowArg":              reflect.ValueOf(constant.MakeFromLiteral("\"x-overflow\"", token.STRING, 0)),
		"QueueOverflowDropHead":         reflect.ValueOf(constant.MakeFromLiteral("\"drop-head\"", token.STRING, 0)),
		"QueueOverflowRejectPublish":    reflect.ValueOf(constant.MakeFromLiteral("\"reject-publish\"", token.STRING, 0)),
		"QueueOverflowRejectPublishDLX": reflect.ValueOf(constant.MakeFromLiteral("\"reject-publish-dlx\"", token.STRING, 0)),
		"QueueTTLArg":                   reflect.ValueOf(constant.MakeFromLiteral("\"x-expires\"", token.STRING, 0)),
		"QueueTypeArg":                  reflect.ValueOf(constant.MakeFromLiteral("\"x-queue-type\"", token.STRING, 0)),
		"QueueTypeClassic":              reflect.ValueOf(constant.MakeFromLiteral("\"classic\"", token.STRING, 0)),
		"QueueTypeQuorum":               reflect.ValueOf(constant.MakeFromLiteral("\"quorum\"", token.STRING, 0)),
		"QueueTypeStream":               reflect.ValueOf(constant.MakeFromLiteral("\"stream\"", token.STRING, 0)),
		"QueueVersionArg":               reflect.ValueOf(constant.MakeFromLiteral("\"x-queue-version\"", token.STRING, 0)),
		"ResourceError":                 reflect.ValueOf(constant.MakeFromLiteral("506", token.INT, 0)),
		"ResourceLocked":                reflect.ValueOf(constant.MakeFromLiteral("405", token.INT, 0)),
		"SetLogger":                     reflect.ValueOf(amqp091.SetLogger),
		"SingleActiveConsumerArg":       reflect.ValueOf(constant.MakeFromLiteral("\"x-single-active-consumer\"", token.STRING, 0)),
		"StreamMaxAgeArg":               reflect.ValueOf(constant.MakeFromLiteral("\"x-max-age\"", token.STRING, 0)),
		"StreamMaxLenBytesArg":          reflect.ValueOf(constant.MakeFromLiteral("\"x-max-length-bytes\"", token.STRING, 0)),
		"StreamMaxSegmentSizeBytesArg":  reflect.ValueOf(constant.MakeFromLiteral("\"x-stream-max-segment-size-bytes\"", token.STRING, 0)),
		"SyntaxError":                   reflect.ValueOf(constant.MakeFromLiteral("502", token.INT, 0)),
		"Transient":                     reflect.ValueOf(amqp091.Transient),
		"UnexpectedFrame":               reflect.ValueOf(constant.MakeFromLiteral("505", token.INT, 0)),

		// type definitions
		"AMQPlainAuth":         reflect.ValueOf((*amqp091.AMQPlainAuth)(nil)),
		"Acknowledger":         reflect.ValueOf((*amqp091.Acknowledger)(nil)),
		"Authentication":       reflect.ValueOf((*amqp091.Authentication)(nil)),
		"Blocking":             reflect.ValueOf((*amqp091.Blocking)(nil)),
		"Channel":              reflect.ValueOf((*amqp091.Channel)(nil)),
		"Config":               reflect.ValueOf((*amqp091.Config)(nil)),
		"Confirmation":         reflect.ValueOf((*amqp091.Confirmation)(nil)),
		"Connection":           reflect.ValueOf((*amqp091.Connection)(nil)),
		"Decimal":              reflect.ValueOf((*amqp091.Decimal)(nil)),
		"DeferredConfirmation": reflect.ValueOf((*amqp091.DeferredConfirmation)(nil)),
		"Delivery":             reflect.ValueOf((*amqp091.Delivery)(nil)),
		"Error":                reflect.ValueOf((*amqp091.Error)(nil)),
		"ExternalAuth":         reflect.ValueOf((*amqp091.ExternalAuth)(nil)),
		"Logging":              reflect.ValueOf((*amqp091.Logging)(nil)),
		"NullLogger":           reflect.ValueOf((*amqp091.NullLogger)(nil)),
		"PlainAuth":            reflect.ValueOf((*amqp091.PlainAuth)(nil)),
		"Publishing":           reflect.ValueOf((*amqp091.Publishing)(nil)),
		"Queue":                reflect.ValueOf((*amqp091.Queue)(nil)),
		"Return":               reflect.ValueOf((*amqp091.Return)(nil)),
		"Table":                reflect.ValueOf((*amqp091.Table)(nil)),
		"URI":                  reflect.ValueOf((*amqp091.URI)(nil)),

		// interface wrapper definitions
		"_Acknowledger":   reflect.ValueOf((*_github_com_rabbitmq_amqp091_go_Acknowledger)(nil)),
		"_Authentication": reflect.ValueOf((*_github_com_rabbitmq_amqp091_go_Authentication)(nil)),
		"_Logging":        reflect.ValueOf((*_github_com_rabbitmq_amqp091_go_Logging)(nil)),
	}
}

// _github_com_rabbitmq_amqp091_go_Acknowledger is an interface wrapper for Acknowledger type
type _github_com_rabbitmq_amqp091_go_Acknowledger struct {
	IValue  interface{}
	WAck    func(tag uint64, multiple bool) error
	WNack   func(tag uint64, multiple bool, requeue bool) error
	WReject func(tag uint64, requeue bool) error
}

func (W _github_com_rabbitmq_amqp091_go_Acknowledger) Ack(tag uint64, multiple bool) error {
	return W.WAck(tag, multiple)
}
func (W _github_com_rabbitmq_amqp091_go_Acknowledger) Nack(tag uint64, multiple bool, requeue bool) error {
	return W.WNack(tag, multiple, requeue)
}
func (W _github_com_rabbitmq_amqp091_go_Acknowledger) Reject(tag uint64, requeue bool) error {
	return W.WReject(tag, requeue)
}

// _github_com_rabbitmq_amqp091_go_Authentication is an interface wrapper for Authentication type
type _github_com_rabbitmq_amqp091_go_Authentication struct {
	IValue     interface{}
	WMechanism func() string
	WResponse  func() string
}

func (W _github_com_rabbitmq_amqp091_go_Authentication) Mechanism() string {
	return W.WMechanism()
}
func (W _github_com_rabbitmq_amqp091_go_Authentication) Response() string {
	return W.WResponse()
}

// _github_com_rabbitmq_amqp091_go_Logging is an interface wrapper for Logging type
type _github_com_rabbitmq_amqp091_go_Logging struct {
	IValue  interface{}
	WPrintf func(format string, v ...interface{})
}

func (W _github_com_rabbitmq_amqp091_go_Logging) Printf(format string, v ...interface{}) {
	W.WPrintf(format, v...)
}
