// Code generated by 'yaegi extract github.com/xmapst/go-rabbitmq'. DO NOT EDIT.

package libs

import (
	"github.com/xmapst/go-rabbitmq"
	"reflect"
)

func init() {
	Symbols["github.com/xmapst/go-rabbitmq/rabbitmq"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Ack":                                       reflect.ValueOf(rabbitmq.Ack),
		"Manual":                                    reflect.ValueOf(rabbitmq.Manual),
		"NackDiscard":                               reflect.ValueOf(rabbitmq.NackDiscard),
		"NackRequeue":                               reflect.ValueOf(rabbitmq.NackRequeue),
		"NewChannel":                                reflect.ValueOf(rabbitmq.NewChannel),
		"NewClusterConn":                            reflect.ValueOf(rabbitmq.NewClusterConn),
		"NewConn":                                   reflect.ValueOf(rabbitmq.NewConn),
		"NewConsumer":                               reflect.ValueOf(rabbitmq.NewConsumer),
		"NewDeclarator":                             reflect.ValueOf(rabbitmq.NewDeclarator),
		"NewPublisher":                              reflect.ValueOf(rabbitmq.NewPublisher),
		"NewStaticResolver":                         reflect.ValueOf(rabbitmq.NewStaticResolver),
		"Persistent":                                reflect.ValueOf(rabbitmq.Persistent),
		"Transient":                                 reflect.ValueOf(rabbitmq.Transient),
		"WithChannelOptionsConfirm":                 reflect.ValueOf(rabbitmq.WithChannelOptionsConfirm),
		"WithChannelOptionsLogger":                  reflect.ValueOf(rabbitmq.WithChannelOptionsLogger),
		"WithChannelOptionsLogging":                 reflect.ValueOf(rabbitmq.WithChannelOptionsLogging),
		"WithChannelOptionsQOSGlobal":               reflect.ValueOf(rabbitmq.WithChannelOptionsQOSGlobal),
		"WithChannelOptionsQOSPrefetch":             reflect.ValueOf(rabbitmq.WithChannelOptionsQOSPrefetch),
		"WithConnectionOptionsConfig":               reflect.ValueOf(rabbitmq.WithConnectionOptionsConfig),
		"WithConnectionOptionsLogger":               reflect.ValueOf(rabbitmq.WithConnectionOptionsLogger),
		"WithConnectionOptionsLogging":              reflect.ValueOf(rabbitmq.WithConnectionOptionsLogging),
		"WithConnectionOptionsReconnectInterval":    reflect.ValueOf(rabbitmq.WithConnectionOptionsReconnectInterval),
		"WithConsumerOptionsBinding":                reflect.ValueOf(rabbitmq.WithConsumerOptionsBinding),
		"WithConsumerOptionsConcurrency":            reflect.ValueOf(rabbitmq.WithConsumerOptionsConcurrency),
		"WithConsumerOptionsConsumerAutoAck":        reflect.ValueOf(rabbitmq.WithConsumerOptionsConsumerAutoAck),
		"WithConsumerOptionsConsumerExclusive":      reflect.ValueOf(rabbitmq.WithConsumerOptionsConsumerExclusive),
		"WithConsumerOptionsConsumerName":           reflect.ValueOf(rabbitmq.WithConsumerOptionsConsumerName),
		"WithConsumerOptionsConsumerNoWait":         reflect.ValueOf(rabbitmq.WithConsumerOptionsConsumerNoWait),
		"WithConsumerOptionsExchangeArgs":           reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangeArgs),
		"WithConsumerOptionsExchangeAutoDelete":     reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangeAutoDelete),
		"WithConsumerOptionsExchangeDeclare":        reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangeDeclare),
		"WithConsumerOptionsExchangeDurable":        reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangeDurable),
		"WithConsumerOptionsExchangeInternal":       reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangeInternal),
		"WithConsumerOptionsExchangeKind":           reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangeKind),
		"WithConsumerOptionsExchangeName":           reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangeName),
		"WithConsumerOptionsExchangeNoWait":         reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangeNoWait),
		"WithConsumerOptionsExchangeOptions":        reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangeOptions),
		"WithConsumerOptionsExchangePassive":        reflect.ValueOf(rabbitmq.WithConsumerOptionsExchangePassive),
		"WithConsumerOptionsForceShutdown":          reflect.ValueOf(rabbitmq.WithConsumerOptionsForceShutdown),
		"WithConsumerOptionsLogger":                 reflect.ValueOf(rabbitmq.WithConsumerOptionsLogger),
		"WithConsumerOptionsLogging":                reflect.ValueOf(rabbitmq.WithConsumerOptionsLogging),
		"WithConsumerOptionsQOSGlobal":              reflect.ValueOf(rabbitmq.WithConsumerOptionsQOSGlobal),
		"WithConsumerOptionsQOSPrefetch":            reflect.ValueOf(rabbitmq.WithConsumerOptionsQOSPrefetch),
		"WithConsumerOptionsQueueArgs":              reflect.ValueOf(rabbitmq.WithConsumerOptionsQueueArgs),
		"WithConsumerOptionsQueueAutoDelete":        reflect.ValueOf(rabbitmq.WithConsumerOptionsQueueAutoDelete),
		"WithConsumerOptionsQueueDurable":           reflect.ValueOf(rabbitmq.WithConsumerOptionsQueueDurable),
		"WithConsumerOptionsQueueExclusive":         reflect.ValueOf(rabbitmq.WithConsumerOptionsQueueExclusive),
		"WithConsumerOptionsQueueMessageExpiration": reflect.ValueOf(rabbitmq.WithConsumerOptionsQueueMessageExpiration),
		"WithConsumerOptionsQueueNoDeclare":         reflect.ValueOf(rabbitmq.WithConsumerOptionsQueueNoDeclare),
		"WithConsumerOptionsQueueNoWait":            reflect.ValueOf(rabbitmq.WithConsumerOptionsQueueNoWait),
		"WithConsumerOptionsQueuePassive":           reflect.ValueOf(rabbitmq.WithConsumerOptionsQueuePassive),
		"WithConsumerOptionsQueueQuorum":            reflect.ValueOf(rabbitmq.WithConsumerOptionsQueueQuorum),
		"WithConsumerOptionsRoutingKey":             reflect.ValueOf(rabbitmq.WithConsumerOptionsRoutingKey),
		"WithConsumerStreamOffset":                  reflect.ValueOf(rabbitmq.WithConsumerStreamOffset),
		"WithDeclareOptionsConfirm":                 reflect.ValueOf(rabbitmq.WithDeclareOptionsConfirm),
		"WithDeclareOptionsLogger":                  reflect.ValueOf(rabbitmq.WithDeclareOptionsLogger),
		"WithDeclareOptionsLogging":                 reflect.ValueOf(rabbitmq.WithDeclareOptionsLogging),
		"WithPublishOptionsAppID":                   reflect.ValueOf(rabbitmq.WithPublishOptionsAppID),
		"WithPublishOptionsContentEncoding":         reflect.ValueOf(rabbitmq.WithPublishOptionsContentEncoding),
		"WithPublishOptionsContentType":             reflect.ValueOf(rabbitmq.WithPublishOptionsContentType),
		"WithPublishOptionsCorrelationID":           reflect.ValueOf(rabbitmq.WithPublishOptionsCorrelationID),
		"WithPublishOptionsExchange":                reflect.ValueOf(rabbitmq.WithPublishOptionsExchange),
		"WithPublishOptionsExpiration":              reflect.ValueOf(rabbitmq.WithPublishOptionsExpiration),
		"WithPublishOptionsHeaders":                 reflect.ValueOf(rabbitmq.WithPublishOptionsHeaders),
		"WithPublishOptionsImmediate":               reflect.ValueOf(rabbitmq.WithPublishOptionsImmediate),
		"WithPublishOptionsMandatory":               reflect.ValueOf(rabbitmq.WithPublishOptionsMandatory),
		"WithPublishOptionsMessageID":               reflect.ValueOf(rabbitmq.WithPublishOptionsMessageID),
		"WithPublishOptionsPersistentDelivery":      reflect.ValueOf(rabbitmq.WithPublishOptionsPersistentDelivery),
		"WithPublishOptionsPriority":                reflect.ValueOf(rabbitmq.WithPublishOptionsPriority),
		"WithPublishOptionsReplyTo":                 reflect.ValueOf(rabbitmq.WithPublishOptionsReplyTo),
		"WithPublishOptionsTimestamp":               reflect.ValueOf(rabbitmq.WithPublishOptionsTimestamp),
		"WithPublishOptionsType":                    reflect.ValueOf(rabbitmq.WithPublishOptionsType),
		"WithPublishOptionsUserID":                  reflect.ValueOf(rabbitmq.WithPublishOptionsUserID),
		"WithPublisherOptionsConfirm":               reflect.ValueOf(rabbitmq.WithPublisherOptionsConfirm),
		"WithPublisherOptionsExchangeArgs":          reflect.ValueOf(rabbitmq.WithPublisherOptionsExchangeArgs),
		"WithPublisherOptionsExchangeAutoDelete":    reflect.ValueOf(rabbitmq.WithPublisherOptionsExchangeAutoDelete),
		"WithPublisherOptionsExchangeDeclare":       reflect.ValueOf(rabbitmq.WithPublisherOptionsExchangeDeclare),
		"WithPublisherOptionsExchangeDurable":       reflect.ValueOf(rabbitmq.WithPublisherOptionsExchangeDurable),
		"WithPublisherOptionsExchangeInternal":      reflect.ValueOf(rabbitmq.WithPublisherOptionsExchangeInternal),
		"WithPublisherOptionsExchangeKind":          reflect.ValueOf(rabbitmq.WithPublisherOptionsExchangeKind),
		"WithPublisherOptionsExchangeName":          reflect.ValueOf(rabbitmq.WithPublisherOptionsExchangeName),
		"WithPublisherOptionsExchangeNoWait":        reflect.ValueOf(rabbitmq.WithPublisherOptionsExchangeNoWait),
		"WithPublisherOptionsExchangePassive":       reflect.ValueOf(rabbitmq.WithPublisherOptionsExchangePassive),
		"WithPublisherOptionsLogger":                reflect.ValueOf(rabbitmq.WithPublisherOptionsLogger),
		"WithPublisherOptionsLogging":               reflect.ValueOf(rabbitmq.WithPublisherOptionsLogging),

		// type definitions
		"Action":                reflect.ValueOf((*rabbitmq.Action)(nil)),
		"Binding":               reflect.ValueOf((*rabbitmq.Binding)(nil)),
		"BindingOptions":        reflect.ValueOf((*rabbitmq.BindingOptions)(nil)),
		"Channel":               reflect.ValueOf((*rabbitmq.Channel)(nil)),
		"ChannelOptions":        reflect.ValueOf((*rabbitmq.ChannelOptions)(nil)),
		"Config":                reflect.ValueOf((*rabbitmq.Config)(nil)),
		"Confirmation":          reflect.ValueOf((*rabbitmq.Confirmation)(nil)),
		"Conn":                  reflect.ValueOf((*rabbitmq.Conn)(nil)),
		"ConnectionOptions":     reflect.ValueOf((*rabbitmq.ConnectionOptions)(nil)),
		"Consumer":              reflect.ValueOf((*rabbitmq.Consumer)(nil)),
		"ConsumerOptions":       reflect.ValueOf((*rabbitmq.ConsumerOptions)(nil)),
		"Declarator":            reflect.ValueOf((*rabbitmq.Declarator)(nil)),
		"DeclareOptions":        reflect.ValueOf((*rabbitmq.DeclareOptions)(nil)),
		"Delivery":              reflect.ValueOf((*rabbitmq.Delivery)(nil)),
		"ExchangeOptions":       reflect.ValueOf((*rabbitmq.ExchangeOptions)(nil)),
		"Handler":               reflect.ValueOf((*rabbitmq.Handler)(nil)),
		"Logger":                reflect.ValueOf((*rabbitmq.Logger)(nil)),
		"PublishOptions":        reflect.ValueOf((*rabbitmq.PublishOptions)(nil)),
		"Publisher":             reflect.ValueOf((*rabbitmq.Publisher)(nil)),
		"PublisherConfirmation": reflect.ValueOf((*rabbitmq.PublisherConfirmation)(nil)),
		"PublisherOptions":      reflect.ValueOf((*rabbitmq.PublisherOptions)(nil)),
		"QueueOptions":          reflect.ValueOf((*rabbitmq.QueueOptions)(nil)),
		"RabbitConsumerOptions": reflect.ValueOf((*rabbitmq.RabbitConsumerOptions)(nil)),
		"Resolver":              reflect.ValueOf((*rabbitmq.Resolver)(nil)),
		"Return":                reflect.ValueOf((*rabbitmq.Return)(nil)),
		"StaticResolver":        reflect.ValueOf((*rabbitmq.StaticResolver)(nil)),
		"Table":                 reflect.ValueOf((*rabbitmq.Table)(nil)),

		// interface wrapper definitions
		"_Logger":   reflect.ValueOf((*_github_com_xmapst_go_rabbitmq_Logger)(nil)),
		"_Resolver": reflect.ValueOf((*_github_com_xmapst_go_rabbitmq_Resolver)(nil)),
	}
}

// _github_com_xmapst_go_rabbitmq_Logger is an interface wrapper for Logger type
type _github_com_xmapst_go_rabbitmq_Logger struct {
	IValue  interface{}
	WDebugf func(a0 string, a1 ...any)
	WErrorf func(a0 string, a1 ...any)
	WInfof  func(a0 string, a1 ...any)
	WWarnf  func(a0 string, a1 ...any)
}

func (W _github_com_xmapst_go_rabbitmq_Logger) Debugf(a0 string, a1 ...any) {
	W.WDebugf(a0, a1...)
}
func (W _github_com_xmapst_go_rabbitmq_Logger) Errorf(a0 string, a1 ...any) {
	W.WErrorf(a0, a1...)
}
func (W _github_com_xmapst_go_rabbitmq_Logger) Infof(a0 string, a1 ...any) {
	W.WInfof(a0, a1...)
}
func (W _github_com_xmapst_go_rabbitmq_Logger) Warnf(a0 string, a1 ...any) {
	W.WWarnf(a0, a1...)
}

// _github_com_xmapst_go_rabbitmq_Resolver is an interface wrapper for Resolver type
type _github_com_xmapst_go_rabbitmq_Resolver struct {
	IValue   interface{}
	WResolve func() ([]string, error)
}

func (W _github_com_xmapst_go_rabbitmq_Resolver) Resolve() ([]string, error) {
	return W.WResolve()
}
