// Code generated by 'yaegi extract github.com/gin-contrib/gzip'. DO NOT EDIT.

package libs

import (
	"github.com/gin-contrib/gzip"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/gin-contrib/gzip/gzip"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BestCompression":               reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"BestSpeed":                     reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DefaultCompression":            reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"DefaultDecompressHandle":       reflect.ValueOf(gzip.DefaultDecompressHandle),
		"DefaultExcludedExtentions":     reflect.ValueOf(&gzip.DefaultExcludedExtentions).Elem(),
		"ErrUnsupportedContentEncoding": reflect.ValueOf(&gzip.ErrUnsupportedContentEncoding).Elem(),
		"Gzip":                          reflect.ValueOf(gzip.Gzip),
		"HuffmanOnly":                   reflect.ValueOf(constant.MakeFromLiteral("-2", token.INT, 0)),
		"NewExcludedExtensions":         reflect.ValueOf(gzip.NewExcludedExtensions),
		"NewExcludedPathesRegexs":       reflect.ValueOf(gzip.NewExcludedPathesRegexs),
		"NewExcludedPaths":              reflect.ValueOf(gzip.NewExcludedPaths),
		"NoCompression":                 reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"WithCustomShouldCompressFn":    reflect.ValueOf(gzip.WithCustomShouldCompressFn),
		"WithDecompressFn":              reflect.ValueOf(gzip.WithDecompressFn),
		"WithDecompressOnly":            reflect.ValueOf(gzip.WithDecompressOnly),
		"WithExcludedExtensions":        reflect.ValueOf(gzip.WithExcludedExtensions),
		"WithExcludedPaths":             reflect.ValueOf(gzip.WithExcludedPaths),
		"WithExcludedPathsRegexs":       reflect.ValueOf(gzip.WithExcludedPathsRegexs),

		// type definitions
		"ExcludedExtensions":   reflect.ValueOf((*gzip.ExcludedExtensions)(nil)),
		"ExcludedPathesRegexs": reflect.ValueOf((*gzip.ExcludedPathesRegexs)(nil)),
		"ExcludedPaths":        reflect.ValueOf((*gzip.ExcludedPaths)(nil)),
		"Option":               reflect.ValueOf((*gzip.Option)(nil)),

		// interface wrapper definitions
		"_Option": reflect.ValueOf((*_github_com_gin_contrib_gzip_Option)(nil)),
	}
}

// _github_com_gin_contrib_gzip_Option is an interface wrapper for Option type
type _github_com_gin_contrib_gzip_Option struct {
	IValue interface{}
}
