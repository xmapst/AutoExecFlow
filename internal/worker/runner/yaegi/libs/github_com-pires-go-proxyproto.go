// Code generated by 'yaegi extract github.com/pires/go-proxyproto'. DO NOT EDIT.

package libs

import (
	"github.com/pires/go-proxyproto"
	"reflect"
)

func init() {
	Symbols["github.com/pires/go-proxyproto/proxyproto"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DefaultReadHeaderTimeout":                reflect.ValueOf(&proxyproto.DefaultReadHeaderTimeout).Elem(),
		"ErrCantReadAddressFamilyAndProtocol":     reflect.ValueOf(&proxyproto.ErrCantReadAddressFamilyAndProtocol).Elem(),
		"ErrCantReadLength":                       reflect.ValueOf(&proxyproto.ErrCantReadLength).Elem(),
		"ErrCantReadProtocolVersionAndCommand":    reflect.ValueOf(&proxyproto.ErrCantReadProtocolVersionAndCommand).Elem(),
		"ErrCantReadVersion1Header":               reflect.ValueOf(&proxyproto.ErrCantReadVersion1Header).Elem(),
		"ErrCantResolveDestinationUnixAddress":    reflect.ValueOf(&proxyproto.ErrCantResolveDestinationUnixAddress).Elem(),
		"ErrCantResolveSourceUnixAddress":         reflect.ValueOf(&proxyproto.ErrCantResolveSourceUnixAddress).Elem(),
		"ErrIncompatibleTLV":                      reflect.ValueOf(&proxyproto.ErrIncompatibleTLV).Elem(),
		"ErrInvalidAddress":                       reflect.ValueOf(&proxyproto.ErrInvalidAddress).Elem(),
		"ErrInvalidLength":                        reflect.ValueOf(&proxyproto.ErrInvalidLength).Elem(),
		"ErrInvalidPortNumber":                    reflect.ValueOf(&proxyproto.ErrInvalidPortNumber).Elem(),
		"ErrInvalidUpstream":                      reflect.ValueOf(&proxyproto.ErrInvalidUpstream).Elem(),
		"ErrLineMustEndWithCrlf":                  reflect.ValueOf(&proxyproto.ErrLineMustEndWithCrlf).Elem(),
		"ErrMalformedTLV":                         reflect.ValueOf(&proxyproto.ErrMalformedTLV).Elem(),
		"ErrNoProxyProtocol":                      reflect.ValueOf(&proxyproto.ErrNoProxyProtocol).Elem(),
		"ErrSuperfluousProxyHeader":               reflect.ValueOf(&proxyproto.ErrSuperfluousProxyHeader).Elem(),
		"ErrTruncatedTLV":                         reflect.ValueOf(&proxyproto.ErrTruncatedTLV).Elem(),
		"ErrUnknownProxyProtocolVersion":          reflect.ValueOf(&proxyproto.ErrUnknownProxyProtocolVersion).Elem(),
		"ErrUnsupportedAddressFamilyAndProtocol":  reflect.ValueOf(&proxyproto.ErrUnsupportedAddressFamilyAndProtocol).Elem(),
		"ErrUnsupportedProtocolVersionAndCommand": reflect.ValueOf(&proxyproto.ErrUnsupportedProtocolVersionAndCommand).Elem(),
		"ErrVersion1HeaderTooLong":                reflect.ValueOf(&proxyproto.ErrVersion1HeaderTooLong).Elem(),
		"HeaderProxyFromAddrs":                    reflect.ValueOf(proxyproto.HeaderProxyFromAddrs),
		"IGNORE":                                  reflect.ValueOf(proxyproto.IGNORE),
		"IgnoreProxyHeaderNotOnInterface":         reflect.ValueOf(proxyproto.IgnoreProxyHeaderNotOnInterface),
		"JoinTLVs":                                reflect.ValueOf(proxyproto.JoinTLVs),
		"LOCAL":                                   reflect.ValueOf(proxyproto.LOCAL),
		"LaxWhiteListPolicy":                      reflect.ValueOf(proxyproto.LaxWhiteListPolicy),
		"MustLaxWhiteListPolicy":                  reflect.ValueOf(proxyproto.MustLaxWhiteListPolicy),
		"MustStrictWhiteListPolicy":               reflect.ValueOf(proxyproto.MustStrictWhiteListPolicy),
		"NewConn":                                 reflect.ValueOf(proxyproto.NewConn),
		"PP2_SUBTYPE_SSL_CIPHER":                  reflect.ValueOf(proxyproto.PP2_SUBTYPE_SSL_CIPHER),
		"PP2_SUBTYPE_SSL_CN":                      reflect.ValueOf(proxyproto.PP2_SUBTYPE_SSL_CN),
		"PP2_SUBTYPE_SSL_KEY_ALG":                 reflect.ValueOf(proxyproto.PP2_SUBTYPE_SSL_KEY_ALG),
		"PP2_SUBTYPE_SSL_SIG_ALG":                 reflect.ValueOf(proxyproto.PP2_SUBTYPE_SSL_SIG_ALG),
		"PP2_SUBTYPE_SSL_VERSION":                 reflect.ValueOf(proxyproto.PP2_SUBTYPE_SSL_VERSION),
		"PP2_TYPE_ALPN":                           reflect.ValueOf(proxyproto.PP2_TYPE_ALPN),
		"PP2_TYPE_AUTHORITY":                      reflect.ValueOf(proxyproto.PP2_TYPE_AUTHORITY),
		"PP2_TYPE_CRC32C":                         reflect.ValueOf(proxyproto.PP2_TYPE_CRC32C),
		"PP2_TYPE_MAX_CUSTOM":                     reflect.ValueOf(proxyproto.PP2_TYPE_MAX_CUSTOM),
		"PP2_TYPE_MAX_EXPERIMENT":                 reflect.ValueOf(proxyproto.PP2_TYPE_MAX_EXPERIMENT),
		"PP2_TYPE_MAX_FUTURE":                     reflect.ValueOf(proxyproto.PP2_TYPE_MAX_FUTURE),
		"PP2_TYPE_MIN_CUSTOM":                     reflect.ValueOf(proxyproto.PP2_TYPE_MIN_CUSTOM),
		"PP2_TYPE_MIN_EXPERIMENT":                 reflect.ValueOf(proxyproto.PP2_TYPE_MIN_EXPERIMENT),
		"PP2_TYPE_MIN_FUTURE":                     reflect.ValueOf(proxyproto.PP2_TYPE_MIN_FUTURE),
		"PP2_TYPE_NETNS":                          reflect.ValueOf(proxyproto.PP2_TYPE_NETNS),
		"PP2_TYPE_NOOP":                           reflect.ValueOf(proxyproto.PP2_TYPE_NOOP),
		"PP2_TYPE_SSL":                            reflect.ValueOf(proxyproto.PP2_TYPE_SSL),
		"PP2_TYPE_UNIQUE_ID":                      reflect.ValueOf(proxyproto.PP2_TYPE_UNIQUE_ID),
		"PROXY":                                   reflect.ValueOf(proxyproto.PROXY),
		"REJECT":                                  reflect.ValueOf(proxyproto.REJECT),
		"REQUIRE":                                 reflect.ValueOf(proxyproto.REQUIRE),
		"Read":                                    reflect.ValueOf(proxyproto.Read),
		"ReadTimeout":                             reflect.ValueOf(proxyproto.ReadTimeout),
		"SIGV1":                                   reflect.ValueOf(&proxyproto.SIGV1).Elem(),
		"SIGV2":                                   reflect.ValueOf(&proxyproto.SIGV2).Elem(),
		"SKIP":                                    reflect.ValueOf(proxyproto.SKIP),
		"SetReadHeaderTimeout":                    reflect.ValueOf(proxyproto.SetReadHeaderTimeout),
		"SkipProxyHeaderForCIDR":                  reflect.ValueOf(proxyproto.SkipProxyHeaderForCIDR),
		"SplitTLVs":                               reflect.ValueOf(proxyproto.SplitTLVs),
		"StrictWhiteListPolicy":                   reflect.ValueOf(proxyproto.StrictWhiteListPolicy),
		"TCPv4":                                   reflect.ValueOf(proxyproto.TCPv4),
		"TCPv6":                                   reflect.ValueOf(proxyproto.TCPv6),
		"UDPv4":                                   reflect.ValueOf(proxyproto.UDPv4),
		"UDPv6":                                   reflect.ValueOf(proxyproto.UDPv6),
		"UNSPEC":                                  reflect.ValueOf(proxyproto.UNSPEC),
		"USE":                                     reflect.ValueOf(proxyproto.USE),
		"UnixDatagram":                            reflect.ValueOf(proxyproto.UnixDatagram),
		"UnixStream":                              reflect.ValueOf(proxyproto.UnixStream),
		"ValidateHeader":                          reflect.ValueOf(proxyproto.ValidateHeader),
		"WithPolicy":                              reflect.ValueOf(proxyproto.WithPolicy),

		// type definitions
		"AddressFamilyAndProtocol":  reflect.ValueOf((*proxyproto.AddressFamilyAndProtocol)(nil)),
		"Conn":                      reflect.ValueOf((*proxyproto.Conn)(nil)),
		"ConnPolicyFunc":            reflect.ValueOf((*proxyproto.ConnPolicyFunc)(nil)),
		"ConnPolicyOptions":         reflect.ValueOf((*proxyproto.ConnPolicyOptions)(nil)),
		"Header":                    reflect.ValueOf((*proxyproto.Header)(nil)),
		"Listener":                  reflect.ValueOf((*proxyproto.Listener)(nil)),
		"PP2Type":                   reflect.ValueOf((*proxyproto.PP2Type)(nil)),
		"Policy":                    reflect.ValueOf((*proxyproto.Policy)(nil)),
		"PolicyFunc":                reflect.ValueOf((*proxyproto.PolicyFunc)(nil)),
		"ProtocolVersionAndCommand": reflect.ValueOf((*proxyproto.ProtocolVersionAndCommand)(nil)),
		"TLV":                       reflect.ValueOf((*proxyproto.TLV)(nil)),
		"Validator":                 reflect.ValueOf((*proxyproto.Validator)(nil)),
	}
}
