// Code generated by 'yaegi extract github.com/expr-lang/expr'. DO NOT EDIT.

package libs

import (
	"github.com/expr-lang/expr"
	"reflect"
)

func init() {
	Symbols["github.com/expr-lang/expr/expr"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AllowUndefinedVariables": reflect.ValueOf(expr.AllowUndefinedVariables),
		"AsAny":                   reflect.ValueOf(expr.AsAny),
		"AsBool":                  reflect.ValueOf(expr.AsBool),
		"AsFloat64":               reflect.ValueOf(expr.AsFloat64),
		"AsInt":                   reflect.ValueOf(expr.AsInt),
		"AsInt64":                 reflect.ValueOf(expr.AsInt64),
		"AsKind":                  reflect.ValueOf(expr.AsKind),
		"Compile":                 reflect.ValueOf(expr.Compile),
		"ConstExpr":               reflect.ValueOf(expr.ConstExpr),
		"DisableAllBuiltins":      reflect.ValueOf(expr.DisableAllBuiltins),
		"DisableBuiltin":          reflect.ValueOf(expr.DisableBuiltin),
		"EnableBuiltin":           reflect.ValueOf(expr.EnableBuiltin),
		"Env":                     reflect.ValueOf(expr.Env),
		"Eval":                    reflect.ValueOf(expr.Eval),
		"Function":                reflect.ValueOf(expr.Function),
		"Operator":                reflect.ValueOf(expr.Operator),
		"Optimize":                reflect.ValueOf(expr.Optimize),
		"Patch":                   reflect.ValueOf(expr.Patch),
		"Run":                     reflect.ValueOf(expr.Run),
		"Timezone":                reflect.ValueOf(expr.Timezone),
		"WarnOnAny":               reflect.ValueOf(expr.WarnOnAny),
		"WithContext":             reflect.ValueOf(expr.WithContext),

		// type definitions
		"Option": reflect.ValueOf((*expr.Option)(nil)),
	}
}
