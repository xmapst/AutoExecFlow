// Code generated by 'yaegi extract github.com/go-zookeeper/zk'. DO NOT EDIT.

package libs

import (
	"github.com/go-zookeeper/zk"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/go-zookeeper/zk/zk"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AuthACL":                         reflect.ValueOf(zk.AuthACL),
		"Connect":                         reflect.ValueOf(zk.Connect),
		"ConnectWithDialer":               reflect.ValueOf(zk.ConnectWithDialer),
		"DefaultLogger":                   reflect.ValueOf(&zk.DefaultLogger).Elem(),
		"DefaultPort":                     reflect.ValueOf(constant.MakeFromLiteral("2181", token.INT, 0)),
		"DigestACL":                       reflect.ValueOf(zk.DigestACL),
		"ErrAPIError":                     reflect.ValueOf(&zk.ErrAPIError).Elem(),
		"ErrAuthFailed":                   reflect.ValueOf(&zk.ErrAuthFailed).Elem(),
		"ErrBadArguments":                 reflect.ValueOf(&zk.ErrBadArguments).Elem(),
		"ErrBadVersion":                   reflect.ValueOf(&zk.ErrBadVersion).Elem(),
		"ErrClosing":                      reflect.ValueOf(&zk.ErrClosing).Elem(),
		"ErrConnectionClosed":             reflect.ValueOf(&zk.ErrConnectionClosed).Elem(),
		"ErrDeadlock":                     reflect.ValueOf(&zk.ErrDeadlock).Elem(),
		"ErrInvalidACL":                   reflect.ValueOf(&zk.ErrInvalidACL).Elem(),
		"ErrInvalidFlags":                 reflect.ValueOf(&zk.ErrInvalidFlags).Elem(),
		"ErrInvalidPath":                  reflect.ValueOf(&zk.ErrInvalidPath).Elem(),
		"ErrNoAuth":                       reflect.ValueOf(&zk.ErrNoAuth).Elem(),
		"ErrNoChildrenForEphemerals":      reflect.ValueOf(&zk.ErrNoChildrenForEphemerals).Elem(),
		"ErrNoNode":                       reflect.ValueOf(&zk.ErrNoNode).Elem(),
		"ErrNoServer":                     reflect.ValueOf(&zk.ErrNoServer).Elem(),
		"ErrNodeExists":                   reflect.ValueOf(&zk.ErrNodeExists).Elem(),
		"ErrNotEmpty":                     reflect.ValueOf(&zk.ErrNotEmpty).Elem(),
		"ErrNotLocked":                    reflect.ValueOf(&zk.ErrNotLocked).Elem(),
		"ErrNothing":                      reflect.ValueOf(&zk.ErrNothing).Elem(),
		"ErrPtrExpected":                  reflect.ValueOf(&zk.ErrPtrExpected).Elem(),
		"ErrReconfigDisabled":             reflect.ValueOf(&zk.ErrReconfigDisabled).Elem(),
		"ErrSessionExpired":               reflect.ValueOf(&zk.ErrSessionExpired).Elem(),
		"ErrSessionMoved":                 reflect.ValueOf(&zk.ErrSessionMoved).Elem(),
		"ErrShortBuffer":                  reflect.ValueOf(&zk.ErrShortBuffer).Elem(),
		"ErrUnhandledFieldType":           reflect.ValueOf(&zk.ErrUnhandledFieldType).Elem(),
		"ErrUnknown":                      reflect.ValueOf(&zk.ErrUnknown).Elem(),
		"EventNodeChildrenChanged":        reflect.ValueOf(zk.EventNodeChildrenChanged),
		"EventNodeCreated":                reflect.ValueOf(zk.EventNodeCreated),
		"EventNodeDataChanged":            reflect.ValueOf(zk.EventNodeDataChanged),
		"EventNodeDeleted":                reflect.ValueOf(zk.EventNodeDeleted),
		"EventNotWatching":                reflect.ValueOf(zk.EventNotWatching),
		"EventSession":                    reflect.ValueOf(zk.EventSession),
		"FLWCons":                         reflect.ValueOf(zk.FLWCons),
		"FLWRuok":                         reflect.ValueOf(zk.FLWRuok),
		"FLWSrvr":                         reflect.ValueOf(zk.FLWSrvr),
		"FlagContainer":                   reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"FlagEphemeral":                   reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"FlagEphemeralSequential":         reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"FlagPersistent":                  reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"FlagPersistentSequentialWithTTL": reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"FlagSequence":                    reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"FlagTTL":                         reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"FormatServers":                   reflect.ValueOf(zk.FormatServers),
		"ModeFollower":                    reflect.ValueOf(zk.ModeFollower),
		"ModeLeader":                      reflect.ValueOf(zk.ModeLeader),
		"ModeStandalone":                  reflect.ValueOf(zk.ModeStandalone),
		"ModeUnknown":                     reflect.ValueOf(zk.ModeUnknown),
		"NewDNSHostProvider":              reflect.ValueOf(zk.NewDNSHostProvider),
		"NewLock":                         reflect.ValueOf(zk.NewLock),
		"PermAdmin":                       reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"PermAll":                         reflect.ValueOf(constant.MakeFromLiteral("31", token.INT, 0)),
		"PermCreate":                      reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"PermDelete":                      reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"PermRead":                        reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"PermWrite":                       reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"StateAuthFailed":                 reflect.ValueOf(zk.StateAuthFailed),
		"StateConnected":                  reflect.ValueOf(zk.StateConnected),
		"StateConnectedReadOnly":          reflect.ValueOf(zk.StateConnectedReadOnly),
		"StateConnecting":                 reflect.ValueOf(zk.StateConnecting),
		"StateDisconnected":               reflect.ValueOf(zk.StateDisconnected),
		"StateExpired":                    reflect.ValueOf(zk.StateExpired),
		"StateHasSession":                 reflect.ValueOf(zk.StateHasSession),
		"StateSaslAuthenticated":          reflect.ValueOf(zk.StateSaslAuthenticated),
		"StateSyncConnected":              reflect.ValueOf(zk.StateSyncConnected),
		"StateUnknown":                    reflect.ValueOf(zk.StateUnknown),
		"WithDialer":                      reflect.ValueOf(zk.WithDialer),
		"WithEventCallback":               reflect.ValueOf(zk.WithEventCallback),
		"WithHostProvider":                reflect.ValueOf(zk.WithHostProvider),
		"WithLogInfo":                     reflect.ValueOf(zk.WithLogInfo),
		"WithLogger":                      reflect.ValueOf(zk.WithLogger),
		"WithLookupTimeout":               reflect.ValueOf(zk.WithLookupTimeout),
		"WithMaxBufferSize":               reflect.ValueOf(zk.WithMaxBufferSize),
		"WithMaxConnBufferSize":           reflect.ValueOf(zk.WithMaxConnBufferSize),
		"WorldACL":                        reflect.ValueOf(zk.WorldACL),

		// type definitions
		"ACL":                   reflect.ValueOf((*zk.ACL)(nil)),
		"CheckVersionRequest":   reflect.ValueOf((*zk.CheckVersionRequest)(nil)),
		"Conn":                  reflect.ValueOf((*zk.Conn)(nil)),
		"CreateRequest":         reflect.ValueOf((*zk.CreateRequest)(nil)),
		"CreateTTLRequest":      reflect.ValueOf((*zk.CreateTTLRequest)(nil)),
		"DNSHostProvider":       reflect.ValueOf((*zk.DNSHostProvider)(nil)),
		"DNSHostProviderOption": reflect.ValueOf((*zk.DNSHostProviderOption)(nil)),
		"DeleteRequest":         reflect.ValueOf((*zk.DeleteRequest)(nil)),
		"Dialer":                reflect.ValueOf((*zk.Dialer)(nil)),
		"ErrCode":               reflect.ValueOf((*zk.ErrCode)(nil)),
		"Event":                 reflect.ValueOf((*zk.Event)(nil)),
		"EventCallback":         reflect.ValueOf((*zk.EventCallback)(nil)),
		"EventType":             reflect.ValueOf((*zk.EventType)(nil)),
		"HostProvider":          reflect.ValueOf((*zk.HostProvider)(nil)),
		"Lock":                  reflect.ValueOf((*zk.Lock)(nil)),
		"Logger":                reflect.ValueOf((*zk.Logger)(nil)),
		"Mode":                  reflect.ValueOf((*zk.Mode)(nil)),
		"MultiResponse":         reflect.ValueOf((*zk.MultiResponse)(nil)),
		"PathVersionRequest":    reflect.ValueOf((*zk.PathVersionRequest)(nil)),
		"ServerClient":          reflect.ValueOf((*zk.ServerClient)(nil)),
		"ServerClients":         reflect.ValueOf((*zk.ServerClients)(nil)),
		"ServerStats":           reflect.ValueOf((*zk.ServerStats)(nil)),
		"SetDataRequest":        reflect.ValueOf((*zk.SetDataRequest)(nil)),
		"Stat":                  reflect.ValueOf((*zk.Stat)(nil)),
		"State":                 reflect.ValueOf((*zk.State)(nil)),

		// interface wrapper definitions
		"_DNSHostProviderOption": reflect.ValueOf((*_github_com_go_zookeeper_zk_DNSHostProviderOption)(nil)),
		"_HostProvider":          reflect.ValueOf((*_github_com_go_zookeeper_zk_HostProvider)(nil)),
		"_Logger":                reflect.ValueOf((*_github_com_go_zookeeper_zk_Logger)(nil)),
	}
}

// _github_com_go_zookeeper_zk_DNSHostProviderOption is an interface wrapper for DNSHostProviderOption type
type _github_com_go_zookeeper_zk_DNSHostProviderOption struct {
	IValue interface{}
}

// _github_com_go_zookeeper_zk_HostProvider is an interface wrapper for HostProvider type
type _github_com_go_zookeeper_zk_HostProvider struct {
	IValue     interface{}
	WConnected func()
	WInit      func(servers []string) error
	WLen       func() int
	WNext      func() (server string, retryStart bool)
}

func (W _github_com_go_zookeeper_zk_HostProvider) Connected() {
	W.WConnected()
}
func (W _github_com_go_zookeeper_zk_HostProvider) Init(servers []string) error {
	return W.WInit(servers)
}
func (W _github_com_go_zookeeper_zk_HostProvider) Len() int {
	return W.WLen()
}
func (W _github_com_go_zookeeper_zk_HostProvider) Next() (server string, retryStart bool) {
	return W.WNext()
}

// _github_com_go_zookeeper_zk_Logger is an interface wrapper for Logger type
type _github_com_go_zookeeper_zk_Logger struct {
	IValue  interface{}
	WPrintf func(a0 string, a1 ...interface{})
}

func (W _github_com_go_zookeeper_zk_Logger) Printf(a0 string, a1 ...interface{}) {
	W.WPrintf(a0, a1...)
}
