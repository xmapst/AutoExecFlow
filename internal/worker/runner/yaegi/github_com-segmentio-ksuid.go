// Code generated by 'yaegi extract github.com/segmentio/ksuid'. DO NOT EDIT.

package yaegi

import (
	"github.com/segmentio/ksuid"
	"reflect"
)

func init() {
	Symbols["github.com/segmentio/ksuid/ksuid"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AppendCompressed":  reflect.ValueOf(ksuid.AppendCompressed),
		"Compare":           reflect.ValueOf(ksuid.Compare),
		"Compress":          reflect.ValueOf(ksuid.Compress),
		"FastRander":        reflect.ValueOf(&ksuid.FastRander).Elem(),
		"FromBytes":         reflect.ValueOf(ksuid.FromBytes),
		"FromParts":         reflect.ValueOf(ksuid.FromParts),
		"IsSorted":          reflect.ValueOf(ksuid.IsSorted),
		"Max":               reflect.ValueOf(&ksuid.Max).Elem(),
		"New":               reflect.ValueOf(ksuid.New),
		"NewRandom":         reflect.ValueOf(ksuid.NewRandom),
		"NewRandomWithTime": reflect.ValueOf(ksuid.NewRandomWithTime),
		"Nil":               reflect.ValueOf(&ksuid.Nil).Elem(),
		"Parse":             reflect.ValueOf(ksuid.Parse),
		"SetRand":           reflect.ValueOf(ksuid.SetRand),
		"Sort":              reflect.ValueOf(ksuid.Sort),

		// type definitions
		"CompressedSet":     reflect.ValueOf((*ksuid.CompressedSet)(nil)),
		"CompressedSetIter": reflect.ValueOf((*ksuid.CompressedSetIter)(nil)),
		"KSUID":             reflect.ValueOf((*ksuid.KSUID)(nil)),
		"Sequence":          reflect.ValueOf((*ksuid.Sequence)(nil)),
	}
}
