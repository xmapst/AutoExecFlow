// Code generated by 'yaegi extract github.com/avast/retry-go/v4'. DO NOT EDIT.

package yaegi

import (
	"github.com/avast/retry-go/v4"
	"reflect"
	"time"
)

func init() {
	Symbols["github.com/avast/retry-go/v4/retry"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Attempts":                      reflect.ValueOf(retry.Attempts),
		"AttemptsForError":              reflect.ValueOf(retry.AttemptsForError),
		"BackOffDelay":                  reflect.ValueOf(retry.BackOffDelay),
		"CombineDelay":                  reflect.ValueOf(retry.CombineDelay),
		"Context":                       reflect.ValueOf(retry.Context),
		"Delay":                         reflect.ValueOf(retry.Delay),
		"DelayType":                     reflect.ValueOf(retry.DelayType),
		"Do":                            reflect.ValueOf(retry.Do),
		"FixedDelay":                    reflect.ValueOf(retry.FixedDelay),
		"IsRecoverable":                 reflect.ValueOf(retry.IsRecoverable),
		"LastErrorOnly":                 reflect.ValueOf(retry.LastErrorOnly),
		"MaxDelay":                      reflect.ValueOf(retry.MaxDelay),
		"MaxJitter":                     reflect.ValueOf(retry.MaxJitter),
		"OnRetry":                       reflect.ValueOf(retry.OnRetry),
		"RandomDelay":                   reflect.ValueOf(retry.RandomDelay),
		"RetryIf":                       reflect.ValueOf(retry.RetryIf),
		"Unrecoverable":                 reflect.ValueOf(retry.Unrecoverable),
		"UntilSucceeded":                reflect.ValueOf(retry.UntilSucceeded),
		"WithTimer":                     reflect.ValueOf(retry.WithTimer),
		"WrapContextErrorWithLastError": reflect.ValueOf(retry.WrapContextErrorWithLastError),

		// type definitions
		"Config":        reflect.ValueOf((*retry.Config)(nil)),
		"DelayTypeFunc": reflect.ValueOf((*retry.DelayTypeFunc)(nil)),
		"Error":         reflect.ValueOf((*retry.Error)(nil)),
		"OnRetryFunc":   reflect.ValueOf((*retry.OnRetryFunc)(nil)),
		"Option":        reflect.ValueOf((*retry.Option)(nil)),
		"RetryIfFunc":   reflect.ValueOf((*retry.RetryIfFunc)(nil)),
		"RetryableFunc": reflect.ValueOf((*retry.RetryableFunc)(nil)),
		"Timer":         reflect.ValueOf((*retry.Timer)(nil)),

		// interface wrapper definitions
		"_Timer": reflect.ValueOf((*_github_com_avast_retry_go_v4_Timer)(nil)),
	}
}

// _github_com_avast_retry_go_v4_Timer is an interface wrapper for Timer type
type _github_com_avast_retry_go_v4_Timer struct {
	IValue interface{}
	WAfter func(a0 time.Duration) <-chan time.Time
}

func (W _github_com_avast_retry_go_v4_Timer) After(a0 time.Duration) <-chan time.Time {
	return W.WAfter(a0)
}
